
EsameTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005490  08005490  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005498  08005498  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080054a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000018  080054b8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  080054b8  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019769  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003097  00000000  00000000  000397b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  0003de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027456  00000000  00000000  0003f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c8a  00000000  00000000  000667f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef1e8  00000000  00000000  0007e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f38  00000000  00000000  0016d6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005430 	.word	0x08005430

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005430 	.word	0x08005430

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_pia>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void write_pia(uint8_t dato)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); //STROBE
 80004ca:	2201      	movs	r2, #1
 80004cc:	2104      	movs	r1, #4
 80004ce:	483e      	ldr	r0, [pc, #248]	; (80005c8 <write_pia+0x108>)
 80004d0:	f001 fca6 	bl	8001e20 <HAL_GPIO_WritePin>
	while(GPIO_PIN_RESET != HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)); //POLLING SU BUSY
 80004d4:	bf00      	nop
 80004d6:	2102      	movs	r1, #2
 80004d8:	483b      	ldr	r0, [pc, #236]	; (80005c8 <write_pia+0x108>)
 80004da:	f001 fc89 	bl	8001df0 <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d1f8      	bne.n	80004d6 <write_pia+0x16>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (dato & 1)? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	461a      	mov	r2, r3
 80004ee:	2104      	movs	r1, #4
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f001 fc94 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, ((dato >> 1) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	085b      	lsrs	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	461a      	mov	r2, r3
 8000506:	2108      	movs	r1, #8
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 fc88 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ((dato >> 2) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	089b      	lsrs	r3, r3, #2
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	2110      	movs	r1, #16
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f001 fc7c 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ((dato >> 3) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	08db      	lsrs	r3, r3, #3
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	2120      	movs	r1, #32
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f001 fc70 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, ((dato >> 4) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	091b      	lsrs	r3, r3, #4
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f001 fc64 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ((dato >> 5) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	095b      	lsrs	r3, r3, #5
 800055c:	b2db      	uxtb	r3, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 fc58 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, ((dato >> 6) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	099b      	lsrs	r3, r3, #6
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f001 fc4b 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((dato >> 7) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	09db      	lsrs	r3, r3, #7
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	2110      	movs	r1, #16
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <write_pia+0x108>)
 8000596:	f001 fc43 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //STROBE
 800059a:	2200      	movs	r2, #0
 800059c:	2104      	movs	r1, #4
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <write_pia+0x108>)
 80005a0:	f001 fc3e 	bl	8001e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); //STROBE
 80005a4:	2201      	movs	r2, #1
 80005a6:	2104      	movs	r1, #4
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <write_pia+0x108>)
 80005aa:	f001 fc39 	bl	8001e20 <HAL_GPIO_WritePin>
	while(GPIO_PIN_SET != HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)); //POLLING SU ACK
 80005ae:	bf00      	nop
 80005b0:	2101      	movs	r1, #1
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <write_pia+0x108>)
 80005b4:	f001 fc1c 	bl	8001df0 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d1f8      	bne.n	80005b0 <write_pia+0xf0>
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	48000400 	.word	0x48000400

080005cc <HAL_GPIO_EXTI_Callback>:
//
//	i_pia = (i_pia + 1)%9;
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	dato = data_pia_tx[cont_pia];
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_GPIO_EXTI_Callback+0x50>)
 80005de:	5c9a      	ldrb	r2, [r3, r2]
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_GPIO_EXTI_Callback+0x54>)
 80005e2:	701a      	strb	r2, [r3, #0]
	write_pia(dato);
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_GPIO_EXTI_Callback+0x54>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff69 	bl	80004c0 <write_pia>
	cont_pia = (cont_pia + 1)%9;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_GPIO_EXTI_Callback+0x58>)
 80005f6:	fb83 1302 	smull	r1, r3, r3, r2
 80005fa:	1059      	asrs	r1, r3, #1
 80005fc:	17d3      	asrs	r3, r2, #31
 80005fe:	1ac9      	subs	r1, r1, r3
 8000600:	460b      	mov	r3, r1
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	440b      	add	r3, r1
 8000606:	1ad1      	subs	r1, r2, r3
 8000608:	b2ca      	uxtb	r2, r1
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_GPIO_EXTI_Callback+0x4c>)
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000034 	.word	0x20000034
 800061c:	20000000 	.word	0x20000000
 8000620:	20000035 	.word	0x20000035
 8000624:	38e38e39 	.word	0x38e38e39

08000628 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &data_uart_rx, sizeof(uint8_t));
 8000630:	2201      	movs	r2, #1
 8000632:	4904      	ldr	r1, [pc, #16]	; (8000644 <HAL_UART_TxCpltCallback+0x1c>)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f003 fbd7 	bl	8003de8 <HAL_UART_Receive_IT>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000036 	.word	0x20000036

08000648 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	if(data_uart_rx == 0xFF){
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_UART_RxCpltCallback+0x40>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2bff      	cmp	r3, #255	; 0xff
 8000656:	d113      	bne.n	8000680 <HAL_UART_RxCpltCallback+0x38>
		cont_uart++;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_UART_RxCpltCallback+0x44>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_UART_RxCpltCallback+0x44>)
 8000662:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(huart, data_uart_tx[cont_uart], N*sizeof(uint8_t));
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_UART_RxCpltCallback+0x44>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_UART_RxCpltCallback+0x48>)
 8000674:	4413      	add	r3, r2
 8000676:	220a      	movs	r2, #10
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f003 fb58 	bl	8003d30 <HAL_UART_Transmit_IT>
	}
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000036 	.word	0x20000036
 800068c:	20000037 	.word	0x20000037
 8000690:	2000011c 	.word	0x2000011c

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fec8 	bl	800142e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f84b 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fa87 	bl	8000bb4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80006a6:	f000 f8ed 	bl	8000884 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80006aa:	f000 f923 	bl	80008f4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80006ae:	f000 f95f 	bl	8000970 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80006b2:	f000 f983 	bl	80009bc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80006b6:	f000 f9ef 	bl	8000a98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80006ba:	f000 fa1d 	bl	8000af8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006be:	f000 fa4b 	bl	8000b58 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80006c2:	f000 f9b9 	bl	8000a38 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //scrittura_pia(0x07);
  for(uint8_t i = 0; i<M; i++){
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	e016      	b.n	80006fa <main+0x66>
	  for(uint8_t j = 0; j<N; j++){
 80006cc:	2300      	movs	r3, #0
 80006ce:	71bb      	strb	r3, [r7, #6]
 80006d0:	e00d      	b.n	80006ee <main+0x5a>
		  data_uart_tx[i][j] = 0xFF;
 80006d2:	79fa      	ldrb	r2, [r7, #7]
 80006d4:	79b9      	ldrb	r1, [r7, #6]
 80006d6:	4814      	ldr	r0, [pc, #80]	; (8000728 <main+0x94>)
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4403      	add	r3, r0
 80006e2:	440b      	add	r3, r1
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	701a      	strb	r2, [r3, #0]
	  for(uint8_t j = 0; j<N; j++){
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	3301      	adds	r3, #1
 80006ec:	71bb      	strb	r3, [r7, #6]
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	2b09      	cmp	r3, #9
 80006f2:	d9ee      	bls.n	80006d2 <main+0x3e>
  for(uint8_t i = 0; i<M; i++){
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	3301      	adds	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	d9e5      	bls.n	80006cc <main+0x38>
	  }
  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <main+0x98>)
 8000706:	f001 fb8b 	bl	8001e20 <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart4, data_uart_tx[cont_uart], N*sizeof(uint8_t));
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <main+0x9c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <main+0x94>)
 800071a:	4413      	add	r3, r2
 800071c:	220a      	movs	r2, #10
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <main+0xa0>)
 8000722:	f003 fb05 	bl	8003d30 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000726:	e7fe      	b.n	8000726 <main+0x92>
 8000728:	2000011c 	.word	0x2000011c
 800072c:	48000400 	.word	0x48000400
 8000730:	20000037 	.word	0x20000037
 8000734:	200006bc 	.word	0x200006bc

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0b8      	sub	sp, #224	; 0xe0
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000742:	2244      	movs	r2, #68	; 0x44
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fe6a 	bl	8005420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2288      	movs	r2, #136	; 0x88
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fe5c 	bl	8005420 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f001 fdf8 	bl	800235c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800076c:	4b43      	ldr	r3, [pc, #268]	; (800087c <SystemClock_Config+0x144>)
 800076e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000772:	4a42      	ldr	r2, [pc, #264]	; (800087c <SystemClock_Config+0x144>)
 8000774:	f023 0318 	bic.w	r3, r3, #24
 8000778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800077c:	2314      	movs	r3, #20
 800077e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000794:	2360      	movs	r3, #96	; 0x60
 8000796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007ac:	2328      	movs	r3, #40	; 0x28
 80007ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 ff07 	bl	80025dc <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007d4:	f000 fb3a 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007fa:	2104      	movs	r1, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fad3 	bl	8002da8 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000808:	f000 fb20 	bl	8000e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <SystemClock_Config+0x148>)
 800080e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000818:	2300      	movs	r3, #0
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800081c:	2300      	movs	r3, #0
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000820:	2300      	movs	r3, #0
 8000822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000826:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800082a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800082c:	2301      	movs	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000834:	2318      	movs	r3, #24
 8000836:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000838:	2307      	movs	r3, #7
 800083a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000844:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000848:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fcb1 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000858:	f000 faf8 	bl	8000e4c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000860:	f001 fd9a 	bl	8002398 <HAL_PWREx_ControlVoltageScaling>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x136>
  {
    Error_Handler();
 800086a:	f000 faef 	bl	8000e4c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800086e:	f002 ff8b 	bl	8003788 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000872:	bf00      	nop
 8000874:	37e0      	adds	r7, #224	; 0xe0
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000
 8000880:	0001208d 	.word	0x0001208d

08000884 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_DFSDM1_Init+0x68>)
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <MX_DFSDM1_Init+0x6c>)
 800088c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_DFSDM1_Init+0x68>)
 8000890:	2201      	movs	r2, #1
 8000892:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_DFSDM1_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_DFSDM1_Init+0x68>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008bc:	2204      	movs	r2, #4
 80008be:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_DFSDM1_Init+0x68>)
 80008da:	f000 ff53 	bl	8001784 <HAL_DFSDM_ChannelInit>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008e4:	f000 fab2 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000060 	.word	0x20000060
 80008f0:	40016020 	.word	0x40016020

080008f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_I2C2_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_I2C2_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_I2C2_Init+0x74>)
 8000900:	f640 6214 	movw	r2, #3604	; 0xe14
 8000904:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_I2C2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_I2C2_Init+0x74>)
 800090e:	2201      	movs	r2, #1
 8000910:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_I2C2_Init+0x74>)
 8000932:	f001 faa5 	bl	8001e80 <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 fa86 	bl	8000e4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_I2C2_Init+0x74>)
 8000944:	f001 fb2b 	bl	8001f9e <HAL_I2CEx_ConfigAnalogFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800094e:	f000 fa7d 	bl	8000e4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_I2C2_Init+0x74>)
 8000956:	f001 fb6d 	bl	8002034 <HAL_I2CEx_ConfigDigitalFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000960:	f000 fa74 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000588 	.word	0x20000588
 800096c:	40005800 	.word	0x40005800

08000970 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <MX_QUADSPI_Init+0x48>)
 8000978:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 800097c:	2202      	movs	r2, #2
 800097e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000982:	2204      	movs	r2, #4
 8000984:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000988:	2210      	movs	r2, #16
 800098a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 800098e:	2217      	movs	r2, #23
 8000990:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_QUADSPI_Init+0x44>)
 80009a0:	f001 fd60 	bl	8002464 <HAL_QSPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80009aa:	f000 fa4f 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000740 	.word	0x20000740
 80009b8:	a0001000 	.word	0xa0001000

080009bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_SPI3_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a1c:	f003 f896 	bl	8003b4c <HAL_SPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fa11 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200005d4 	.word	0x200005d4
 8000a34:	40003c00 	.word	0x40003c00

08000a38 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <MX_UART4_Init+0x5c>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_UART4_Init+0x58>)
 8000a7c:	f003 f909 	bl	8003c92 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a86:	f000 f9e1 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200006bc 	.word	0x200006bc
 8000a94:	40004c00 	.word	0x40004c00

08000a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <MX_USART1_UART_Init+0x5c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART1_UART_Init+0x58>)
 8000adc:	f003 f8d9 	bl	8003c92 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ae6:	f000 f9b1 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000638 	.word	0x20000638
 8000af4:	40013800 	.word	0x40013800

08000af8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <MX_USART3_UART_Init+0x5c>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART3_UART_Init+0x58>)
 8000b3c:	f003 f8a9 	bl	8003c92 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 f981 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000098 	.word	0x20000098
 8000b54:	40004800 	.word	0x40004800

08000b58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b66:	2206      	movs	r2, #6
 8000b68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	f001 fa96 	bl	80020cc <HAL_PCD_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f000 f951 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000180 	.word	0x20000180

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	4b99      	ldr	r3, [pc, #612]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b96      	ldr	r3, [pc, #600]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b93      	ldr	r3, [pc, #588]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a92      	ldr	r2, [pc, #584]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b90      	ldr	r3, [pc, #576]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b8d      	ldr	r3, [pc, #564]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a8c      	ldr	r2, [pc, #560]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b8a      	ldr	r3, [pc, #552]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b87      	ldr	r3, [pc, #540]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a86      	ldr	r2, [pc, #536]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b84      	ldr	r3, [pc, #528]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b81      	ldr	r3, [pc, #516]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a80      	ldr	r2, [pc, #512]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b7e      	ldr	r3, [pc, #504]	; (8000e30 <MX_GPIO_Init+0x27c>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c48:	487a      	ldr	r0, [pc, #488]	; (8000e34 <MX_GPIO_Init+0x280>)
 8000c4a:	f001 f8e9 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f248 11fc 	movw	r1, #33276	; 0x81fc
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f001 f8e2 	bl	8001e20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2124      	movs	r1, #36	; 0x24
 8000c60:	4875      	ldr	r0, [pc, #468]	; (8000e38 <MX_GPIO_Init+0x284>)
 8000c62:	f001 f8dd 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000c66:	2200      	movs	r2, #0
 8000c68:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c6c:	4872      	ldr	r0, [pc, #456]	; (8000e38 <MX_GPIO_Init+0x284>)
 8000c6e:	f001 f8d7 	bl	8001e20 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c78:	4870      	ldr	r0, [pc, #448]	; (8000e3c <MX_GPIO_Init+0x288>)
 8000c7a:	f001 f8d1 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c84:	486d      	ldr	r0, [pc, #436]	; (8000e3c <MX_GPIO_Init+0x288>)
 8000c86:	f001 f8cb 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c90:	486b      	ldr	r0, [pc, #428]	; (8000e40 <MX_GPIO_Init+0x28c>)
 8000c92:	f001 f8c5 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4866      	ldr	r0, [pc, #408]	; (8000e34 <MX_GPIO_Init+0x280>)
 8000c9c:	f001 f8c0 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ca0:	f240 1315 	movw	r3, #277	; 0x115
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	485e      	ldr	r0, [pc, #376]	; (8000e34 <MX_GPIO_Init+0x280>)
 8000cba:	f000 feef 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin;
 8000cbe:	2368      	movs	r3, #104	; 0x68
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc2:	4b60      	ldr	r3, [pc, #384]	; (8000e44 <MX_GPIO_Init+0x290>)
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4858      	ldr	r0, [pc, #352]	; (8000e34 <MX_GPIO_Init+0x280>)
 8000cd2:	f000 fee3 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <MX_GPIO_Init+0x294>)
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4855      	ldr	r0, [pc, #340]	; (8000e40 <MX_GPIO_Init+0x28c>)
 8000cec:	f000 fed6 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000cf0:	233f      	movs	r3, #63	; 0x3f
 8000cf2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cf4:	230b      	movs	r3, #11
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	484f      	ldr	r0, [pc, #316]	; (8000e40 <MX_GPIO_Init+0x28c>)
 8000d04:	f000 feca 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA3 PA4 PA5
                           PA6 PA7 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d08:	f248 13fc 	movw	r3, #33276	; 0x81fc
 8000d0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f000 feba 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	483f      	ldr	r0, [pc, #252]	; (8000e38 <MX_GPIO_Init+0x284>)
 8000d3c:	f000 feae 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d40:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d44:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4837      	ldr	r0, [pc, #220]	; (8000e38 <MX_GPIO_Init+0x284>)
 8000d5a:	f000 fe9f 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d5e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4831      	ldr	r0, [pc, #196]	; (8000e3c <MX_GPIO_Init+0x288>)
 8000d78:	f000 fe90 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d7c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	482a      	ldr	r0, [pc, #168]	; (8000e40 <MX_GPIO_Init+0x28c>)
 8000d96:	f000 fe81 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_GPIO_Init+0x290>)
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4824      	ldr	r0, [pc, #144]	; (8000e40 <MX_GPIO_Init+0x28c>)
 8000db0:	f000 fe74 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_GPIO_Init+0x288>)
 8000dd0:	f000 fe64 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dd4:	2378      	movs	r3, #120	; 0x78
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de4:	2307      	movs	r3, #7
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_GPIO_Init+0x288>)
 8000df0:	f000 fe54 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000df4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e06:	2304      	movs	r3, #4
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_GPIO_Init+0x284>)
 8000e12:	f000 fe43 	bl	8001a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2101      	movs	r1, #1
 8000e1a:	2028      	movs	r0, #40	; 0x28
 8000e1c:	f000 fc7b 	bl	8001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e20:	2028      	movs	r0, #40	; 0x28
 8000e22:	f000 fc94 	bl	800174e <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48001000 	.word	0x48001000
 8000e38:	48000400 	.word	0x48000400
 8000e3c:	48000c00 	.word	0x48000c00
 8000e40:	48000800 	.word	0x48000800
 8000e44:	10110000 	.word	0x10110000
 8000e48:	10210000 	.word	0x10210000

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x44>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x44>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x44>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d12d      	bne.n	8000f1c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eca:	6613      	str	r3, [r2, #96]	; 0x60
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ef0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f02:	2306      	movs	r3, #6
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4807      	ldr	r0, [pc, #28]	; (8000f2c <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000f0e:	f000 fdc5 	bl	8001a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a02      	ldr	r2, [pc, #8]	; (8000f24 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000f1a:	6013      	str	r3, [r2, #0]
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000038 	.word	0x20000038
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48001000 	.word	0x48001000

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_I2C_MspInit+0x7c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d128      	bne.n	8000fa4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_I2C_MspInit+0x84>)
 8000f88:	f000 fd88 	bl	8001a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40005800 	.word	0x40005800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <HAL_QSPI_MspInit+0x7c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d128      	bne.n	800102c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_QSPI_MspInit+0x80>)
 8000fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <HAL_QSPI_MspInit+0x80>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6513      	str	r3, [r2, #80]	; 0x50
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_QSPI_MspInit+0x80>)
 8000fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_QSPI_MspInit+0x80>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_QSPI_MspInit+0x80>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_QSPI_MspInit+0x80>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800100a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800100e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800101c:	230a      	movs	r3, #10
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_QSPI_MspInit+0x84>)
 8001028:	f000 fd38 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	a0001000 	.word	0xa0001000
 8001038:	40021000 	.word	0x40021000
 800103c:	48001000 	.word	0x48001000

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_SPI_MspInit+0x7c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d128      	bne.n	80010b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106c:	6593      	str	r3, [r2, #88]	; 0x58
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_SPI_MspInit+0x80>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001092:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010a4:	2306      	movs	r3, #6
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_SPI_MspInit+0x84>)
 80010b0:	f000 fcf4 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40003c00 	.word	0x40003c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000800 	.word	0x48000800

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a4a      	ldr	r2, [pc, #296]	; (8001210 <HAL_UART_MspInit+0x148>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d131      	bne.n	800114e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010ea:	4b4a      	ldr	r3, [pc, #296]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	4a49      	ldr	r2, [pc, #292]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80010f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010f4:	6593      	str	r3, [r2, #88]	; 0x58
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010fe:	623b      	str	r3, [r7, #32]
 8001100:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b44      	ldr	r3, [pc, #272]	; (8001214 <HAL_UART_MspInit+0x14c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a43      	ldr	r2, [pc, #268]	; (8001214 <HAL_UART_MspInit+0x14c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <HAL_UART_MspInit+0x14c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800111a:	2303      	movs	r3, #3
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800112a:	2308      	movs	r3, #8
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f000 fcb0 	bl	8001a9c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2102      	movs	r1, #2
 8001140:	2034      	movs	r0, #52	; 0x34
 8001142:	f000 fae8 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001146:	2034      	movs	r0, #52	; 0x34
 8001148:	f000 fb01 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800114c:	e05b      	b.n	8001206 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_UART_MspInit+0x150>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d128      	bne.n	80011aa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <HAL_UART_MspInit+0x14c>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115c:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <HAL_UART_MspInit+0x14c>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	6613      	str	r3, [r2, #96]	; 0x60
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_UART_MspInit+0x14c>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_UART_MspInit+0x14c>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_UART_MspInit+0x14c>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_UART_MspInit+0x14c>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001198:	2307      	movs	r3, #7
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	481e      	ldr	r0, [pc, #120]	; (800121c <HAL_UART_MspInit+0x154>)
 80011a4:	f000 fc7a 	bl	8001a9c <HAL_GPIO_Init>
}
 80011a8:	e02d      	b.n	8001206 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_UART_MspInit+0x158>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d128      	bne.n	8001206 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80011ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011be:	6593      	str	r3, [r2, #88]	; 0x58
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_UART_MspInit+0x14c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f6:	2307      	movs	r3, #7
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <HAL_UART_MspInit+0x15c>)
 8001202:	f000 fc4b 	bl	8001a9c <HAL_GPIO_Init>
}
 8001206:	bf00      	nop
 8001208:	3738      	adds	r7, #56	; 0x38
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40004c00 	.word	0x40004c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40013800 	.word	0x40013800
 800121c:	48000400 	.word	0x48000400
 8001220:	40004800 	.word	0x40004800
 8001224:	48000c00 	.word	0x48000c00

08001228 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001248:	d154      	bne.n	80012f4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a2b      	ldr	r2, [pc, #172]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f000 fc0f 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800127e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001290:	230a      	movs	r3, #10
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129e:	f000 fbfd 	bl	8001a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d114      	bne.n	80012f0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80012de:	f001 f8b1 	bl	8002444 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012ee:	e001      	b.n	80012f4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80012f0:	f001 f8a8 	bl	8002444 <HAL_PWREx_EnableVddUSB>
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f8c4 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001358:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800135c:	f000 fd78 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <UART4_IRQHandler+0x10>)
 800136a:	f002 fd81 	bl	8003e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200006bc 	.word	0x200006bc

08001378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <SystemInit+0x5c>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <SystemInit+0x5c>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <SystemInit+0x60>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <SystemInit+0x60>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <SystemInit+0x60>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <SystemInit+0x60>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <SystemInit+0x60>)
 80013a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <SystemInit+0x60>)
 80013b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <SystemInit+0x60>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <SystemInit+0x60>)
 80013bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SystemInit+0x60>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	40021000 	.word	0x40021000

080013dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e0:	f7ff ffca 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013e6:	e003      	b.n	80013f0 <LoopCopyDataInit>

080013e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013ee:	3104      	adds	r1, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <LoopForever+0xa>)
	ldr	r3, =_edata
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013f8:	d3f6      	bcc.n	80013e8 <CopyDataInit>
	ldr	r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013fc:	e002      	b.n	8001404 <LoopFillZerobss>

080013fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001400:	f842 3b04 	str.w	r3, [r2], #4

08001404 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <LoopForever+0x16>)
	cmp	r2, r3
 8001406:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001408:	d3f9      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140a:	f003 ffe5 	bl	80053d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140e:	f7ff f941 	bl	8000694 <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001414:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001418:	080054a0 	.word	0x080054a0
	ldr	r0, =_sdata
 800141c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001420:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001424:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001428:	20000788 	.word	0x20000788

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>

0800142e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f961 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f80e 	bl	8001460 <HAL_InitTick>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	e001      	b.n	8001454 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001450:	f7ff fd02 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001454:	79fb      	ldrb	r3, [r7, #7]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_InitTick+0x6c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d023      	beq.n	80014bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_InitTick+0x70>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_InitTick+0x6c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f96d 	bl	800176a <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d809      	bhi.n	80014b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f000 f937 	bl	8001716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_InitTick+0x74>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e007      	b.n	80014c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e004      	b.n	80014c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e001      	b.n	80014c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000014 	.word	0x20000014
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	20000010 	.word	0x20000010

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000014 	.word	0x20000014
 80014fc:	20000784 	.word	0x20000784

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000784 	.word	0x20000784

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000014 	.word	0x20000014

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff3e 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff8e 	bl	8001654 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5d 	bl	8001600 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff31 	bl	80015c4 <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa2 	bl	80016bc <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0ac      	b.n	80018f0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f8b2 	bl	8001904 <DFSDM_GetChannelFromInstance>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a55      	ldr	r2, [pc, #340]	; (80018f8 <HAL_DFSDM_ChannelInit+0x174>)
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e09f      	b.n	80018f0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fb75 	bl	8000ea0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017b6:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_DFSDM_ChannelInit+0x178>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a4f      	ldr	r2, [pc, #316]	; (80018fc <HAL_DFSDM_ChannelInit+0x178>)
 80017be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80017c0:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_DFSDM_ChannelInit+0x178>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d125      	bne.n	8001814 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80017c8:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80017d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80017d4:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4948      	ldr	r1, [pc, #288]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a46      	ldr	r2, [pc, #280]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 80017e8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80017ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	791b      	ldrb	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	3b01      	subs	r3, #1
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	493f      	ldr	r1, [pc, #252]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001808:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <HAL_DFSDM_ChannelInit+0x17c>)
 800180e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001812:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001822:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001832:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001838:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 020f 	bic.w	r2, r2, #15
 8001850:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001878:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6899      	ldr	r1, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	3b01      	subs	r3, #1
 800188a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f002 0207 	and.w	r2, r2, #7
 80018a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f810 	bl	8001904 <DFSDM_GetChannelFromInstance>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4904      	ldr	r1, [pc, #16]	; (80018f8 <HAL_DFSDM_ChannelInit+0x174>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000040 	.word	0x20000040
 80018fc:	2000003c 	.word	0x2000003c
 8001900:	40016000 	.word	0x40016000

08001904 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <DFSDM_GetChannelFromInstance+0x7c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d102      	bne.n	800191a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e02b      	b.n	8001972 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <DFSDM_GetChannelFromInstance+0x80>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d102      	bne.n	8001928 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001922:	2301      	movs	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e024      	b.n	8001972 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <DFSDM_GetChannelFromInstance+0x84>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d102      	bne.n	8001936 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e01d      	b.n	8001972 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <DFSDM_GetChannelFromInstance+0x88>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d102      	bne.n	8001944 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800193e:	2304      	movs	r3, #4
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e016      	b.n	8001972 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <DFSDM_GetChannelFromInstance+0x8c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d102      	bne.n	8001952 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800194c:	2305      	movs	r3, #5
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e00f      	b.n	8001972 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <DFSDM_GetChannelFromInstance+0x90>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d102      	bne.n	8001960 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800195a:	2306      	movs	r3, #6
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e008      	b.n	8001972 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <DFSDM_GetChannelFromInstance+0x94>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d102      	bne.n	800196e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001968:	2307      	movs	r3, #7
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e001      	b.n	8001972 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800196e:	2303      	movs	r3, #3
 8001970:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40016000 	.word	0x40016000
 8001984:	40016020 	.word	0x40016020
 8001988:	40016040 	.word	0x40016040
 800198c:	40016080 	.word	0x40016080
 8001990:	400160a0 	.word	0x400160a0
 8001994:	400160c0 	.word	0x400160c0
 8001998:	400160e0 	.word	0x400160e0

0800199c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d008      	beq.n	80019c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2204      	movs	r2, #4
 80019b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e022      	b.n	8001a0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 020e 	bic.w	r2, r2, #14
 80019d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 021c 	and.w	r2, r3, #28
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d005      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e029      	b.n	8001a90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 020e 	bic.w	r2, r2, #14
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	f003 021c 	and.w	r2, r3, #28
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2101      	movs	r1, #1
 8001a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
    }
  }
  return status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	e17f      	b.n	8001dac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8171 	beq.w	8001da6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d00b      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad8:	2b11      	cmp	r3, #17
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d130      	bne.n	8001b46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 0201 	and.w	r2, r3, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d118      	bne.n	8001b84 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f003 0201 	and.w	r2, r3, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x128>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b12      	cmp	r3, #18
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	6939      	ldr	r1, [r7, #16]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80ac 	beq.w	8001da6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_GPIO_Init+0x330>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	4a5e      	ldr	r2, [pc, #376]	; (8001dcc <HAL_GPIO_Init+0x330>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <HAL_GPIO_Init+0x330>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_GPIO_Init+0x334>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c90:	d025      	beq.n	8001cde <HAL_GPIO_Init+0x242>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_GPIO_Init+0x338>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01f      	beq.n	8001cda <HAL_GPIO_Init+0x23e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x33c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x23a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x340>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x236>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x344>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x232>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x348>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x22e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x34c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x22a>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e00c      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00a      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cca:	2305      	movs	r3, #5
 8001ccc:	e008      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e004      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e002      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_GPIO_Init+0x244>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	f002 0203 	and.w	r2, r2, #3
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	4093      	lsls	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf0:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x334>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d22:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f47f ae78 	bne.w	8001aac <HAL_GPIO_Init+0x10>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000c00 	.word	0x48000c00
 8001de0:	48001000 	.word	0x48001000
 8001de4:	48001400 	.word	0x48001400
 8001de8:	48001800 	.word	0x48001800
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fbac 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e081      	b.n	8001f96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff f842 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e006      	b.n	8001f08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d104      	bne.n	8001f1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	ea42 0103 	orr.w	r1, r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	021a      	lsls	r2, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69d9      	ldr	r1, [r3, #28]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d138      	bne.n	8002026 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e032      	b.n	8002028 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2224      	movs	r2, #36	; 0x24
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002026:	2302      	movs	r3, #2
  }
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b20      	cmp	r3, #32
 8002048:	d139      	bne.n	80020be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002054:	2302      	movs	r3, #2
 8002056:	e033      	b.n	80020c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002086:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020be:	2302      	movs	r3, #2
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b08f      	sub	sp, #60	; 0x3c
 80020d0:	af0a      	add	r7, sp, #40	; 0x28
 80020d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e116      	b.n	800230c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff f895 	bl	8001228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f002 ff1d 	bl	8004f5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	687e      	ldr	r6, [r7, #4]
 800212a:	466d      	mov	r5, sp
 800212c:	f106 0410 	add.w	r4, r6, #16
 8002130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002140:	1d33      	adds	r3, r6, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	6838      	ldr	r0, [r7, #0]
 8002146:	f002 fedd 	bl	8004f04 <USB_CoreInit>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d7      	b.n	800230c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f002 ff0b 	bl	8004f7e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e04a      	b.n	8002204 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	333d      	adds	r3, #61	; 0x3d
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	333c      	adds	r3, #60	; 0x3c
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	b298      	uxth	r0, r3
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3342      	adds	r3, #66	; 0x42
 80021aa:	4602      	mov	r2, r0
 80021ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	333f      	adds	r3, #63	; 0x3f
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	3344      	adds	r3, #68	; 0x44
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3348      	adds	r3, #72	; 0x48
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3350      	adds	r3, #80	; 0x50
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	3301      	adds	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d3af      	bcc.n	800216e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e044      	b.n	800229e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	3301      	adds	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3b5      	bcc.n	8002214 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	687e      	ldr	r6, [r7, #4]
 80022b0:	466d      	mov	r5, sp
 80022b2:	f106 0410 	add.w	r4, r6, #16
 80022b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c6:	1d33      	adds	r3, r6, #4
 80022c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f002 fe82 	bl	8004fd4 <USB_DevInit>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e014      	b.n	800230c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f80a 	bl	8002314 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f003 f812 	bl	800532e <USB_DevDisconnect>

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002314 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	f043 0303 	orr.w	r3, r3, #3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_PWREx_GetVoltageRange+0x18>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a6:	d130      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d038      	beq.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023be:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2232      	movs	r2, #50	; 0x32
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9b      	lsrs	r3, r3, #18
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023dc:	e002      	b.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f0:	d102      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f2      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002404:	d110      	bne.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e00f      	b.n	800242a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002416:	d007      	beq.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002420:	4a05      	ldr	r2, [pc, #20]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002426:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000
 800243c:	2000000c 	.word	0x2000000c
 8002440:	431bde83 	.word	0x431bde83

08002444 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_PWREx_EnableVddUSB+0x1c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_PWREx_EnableVddUSB+0x1c>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6053      	str	r3, [r2, #4]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff f848 	bl	8001500 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e063      	b.n	8002544 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fe fd91 	bl	8000fb8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002496:	f241 3188 	movw	r1, #5000	; 0x1388
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f858 	bl	8002550 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	021a      	lsls	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2120      	movs	r1, #32
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f850 	bl	800256c <QSPI_WaitFlagStateUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80024d0:	7afb      	ldrb	r3, [r7, #11]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d131      	bne.n	800253a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024e0:	f023 0310 	bic.w	r3, r3, #16
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6852      	ldr	r2, [r2, #4]
 80024e8:	0611      	lsls	r1, r2, #24
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68d2      	ldr	r2, [r2, #12]
 80024ee:	4311      	orrs	r1, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_QSPI_Init+0xe8>)
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6912      	ldr	r2, [r2, #16]
 8002506:	0411      	lsls	r1, r2, #16
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6952      	ldr	r2, [r2, #20]
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6992      	ldr	r2, [r2, #24]
 8002512:	4311      	orrs	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002542:	7afb      	ldrb	r3, [r7, #11]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	ffe0f8fe 	.word	0xffe0f8fe

08002550 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800257c:	e01a      	b.n	80025b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002584:	d016      	beq.n	80025b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002586:	f7fe ffbb 	bl	8001500 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	429a      	cmp	r2, r3
 8002594:	d302      	bcc.n	800259c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2204      	movs	r2, #4
 80025a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e00e      	b.n	80025d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf14      	ite	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	2300      	moveq	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1d6      	bne.n	800257e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e3d4      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4ba1      	ldr	r3, [pc, #644]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f8:	4b9e      	ldr	r3, [pc, #632]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80e4 	beq.w	80027d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_RCC_OscConfig+0x4a>
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	f040 808b 	bne.w	8002734 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 8087 	bne.w	8002734 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002626:	4b93      	ldr	r3, [pc, #588]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x62>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e3ac      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1a      	ldr	r2, [r3, #32]
 8002642:	4b8c      	ldr	r3, [pc, #560]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_RCC_OscConfig+0x7c>
 800264e:	4b89      	ldr	r3, [pc, #548]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002656:	e005      	b.n	8002664 <HAL_RCC_OscConfig+0x88>
 8002658:	4b86      	ldr	r3, [pc, #536]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002664:	4293      	cmp	r3, r2
 8002666:	d223      	bcs.n	80026b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fd41 	bl	80030f4 <RCC_SetFlashLatencyFromMSIRange>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e38d      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267c:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7c      	ldr	r2, [pc, #496]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b7a      	ldr	r3, [pc, #488]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4977      	ldr	r1, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269a:	4b76      	ldr	r3, [pc, #472]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	4972      	ldr	r1, [pc, #456]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	e025      	b.n	80026fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b0:	4b70      	ldr	r3, [pc, #448]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6f      	ldr	r2, [pc, #444]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	496a      	ldr	r1, [pc, #424]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ce:	4b69      	ldr	r3, [pc, #420]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4965      	ldr	r1, [pc, #404]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd01 	bl	80030f4 <RCC_SetFlashLatencyFromMSIRange>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e34d      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026fc:	f000 fc36 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b5c      	ldr	r3, [pc, #368]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	495a      	ldr	r1, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x29c>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_RCC_OscConfig+0x2a0>)
 800271a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800271c:	4b58      	ldr	r3, [pc, #352]	; (8002880 <HAL_RCC_OscConfig+0x2a4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fe9d 	bl	8001460 <HAL_InitTick>
 8002726:	4603      	mov	r3, r0
 8002728:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d052      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	e331      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800273c:	4b4d      	ldr	r3, [pc, #308]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002748:	f7fe feda 	bl	8001500 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002750:	f7fe fed6 	bl	8001500 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e31a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002762:	4b44      	ldr	r3, [pc, #272]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a40      	ldr	r2, [pc, #256]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002774:	f043 0308 	orr.w	r3, r3, #8
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	493b      	ldr	r1, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278c:	4b39      	ldr	r3, [pc, #228]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	4936      	ldr	r1, [pc, #216]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
 80027a0:	e01a      	b.n	80027d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a33      	ldr	r2, [pc, #204]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ae:	f7fe fea7 	bl	8001500 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b6:	f7fe fea3 	bl	8001500 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e2e7      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1da>
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d074      	beq.n	80028ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x21a>
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d10e      	bne.n	800280e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d064      	beq.n	80028cc <HAL_RCC_OscConfig+0x2f0>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d160      	bne.n	80028cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e2c4      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x24a>
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e01d      	b.n	8002862 <HAL_RCC_OscConfig+0x286>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x26e>
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e00b      	b.n	8002862 <HAL_RCC_OscConfig+0x286>
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a06      	ldr	r2, [pc, #24]	; (8002874 <HAL_RCC_OscConfig+0x298>)
 800285c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fe49 	bl	8001500 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002870:	e011      	b.n	8002896 <HAL_RCC_OscConfig+0x2ba>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	08005448 	.word	0x08005448
 800287c:	2000000c 	.word	0x2000000c
 8002880:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe fe3c 	bl	8001500 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e280      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	4baf      	ldr	r3, [pc, #700]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x2a8>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fe2c 	bl	8001500 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe fe28 	bl	8001500 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e26c      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	4ba5      	ldr	r3, [pc, #660]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d0>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d060      	beq.n	800299c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d005      	beq.n	80028ec <HAL_RCC_OscConfig+0x310>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d119      	bne.n	800291a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d116      	bne.n	800291a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ec:	4b99      	ldr	r3, [pc, #612]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_OscConfig+0x328>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e249      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b93      	ldr	r3, [pc, #588]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	4990      	ldr	r1, [pc, #576]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002918:	e040      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d023      	beq.n	800296a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002922:	4b8c      	ldr	r3, [pc, #560]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a8b      	ldr	r2, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fde7 	bl	8001500 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe fde3 	bl	8001500 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e227      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	497c      	ldr	r1, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a79      	ldr	r2, [pc, #484]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fdc3 	bl	8001500 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fdbf 	bl	8001500 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e203      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01c      	beq.n	80029ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	4a67      	ldr	r2, [pc, #412]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fd9e 	bl	8001500 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe fd9a 	bl	8001500 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1de      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029da:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ef      	beq.n	80029c8 <HAL_RCC_OscConfig+0x3ec>
 80029e8:	e01b      	b.n	8002a22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ea:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fd81 	bl	8001500 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe fd7d 	bl	8001500 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1c1      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80a6 	beq.w	8002b7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a34:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4c:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d118      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a68:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a3a      	ldr	r2, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a74:	f7fe fd44 	bl	8001500 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7fe fd40 	bl	8001500 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e184      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_RCC_OscConfig+0x57c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4d8>
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab2:	e024      	b.n	8002afe <HAL_RCC_OscConfig+0x522>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d110      	bne.n	8002ade <HAL_RCC_OscConfig+0x502>
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002adc:	e00f      	b.n	8002afe <HAL_RCC_OscConfig+0x522>
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fcfb 	bl	8001500 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fcf7 	bl	8001500 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e139      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x578>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ed      	beq.n	8002b0e <HAL_RCC_OscConfig+0x532>
 8002b32:	e01a      	b.n	8002b6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fce4 	bl	8001500 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fce0 	bl	8001500 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d906      	bls.n	8002b5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e122      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5c:	4b90      	ldr	r3, [pc, #576]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e8      	bne.n	8002b3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	4a8a      	ldr	r2, [pc, #552]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8108 	beq.w	8002d96 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	f040 80d0 	bne.w	8002d30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b90:	4b83      	ldr	r3, [pc, #524]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d130      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d127      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d11f      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd0:	2a07      	cmp	r2, #7
 8002bd2:	bf14      	ite	ne
 8002bd4:	2201      	movne	r2, #1
 8002bd6:	2200      	moveq	r2, #0
 8002bd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d113      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d06e      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d069      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c0c:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b7      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c28:	4b5d      	ldr	r3, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5c      	ldr	r2, [pc, #368]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c34:	f7fe fc64 	bl	8001500 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fc60 	bl	8001500 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0a4      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5a:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <HAL_RCC_OscConfig+0x7c8>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c74:	0212      	lsls	r2, r2, #8
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c7c:	0852      	lsrs	r2, r2, #1
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	0552      	lsls	r2, r2, #21
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c88:	0852      	lsrs	r2, r2, #1
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0652      	lsls	r2, r2, #25
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c94:	0912      	lsrs	r2, r2, #4
 8002c96:	0452      	lsls	r2, r2, #17
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	4941      	ldr	r1, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3e      	ldr	r2, [pc, #248]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002caa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cac:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a3b      	ldr	r2, [pc, #236]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cb8:	f7fe fc22 	bl	8001500 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe fc1e 	bl	8001500 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e062      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cde:	e05a      	b.n	8002d96 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e059      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d152      	bne.n	8002d96 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d08:	f7fe fbfa 	bl	8001500 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fbf6 	bl	8001500 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e03a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x734>
 8002d2e:	e032      	b.n	8002d96 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d02d      	beq.n	8002d92 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d54:	f023 0303 	bic.w	r3, r3, #3
 8002d58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fbc9 	bl	8001500 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fe fbc5 	bl	8001500 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e009      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x7c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x796>
 8002d90:	e001      	b.n	8002d96 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	f99d808c 	.word	0xf99d808c

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0c8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4961      	ldr	r1, [pc, #388]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b5f      	ldr	r3, [pc, #380]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0b0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d04c      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e00:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d121      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e09e      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d115      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e092      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e086      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e40:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e07e      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e50:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 0203 	bic.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	493f      	ldr	r1, [pc, #252]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e62:	f7fe fb4d 	bl	8001500 <HAL_GetTick>
 8002e66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7fe fb49 	bl	8001500 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e066      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 020c 	and.w	r2, r3, #12
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d1eb      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	492c      	ldr	r1, [pc, #176]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d210      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4924      	ldr	r1, [pc, #144]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e036      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4918      	ldr	r1, [pc, #96]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4910      	ldr	r1, [pc, #64]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f1e:	f000 f825 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_RCC_ClockConfig+0x1b4>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490c      	ldr	r1, [pc, #48]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fa8c 	bl	8001460 <HAL_InitTick>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f4c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08005448 	.word	0x08005448
 8002f64:	2000000c 	.word	0x2000000c
 8002f68:	20000010 	.word	0x20000010

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d121      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d11e      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d134      	bne.n	8003064 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0xa6>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d003      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0xac>
 8003010:	e005      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCC_GetSysClockFreq+0x110>)
 8003014:	617b      	str	r3, [r7, #20]
      break;
 8003016:	e005      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_RCC_GetSysClockFreq+0x114>)
 800301a:	617b      	str	r3, [r7, #20]
      break;
 800301c:	e002      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	617b      	str	r3, [r7, #20]
      break;
 8003022:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	3301      	adds	r3, #1
 8003030:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	fb02 f203 	mul.w	r2, r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	0e5b      	lsrs	r3, r3, #25
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	3301      	adds	r3, #1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003064:	69bb      	ldr	r3, [r7, #24]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	08005460 	.word	0x08005460
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	2000000c 	.word	0x2000000c

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08005458 	.word	0x08005458

080030c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030cc:	f7ff ffda 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	0adb      	lsrs	r3, r3, #11
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4904      	ldr	r1, [pc, #16]	; (80030f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08005458 	.word	0x08005458

080030f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800310c:	f7ff f936 	bl	800237c <HAL_PWREx_GetVoltageRange>
 8003110:	6178      	str	r0, [r7, #20]
 8003112:	e014      	b.n	800313e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311e:	6593      	str	r3, [r2, #88]	; 0x58
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800312c:	f7ff f926 	bl	800237c <HAL_PWREx_GetVoltageRange>
 8003130:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003144:	d10b      	bne.n	800315e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d919      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2ba0      	cmp	r3, #160	; 0xa0
 8003150:	d902      	bls.n	8003158 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003152:	2302      	movs	r3, #2
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e013      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003158:	2301      	movs	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	e010      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d902      	bls.n	800316a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003164:	2303      	movs	r3, #3
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e00a      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d102      	bne.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003170:	2302      	movs	r3, #2
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e004      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b70      	cmp	r3, #112	; 0x70
 800317a:	d101      	bne.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800317c:	2301      	movs	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 0207 	bic.w	r2, r3, #7
 8003188:	4909      	ldr	r1, [pc, #36]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	429a      	cmp	r2, r3
 800319c:	d001      	beq.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022000 	.word	0x40022000

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031bc:	2300      	movs	r3, #0
 80031be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c0:	2300      	movs	r3, #0
 80031c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d041      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031d8:	d02a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031de:	d824      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ea:	d81e      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f4:	d010      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031f6:	e018      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031f8:	4b86      	ldr	r3, [pc, #536]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a85      	ldr	r2, [pc, #532]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003202:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003204:	e015      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f000 facb 	bl	80037a8 <RCCEx_PLLSAI1_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003216:	e00c      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3320      	adds	r3, #32
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fbb6 	bl	8003990 <RCCEx_PLLSAI2_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003228:	e003      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	74fb      	strb	r3, [r7, #19]
      break;
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003238:	4b76      	ldr	r3, [pc, #472]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003246:	4973      	ldr	r1, [pc, #460]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d041      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003264:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003268:	d02a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800326a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800326e:	d824      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003274:	d008      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800327a:	d81e      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003284:	d010      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003286:	e018      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003288:	4b62      	ldr	r3, [pc, #392]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a61      	ldr	r2, [pc, #388]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003294:	e015      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fa83 	bl	80037a8 <RCCEx_PLLSAI1_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a6:	e00c      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3320      	adds	r3, #32
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fb6e 	bl	8003990 <RCCEx_PLLSAI2_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032b8:	e003      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	74fb      	strb	r3, [r7, #19]
      break;
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032c8:	4b52      	ldr	r3, [pc, #328]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d6:	494f      	ldr	r1, [pc, #316]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032de:	e001      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a0 	beq.w	8003432 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330c:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	4a40      	ldr	r2, [pc, #256]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003316:	6593      	str	r3, [r2, #88]	; 0x58
 8003318:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003324:	2301      	movs	r3, #1
 8003326:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003328:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003334:	f7fe f8e4 	bl	8001500 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800333a:	e009      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333c:	f7fe f8e0 	bl	8001500 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d902      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	74fb      	strb	r3, [r7, #19]
        break;
 800334e:	e005      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003350:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d15c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01f      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	429a      	cmp	r2, r3
 800337e:	d019      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	4a20      	ldr	r2, [pc, #128]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800339c:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe f89f 	bl	8001500 <HAL_GetTick>
 80033c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c4:	e00b      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe f89b 	bl	8001500 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d902      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	74fb      	strb	r3, [r7, #19]
            break;
 80033dc:	e006      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ec      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003402:	4904      	ldr	r1, [pc, #16]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800340a:	e009      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	74bb      	strb	r3, [r7, #18]
 8003410:	e006      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003420:	7c7b      	ldrb	r3, [r7, #17]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b9e      	ldr	r3, [pc, #632]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a9d      	ldr	r2, [pc, #628]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343e:	4b98      	ldr	r3, [pc, #608]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f023 0203 	bic.w	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	4994      	ldr	r1, [pc, #592]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003460:	4b8f      	ldr	r3, [pc, #572]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f023 020c 	bic.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	498c      	ldr	r1, [pc, #560]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003482:	4b87      	ldr	r3, [pc, #540]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	4983      	ldr	r1, [pc, #524]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034a4:	4b7e      	ldr	r3, [pc, #504]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	497b      	ldr	r1, [pc, #492]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d4:	4972      	ldr	r1, [pc, #456]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034e8:	4b6d      	ldr	r3, [pc, #436]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	496a      	ldr	r1, [pc, #424]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800350a:	4b65      	ldr	r3, [pc, #404]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	4961      	ldr	r1, [pc, #388]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800352c:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353a:	4959      	ldr	r1, [pc, #356]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354e:	4b54      	ldr	r3, [pc, #336]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	4950      	ldr	r1, [pc, #320]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003570:	4b4b      	ldr	r3, [pc, #300]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	4948      	ldr	r1, [pc, #288]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003592:	4b43      	ldr	r3, [pc, #268]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	493f      	ldr	r1, [pc, #252]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d028      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b4:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	4937      	ldr	r1, [pc, #220]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d2:	d106      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035de:	60d3      	str	r3, [r2, #12]
 80035e0:	e011      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ea:	d10c      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f8d8 	bl	80037a8 <RCCEx_PLLSAI1_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	491f      	ldr	r1, [pc, #124]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003630:	d106      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003632:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363c:	60d3      	str	r3, [r2, #12]
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f8a9 	bl	80037a8 <RCCEx_PLLSAI1_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02b      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4908      	ldr	r1, [pc, #32]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368e:	d109      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a02      	ldr	r2, [pc, #8]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369a:	60d3      	str	r3, [r2, #12]
 800369c:	e014      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2101      	movs	r1, #1
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f877 	bl	80037a8 <RCCEx_PLLSAI1_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e2:	4928      	ldr	r1, [pc, #160]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f2:	d10d      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	2102      	movs	r1, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f854 	bl	80037a8 <RCCEx_PLLSAI1_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d014      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	74bb      	strb	r3, [r7, #18]
 800370e:	e011      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003718:	d10c      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3320      	adds	r3, #32
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f935 	bl	8003990 <RCCEx_PLLSAI2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374e:	490d      	ldr	r1, [pc, #52]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003772:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800377a:	7cbb      	ldrb	r3, [r7, #18]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000

080037a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037b6:	4b75      	ldr	r3, [pc, #468]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d018      	beq.n	80037f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037c2:	4b72      	ldr	r3, [pc, #456]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0203 	and.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d10d      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
       ||
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037da:	4b6c      	ldr	r3, [pc, #432]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
       ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d047      	beq.n	800387e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
 80037f2:	e044      	b.n	800387e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d018      	beq.n	800382e <RCCEx_PLLSAI1_Config+0x86>
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d825      	bhi.n	800384c <RCCEx_PLLSAI1_Config+0xa4>
 8003800:	2b01      	cmp	r3, #1
 8003802:	d002      	beq.n	800380a <RCCEx_PLLSAI1_Config+0x62>
 8003804:	2b02      	cmp	r3, #2
 8003806:	d009      	beq.n	800381c <RCCEx_PLLSAI1_Config+0x74>
 8003808:	e020      	b.n	800384c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800380a:	4b60      	ldr	r3, [pc, #384]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11d      	bne.n	8003852 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381a:	e01a      	b.n	8003852 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800381c:	4b5b      	ldr	r3, [pc, #364]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d116      	bne.n	8003856 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382c:	e013      	b.n	8003856 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10f      	bne.n	800385a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800383a:	4b54      	ldr	r3, [pc, #336]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800384a:	e006      	b.n	800385a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      break;
 8003850:	e004      	b.n	800385c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003852:	bf00      	nop
 8003854:	e002      	b.n	800385c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385a:	bf00      	nop
    }

    if(status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10d      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6819      	ldr	r1, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	430b      	orrs	r3, r1
 8003878:	4944      	ldr	r1, [pc, #272]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d17d      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003884:	4b41      	ldr	r3, [pc, #260]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a40      	ldr	r2, [pc, #256]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800388e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fd fe36 	bl	8001500 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003896:	e009      	b.n	80038ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003898:	f7fd fe32 	bl	8001500 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d902      	bls.n	80038ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	73fb      	strb	r3, [r7, #15]
        break;
 80038aa:	e005      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ef      	bne.n	8003898 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d160      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d111      	bne.n	80038e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c4:	4b31      	ldr	r3, [pc, #196]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6892      	ldr	r2, [r2, #8]
 80038d4:	0211      	lsls	r1, r2, #8
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	0912      	lsrs	r2, r2, #4
 80038dc:	0452      	lsls	r2, r2, #17
 80038de:	430a      	orrs	r2, r1
 80038e0:	492a      	ldr	r1, [pc, #168]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	610b      	str	r3, [r1, #16]
 80038e6:	e027      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d112      	bne.n	8003914 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ee:	4b27      	ldr	r3, [pc, #156]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6892      	ldr	r2, [r2, #8]
 80038fe:	0211      	lsls	r1, r2, #8
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6912      	ldr	r2, [r2, #16]
 8003904:	0852      	lsrs	r2, r2, #1
 8003906:	3a01      	subs	r2, #1
 8003908:	0552      	lsls	r2, r2, #21
 800390a:	430a      	orrs	r2, r1
 800390c:	491f      	ldr	r1, [pc, #124]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	610b      	str	r3, [r1, #16]
 8003912:	e011      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003914:	4b1d      	ldr	r3, [pc, #116]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800391c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6892      	ldr	r2, [r2, #8]
 8003924:	0211      	lsls	r1, r2, #8
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6952      	ldr	r2, [r2, #20]
 800392a:	0852      	lsrs	r2, r2, #1
 800392c:	3a01      	subs	r2, #1
 800392e:	0652      	lsls	r2, r2, #25
 8003930:	430a      	orrs	r2, r1
 8003932:	4916      	ldr	r1, [pc, #88]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a13      	ldr	r2, [pc, #76]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800393e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003942:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd fddc 	bl	8001500 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800394a:	e009      	b.n	8003960 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800394c:	f7fd fdd8 	bl	8001500 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	73fb      	strb	r3, [r7, #15]
          break;
 800395e:	e005      	b.n	800396c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	4904      	ldr	r1, [pc, #16]	; (800398c <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000

08003990 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800399e:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039aa:	4b67      	ldr	r3, [pc, #412]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0203 	and.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
       ||
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039c2:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
       ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d047      	beq.n	8003a66 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	e044      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d018      	beq.n	8003a16 <RCCEx_PLLSAI2_Config+0x86>
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d825      	bhi.n	8003a34 <RCCEx_PLLSAI2_Config+0xa4>
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d002      	beq.n	80039f2 <RCCEx_PLLSAI2_Config+0x62>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d009      	beq.n	8003a04 <RCCEx_PLLSAI2_Config+0x74>
 80039f0:	e020      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039f2:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11d      	bne.n	8003a3a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a02:	e01a      	b.n	8003a3a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a04:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e013      	b.n	8003a3e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a16:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a22:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a32:	e006      	b.n	8003a42 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e004      	b.n	8003a44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a42:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	4939      	ldr	r1, [pc, #228]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d167      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a35      	ldr	r2, [pc, #212]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd fd42 	bl	8001500 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a7e:	e009      	b.n	8003a94 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a80:	f7fd fd3e 	bl	8001500 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d902      	bls.n	8003a94 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	73fb      	strb	r3, [r7, #15]
        break;
 8003a92:	e005      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ef      	bne.n	8003a80 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d14a      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d111      	bne.n	8003ad0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	0211      	lsls	r1, r2, #8
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	0912      	lsrs	r2, r2, #4
 8003ac4:	0452      	lsls	r2, r2, #17
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	491f      	ldr	r1, [pc, #124]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	614b      	str	r3, [r1, #20]
 8003ace:	e011      	b.n	8003af4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ad8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6892      	ldr	r2, [r2, #8]
 8003ae0:	0211      	lsls	r1, r2, #8
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6912      	ldr	r2, [r2, #16]
 8003ae6:	0852      	lsrs	r2, r2, #1
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	0652      	lsls	r2, r2, #25
 8003aec:	430a      	orrs	r2, r1
 8003aee:	4916      	ldr	r1, [pc, #88]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003af4:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd fcfe 	bl	8001500 <HAL_GetTick>
 8003b04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b06:	e009      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b08:	f7fd fcfa 	bl	8001500 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	73fb      	strb	r3, [r7, #15]
          break;
 8003b1a:	e005      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ef      	beq.n	8003b08 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4904      	ldr	r1, [pc, #16]	; (8003b48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000

08003b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e095      	b.n	8003c8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d108      	bne.n	8003b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6e:	d009      	beq.n	8003b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
 8003b76:	e005      	b.n	8003b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fd fa4e 	bl	8001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc4:	d902      	bls.n	8003bcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e002      	b.n	8003bd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bda:	d007      	beq.n	8003bec <HAL_SPI_Init+0xa0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003be4:	d002      	beq.n	8003bec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	ea42 0103 	orr.w	r1, r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	f003 0204 	and.w	r2, r3, #4
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c68:	ea42 0103 	orr.w	r1, r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e040      	b.n	8003d26 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fd fa07 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2224      	movs	r2, #36	; 0x24
 8003cbe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fae5 	bl	80042a0 <UART_SetConfig>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e022      	b.n	8003d26 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fd63 	bl	80047b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0201 	orr.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fdea 	bl	80048f8 <UART_CheckIdleState>
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d145      	bne.n	8003dd2 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_Transmit_IT+0x22>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e03e      	b.n	8003dd4 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit_IT+0x34>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e037      	b.n	8003dd4 <HAL_UART_Transmit_IT+0xa4>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2221      	movs	r2, #33	; 0x21
 8003d94:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d107      	bne.n	8003db0 <HAL_UART_Transmit_IT+0x80>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <HAL_UART_Transmit_IT+0xb0>)
 8003dac:	669a      	str	r2, [r3, #104]	; 0x68
 8003dae:	e002      	b.n	8003db6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <HAL_UART_Transmit_IT+0xb4>)
 8003db4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dcc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	08004c93 	.word	0x08004c93
 8003de4:	08004c1f 	.word	0x08004c1f

08003de8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d131      	bne.n	8003e62 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_UART_Receive_IT+0x22>
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02a      	b.n	8003e64 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_UART_Receive_IT+0x34>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e023      	b.n	8003e64 <HAL_UART_Receive_IT+0x7c>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a0f      	ldr	r2, [pc, #60]	; (8003e6c <HAL_UART_Receive_IT+0x84>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e50:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fe13 	bl	8004a84 <UART_Start_Receive_IT>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	e000      	b.n	8003e64 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40008000 	.word	0x40008000

08003e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d113      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 81ce 	beq.w	800425a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
      }
      return;
 8003ec6:	e1c8      	b.n	800425a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80e3 	beq.w	8004096 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4ba6      	ldr	r3, [pc, #664]	; (8004178 <HAL_UART_IRQHandler+0x308>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80d8 	beq.w	8004096 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d010      	beq.n	8003f12 <HAL_UART_IRQHandler+0xa2>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <HAL_UART_IRQHandler+0xce>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f34:	f043 0204 	orr.w	r2, r3, #4
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_UART_IRQHandler+0xfa>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2204      	movs	r2, #4
 8003f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f60:	f043 0202 	orr.w	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d104      	bne.n	8003f88 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f96:	f043 0208 	orr.w	r2, r3, #8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <HAL_UART_IRQHandler+0x15e>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8142 	beq.w	800425e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00c      	beq.n	8003ffe <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004004:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d004      	beq.n	800401e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800401a:	2b00      	cmp	r3, #0
 800401c:	d031      	beq.n	8004082 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fdb8 	bl	8004b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d123      	bne.n	800407a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	2b00      	cmp	r3, #0
 8004048:	d013      	beq.n	8004072 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a4b      	ldr	r2, [pc, #300]	; (800417c <HAL_UART_IRQHandler+0x30c>)
 8004050:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd fcde 	bl	8001a18 <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800406c:	4610      	mov	r0, r2
 800406e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e00f      	b.n	8004092 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8fe 	bl	8004274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	e00b      	b.n	8004092 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8fa 	bl	8004274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	e007      	b.n	8004092 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8f6 	bl	8004274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004090:	e0e5      	b.n	800425e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004092:	bf00      	nop
    return;
 8004094:	e0e3      	b.n	800425e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409a:	2b01      	cmp	r3, #1
 800409c:	f040 80a9 	bne.w	80041f2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a3 	beq.w	80041f2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 809d 	beq.w	80041f2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2210      	movs	r2, #16
 80040be:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d158      	bne.n	8004180 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80040d8:	893b      	ldrh	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80c1 	beq.w	8004262 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040e6:	893a      	ldrh	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	f080 80ba 	bcs.w	8004262 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	893a      	ldrh	r2, [r7, #8]
 80040f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d12a      	bne.n	800415c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004134:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0210 	bic.w	r2, r2, #16
 8004150:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd fc20 	bl	800199c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004168:	b29b      	uxth	r3, r3
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	b29b      	uxth	r3, r3
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f889 	bl	8004288 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004176:	e074      	b.n	8004262 <HAL_UART_IRQHandler+0x3f2>
 8004178:	04000120 	.word	0x04000120
 800417c:	08004bf3 	.word	0x08004bf3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800418c:	b29b      	uxth	r3, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d060      	beq.n	8004266 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041b2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0210 	bic.w	r2, r2, #16
 80041e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f84c 	bl	8004288 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041f0:	e039      	b.n	8004266 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <HAL_UART_IRQHandler+0x3a8>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800420e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fe6d 	bl	8004ef0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004216:	e029      	b.n	800426c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01a      	beq.n	800426a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
    }
    return;
 800423c:	e015      	b.n	800426a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d011      	beq.n	800426c <HAL_UART_IRQHandler+0x3fc>
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00c      	beq.n	800426c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fd5b 	bl	8004d0e <UART_EndTransmit_IT>
    return;
 8004258:	e008      	b.n	800426c <HAL_UART_IRQHandler+0x3fc>
      return;
 800425a:	bf00      	nop
 800425c:	e006      	b.n	800426c <HAL_UART_IRQHandler+0x3fc>
    return;
 800425e:	bf00      	nop
 8004260:	e004      	b.n	800426c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HAL_UART_IRQHandler+0x3fc>
    return;
 800426a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop

08004274 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a0:	b5b0      	push	{r4, r5, r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4bad      	ldr	r3, [pc, #692]	; (8004580 <UART_SetConfig+0x2e0>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	69f9      	ldr	r1, [r7, #28]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4aa2      	ldr	r2, [pc, #648]	; (8004584 <UART_SetConfig+0x2e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	4313      	orrs	r3, r2
 8004306:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	430a      	orrs	r2, r1
 800431a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a99      	ldr	r2, [pc, #612]	; (8004588 <UART_SetConfig+0x2e8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d121      	bne.n	800436a <UART_SetConfig+0xca>
 8004326:	4b99      	ldr	r3, [pc, #612]	; (800458c <UART_SetConfig+0x2ec>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d817      	bhi.n	8004364 <UART_SetConfig+0xc4>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x9c>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800434d 	.word	0x0800434d
 8004340:	08004359 	.word	0x08004359
 8004344:	08004353 	.word	0x08004353
 8004348:	0800435f 	.word	0x0800435f
 800434c:	2301      	movs	r3, #1
 800434e:	76fb      	strb	r3, [r7, #27]
 8004350:	e0e7      	b.n	8004522 <UART_SetConfig+0x282>
 8004352:	2302      	movs	r3, #2
 8004354:	76fb      	strb	r3, [r7, #27]
 8004356:	e0e4      	b.n	8004522 <UART_SetConfig+0x282>
 8004358:	2304      	movs	r3, #4
 800435a:	76fb      	strb	r3, [r7, #27]
 800435c:	e0e1      	b.n	8004522 <UART_SetConfig+0x282>
 800435e:	2308      	movs	r3, #8
 8004360:	76fb      	strb	r3, [r7, #27]
 8004362:	e0de      	b.n	8004522 <UART_SetConfig+0x282>
 8004364:	2310      	movs	r3, #16
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	e0db      	b.n	8004522 <UART_SetConfig+0x282>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a88      	ldr	r2, [pc, #544]	; (8004590 <UART_SetConfig+0x2f0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d132      	bne.n	80043da <UART_SetConfig+0x13a>
 8004374:	4b85      	ldr	r3, [pc, #532]	; (800458c <UART_SetConfig+0x2ec>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d828      	bhi.n	80043d4 <UART_SetConfig+0x134>
 8004382:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0xe8>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	080043bd 	.word	0x080043bd
 800438c:	080043d5 	.word	0x080043d5
 8004390:	080043d5 	.word	0x080043d5
 8004394:	080043d5 	.word	0x080043d5
 8004398:	080043c9 	.word	0x080043c9
 800439c:	080043d5 	.word	0x080043d5
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	080043d5 	.word	0x080043d5
 80043a8:	080043c3 	.word	0x080043c3
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043d5 	.word	0x080043d5
 80043b8:	080043cf 	.word	0x080043cf
 80043bc:	2300      	movs	r3, #0
 80043be:	76fb      	strb	r3, [r7, #27]
 80043c0:	e0af      	b.n	8004522 <UART_SetConfig+0x282>
 80043c2:	2302      	movs	r3, #2
 80043c4:	76fb      	strb	r3, [r7, #27]
 80043c6:	e0ac      	b.n	8004522 <UART_SetConfig+0x282>
 80043c8:	2304      	movs	r3, #4
 80043ca:	76fb      	strb	r3, [r7, #27]
 80043cc:	e0a9      	b.n	8004522 <UART_SetConfig+0x282>
 80043ce:	2308      	movs	r3, #8
 80043d0:	76fb      	strb	r3, [r7, #27]
 80043d2:	e0a6      	b.n	8004522 <UART_SetConfig+0x282>
 80043d4:	2310      	movs	r3, #16
 80043d6:	76fb      	strb	r3, [r7, #27]
 80043d8:	e0a3      	b.n	8004522 <UART_SetConfig+0x282>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6d      	ldr	r2, [pc, #436]	; (8004594 <UART_SetConfig+0x2f4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d120      	bne.n	8004426 <UART_SetConfig+0x186>
 80043e4:	4b69      	ldr	r3, [pc, #420]	; (800458c <UART_SetConfig+0x2ec>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043ee:	2b30      	cmp	r3, #48	; 0x30
 80043f0:	d013      	beq.n	800441a <UART_SetConfig+0x17a>
 80043f2:	2b30      	cmp	r3, #48	; 0x30
 80043f4:	d814      	bhi.n	8004420 <UART_SetConfig+0x180>
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d009      	beq.n	800440e <UART_SetConfig+0x16e>
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d810      	bhi.n	8004420 <UART_SetConfig+0x180>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <UART_SetConfig+0x168>
 8004402:	2b10      	cmp	r3, #16
 8004404:	d006      	beq.n	8004414 <UART_SetConfig+0x174>
 8004406:	e00b      	b.n	8004420 <UART_SetConfig+0x180>
 8004408:	2300      	movs	r3, #0
 800440a:	76fb      	strb	r3, [r7, #27]
 800440c:	e089      	b.n	8004522 <UART_SetConfig+0x282>
 800440e:	2302      	movs	r3, #2
 8004410:	76fb      	strb	r3, [r7, #27]
 8004412:	e086      	b.n	8004522 <UART_SetConfig+0x282>
 8004414:	2304      	movs	r3, #4
 8004416:	76fb      	strb	r3, [r7, #27]
 8004418:	e083      	b.n	8004522 <UART_SetConfig+0x282>
 800441a:	2308      	movs	r3, #8
 800441c:	76fb      	strb	r3, [r7, #27]
 800441e:	e080      	b.n	8004522 <UART_SetConfig+0x282>
 8004420:	2310      	movs	r3, #16
 8004422:	76fb      	strb	r3, [r7, #27]
 8004424:	e07d      	b.n	8004522 <UART_SetConfig+0x282>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5b      	ldr	r2, [pc, #364]	; (8004598 <UART_SetConfig+0x2f8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d120      	bne.n	8004472 <UART_SetConfig+0x1d2>
 8004430:	4b56      	ldr	r3, [pc, #344]	; (800458c <UART_SetConfig+0x2ec>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800443a:	2bc0      	cmp	r3, #192	; 0xc0
 800443c:	d013      	beq.n	8004466 <UART_SetConfig+0x1c6>
 800443e:	2bc0      	cmp	r3, #192	; 0xc0
 8004440:	d814      	bhi.n	800446c <UART_SetConfig+0x1cc>
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d009      	beq.n	800445a <UART_SetConfig+0x1ba>
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d810      	bhi.n	800446c <UART_SetConfig+0x1cc>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <UART_SetConfig+0x1b4>
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d006      	beq.n	8004460 <UART_SetConfig+0x1c0>
 8004452:	e00b      	b.n	800446c <UART_SetConfig+0x1cc>
 8004454:	2300      	movs	r3, #0
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	e063      	b.n	8004522 <UART_SetConfig+0x282>
 800445a:	2302      	movs	r3, #2
 800445c:	76fb      	strb	r3, [r7, #27]
 800445e:	e060      	b.n	8004522 <UART_SetConfig+0x282>
 8004460:	2304      	movs	r3, #4
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	e05d      	b.n	8004522 <UART_SetConfig+0x282>
 8004466:	2308      	movs	r3, #8
 8004468:	76fb      	strb	r3, [r7, #27]
 800446a:	e05a      	b.n	8004522 <UART_SetConfig+0x282>
 800446c:	2310      	movs	r3, #16
 800446e:	76fb      	strb	r3, [r7, #27]
 8004470:	e057      	b.n	8004522 <UART_SetConfig+0x282>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a49      	ldr	r2, [pc, #292]	; (800459c <UART_SetConfig+0x2fc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d125      	bne.n	80044c8 <UART_SetConfig+0x228>
 800447c:	4b43      	ldr	r3, [pc, #268]	; (800458c <UART_SetConfig+0x2ec>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448a:	d017      	beq.n	80044bc <UART_SetConfig+0x21c>
 800448c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004490:	d817      	bhi.n	80044c2 <UART_SetConfig+0x222>
 8004492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004496:	d00b      	beq.n	80044b0 <UART_SetConfig+0x210>
 8004498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800449c:	d811      	bhi.n	80044c2 <UART_SetConfig+0x222>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <UART_SetConfig+0x20a>
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	d006      	beq.n	80044b6 <UART_SetConfig+0x216>
 80044a8:	e00b      	b.n	80044c2 <UART_SetConfig+0x222>
 80044aa:	2300      	movs	r3, #0
 80044ac:	76fb      	strb	r3, [r7, #27]
 80044ae:	e038      	b.n	8004522 <UART_SetConfig+0x282>
 80044b0:	2302      	movs	r3, #2
 80044b2:	76fb      	strb	r3, [r7, #27]
 80044b4:	e035      	b.n	8004522 <UART_SetConfig+0x282>
 80044b6:	2304      	movs	r3, #4
 80044b8:	76fb      	strb	r3, [r7, #27]
 80044ba:	e032      	b.n	8004522 <UART_SetConfig+0x282>
 80044bc:	2308      	movs	r3, #8
 80044be:	76fb      	strb	r3, [r7, #27]
 80044c0:	e02f      	b.n	8004522 <UART_SetConfig+0x282>
 80044c2:	2310      	movs	r3, #16
 80044c4:	76fb      	strb	r3, [r7, #27]
 80044c6:	e02c      	b.n	8004522 <UART_SetConfig+0x282>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <UART_SetConfig+0x2e4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d125      	bne.n	800451e <UART_SetConfig+0x27e>
 80044d2:	4b2e      	ldr	r3, [pc, #184]	; (800458c <UART_SetConfig+0x2ec>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e0:	d017      	beq.n	8004512 <UART_SetConfig+0x272>
 80044e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044e6:	d817      	bhi.n	8004518 <UART_SetConfig+0x278>
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ec:	d00b      	beq.n	8004506 <UART_SetConfig+0x266>
 80044ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f2:	d811      	bhi.n	8004518 <UART_SetConfig+0x278>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <UART_SetConfig+0x260>
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fc:	d006      	beq.n	800450c <UART_SetConfig+0x26c>
 80044fe:	e00b      	b.n	8004518 <UART_SetConfig+0x278>
 8004500:	2300      	movs	r3, #0
 8004502:	76fb      	strb	r3, [r7, #27]
 8004504:	e00d      	b.n	8004522 <UART_SetConfig+0x282>
 8004506:	2302      	movs	r3, #2
 8004508:	76fb      	strb	r3, [r7, #27]
 800450a:	e00a      	b.n	8004522 <UART_SetConfig+0x282>
 800450c:	2304      	movs	r3, #4
 800450e:	76fb      	strb	r3, [r7, #27]
 8004510:	e007      	b.n	8004522 <UART_SetConfig+0x282>
 8004512:	2308      	movs	r3, #8
 8004514:	76fb      	strb	r3, [r7, #27]
 8004516:	e004      	b.n	8004522 <UART_SetConfig+0x282>
 8004518:	2310      	movs	r3, #16
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e001      	b.n	8004522 <UART_SetConfig+0x282>
 800451e:	2310      	movs	r3, #16
 8004520:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a17      	ldr	r2, [pc, #92]	; (8004584 <UART_SetConfig+0x2e4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	f040 8087 	bne.w	800463c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800452e:	7efb      	ldrb	r3, [r7, #27]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d837      	bhi.n	80045a4 <UART_SetConfig+0x304>
 8004534:	a201      	add	r2, pc, #4	; (adr r2, 800453c <UART_SetConfig+0x29c>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004561 	.word	0x08004561
 8004540:	080045a5 	.word	0x080045a5
 8004544:	08004569 	.word	0x08004569
 8004548:	080045a5 	.word	0x080045a5
 800454c:	0800456f 	.word	0x0800456f
 8004550:	080045a5 	.word	0x080045a5
 8004554:	080045a5 	.word	0x080045a5
 8004558:	080045a5 	.word	0x080045a5
 800455c:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004560:	f7fe fd9c 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004564:	6178      	str	r0, [r7, #20]
        break;
 8004566:	e022      	b.n	80045ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <UART_SetConfig+0x300>)
 800456a:	617b      	str	r3, [r7, #20]
        break;
 800456c:	e01f      	b.n	80045ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fe fcfd 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8004572:	6178      	str	r0, [r7, #20]
        break;
 8004574:	e01b      	b.n	80045ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	617b      	str	r3, [r7, #20]
        break;
 800457c:	e017      	b.n	80045ae <UART_SetConfig+0x30e>
 800457e:	bf00      	nop
 8004580:	efff69f3 	.word	0xefff69f3
 8004584:	40008000 	.word	0x40008000
 8004588:	40013800 	.word	0x40013800
 800458c:	40021000 	.word	0x40021000
 8004590:	40004400 	.word	0x40004400
 8004594:	40004800 	.word	0x40004800
 8004598:	40004c00 	.word	0x40004c00
 800459c:	40005000 	.word	0x40005000
 80045a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	76bb      	strb	r3, [r7, #26]
        break;
 80045ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80f1 	beq.w	8004798 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d305      	bcc.n	80045d2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d902      	bls.n	80045d8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	76bb      	strb	r3, [r7, #26]
 80045d6:	e0df      	b.n	8004798 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4618      	mov	r0, r3
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	020b      	lsls	r3, r1, #8
 80045ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045ee:	0202      	lsls	r2, r0, #8
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	6849      	ldr	r1, [r1, #4]
 80045f4:	0849      	lsrs	r1, r1, #1
 80045f6:	4608      	mov	r0, r1
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	1814      	adds	r4, r2, r0
 80045fe:	eb43 0501 	adc.w	r5, r3, r1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	4620      	mov	r0, r4
 800460e:	4629      	mov	r1, r5
 8004610:	f7fb fdda 	bl	80001c8 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4613      	mov	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004622:	d308      	bcc.n	8004636 <UART_SetConfig+0x396>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462a:	d204      	bcs.n	8004636 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	60da      	str	r2, [r3, #12]
 8004634:	e0b0      	b.n	8004798 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	76bb      	strb	r3, [r7, #26]
 800463a:	e0ad      	b.n	8004798 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	d15c      	bne.n	8004700 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004646:	7efb      	ldrb	r3, [r7, #27]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d828      	bhi.n	800469e <UART_SetConfig+0x3fe>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <UART_SetConfig+0x3b4>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004679 	.word	0x08004679
 8004658:	08004681 	.word	0x08004681
 800465c:	08004689 	.word	0x08004689
 8004660:	0800469f 	.word	0x0800469f
 8004664:	0800468f 	.word	0x0800468f
 8004668:	0800469f 	.word	0x0800469f
 800466c:	0800469f 	.word	0x0800469f
 8004670:	0800469f 	.word	0x0800469f
 8004674:	08004697 	.word	0x08004697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fe fd10 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 800467c:	6178      	str	r0, [r7, #20]
        break;
 800467e:	e013      	b.n	80046a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004680:	f7fe fd22 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 8004684:	6178      	str	r0, [r7, #20]
        break;
 8004686:	e00f      	b.n	80046a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004688:	4b49      	ldr	r3, [pc, #292]	; (80047b0 <UART_SetConfig+0x510>)
 800468a:	617b      	str	r3, [r7, #20]
        break;
 800468c:	e00c      	b.n	80046a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468e:	f7fe fc6d 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8004692:	6178      	str	r0, [r7, #20]
        break;
 8004694:	e008      	b.n	80046a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469a:	617b      	str	r3, [r7, #20]
        break;
 800469c:	e004      	b.n	80046a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	76bb      	strb	r3, [r7, #26]
        break;
 80046a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d074      	beq.n	8004798 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005a      	lsls	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b0f      	cmp	r3, #15
 80046ca:	d916      	bls.n	80046fa <UART_SetConfig+0x45a>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d2:	d212      	bcs.n	80046fa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f023 030f 	bic.w	r3, r3, #15
 80046dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	89fa      	ldrh	r2, [r7, #14]
 80046f6:	60da      	str	r2, [r3, #12]
 80046f8:	e04e      	b.n	8004798 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	76bb      	strb	r3, [r7, #26]
 80046fe:	e04b      	b.n	8004798 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004700:	7efb      	ldrb	r3, [r7, #27]
 8004702:	2b08      	cmp	r3, #8
 8004704:	d827      	bhi.n	8004756 <UART_SetConfig+0x4b6>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x46c>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	08004757 	.word	0x08004757
 800471c:	08004747 	.word	0x08004747
 8004720:	08004757 	.word	0x08004757
 8004724:	08004757 	.word	0x08004757
 8004728:	08004757 	.word	0x08004757
 800472c:	0800474f 	.word	0x0800474f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fcb4 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004734:	6178      	str	r0, [r7, #20]
        break;
 8004736:	e013      	b.n	8004760 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7fe fcc6 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 800473c:	6178      	str	r0, [r7, #20]
        break;
 800473e:	e00f      	b.n	8004760 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <UART_SetConfig+0x510>)
 8004742:	617b      	str	r3, [r7, #20]
        break;
 8004744:	e00c      	b.n	8004760 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7fe fc11 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 800474a:	6178      	str	r0, [r7, #20]
        break;
 800474c:	e008      	b.n	8004760 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	617b      	str	r3, [r7, #20]
        break;
 8004754:	e004      	b.n	8004760 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	76bb      	strb	r3, [r7, #26]
        break;
 800475e:	bf00      	nop
    }

    if (pclk != 0U)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d018      	beq.n	8004798 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	085a      	lsrs	r2, r3, #1
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	441a      	add	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	b29b      	uxth	r3, r3
 800477a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0f      	cmp	r3, #15
 8004780:	d908      	bls.n	8004794 <UART_SetConfig+0x4f4>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d204      	bcs.n	8004794 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e001      	b.n	8004798 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}
 80047ae:	bf00      	nop
 80047b0:	00f42400 	.word	0x00f42400

080047b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01a      	beq.n	80048ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b2:	d10a      	bne.n	80048ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004908:	f7fc fdfa 	bl	8001500 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b08      	cmp	r3, #8
 800491a:	d10e      	bne.n	800493a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800491c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f82d 	bl	800498a <UART_WaitOnFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e023      	b.n	8004982 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d10e      	bne.n	8004966 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f817 	bl	800498a <UART_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e00d      	b.n	8004982 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	e05e      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a2:	d05a      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a4:	f7fc fdac 	bl	8001500 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <UART_WaitOnFlagUntilTimeout+0x30>
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11b      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e043      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02c      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0e:	d124      	bne.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a18:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e00f      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d091      	beq.n	800499c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d10e      	bne.n	8004ad6 <UART_Start_Receive_IT+0x52>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <UART_Start_Receive_IT+0x48>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aca:	e02d      	b.n	8004b28 <UART_Start_Receive_IT+0xa4>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	22ff      	movs	r2, #255	; 0xff
 8004ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ad4:	e028      	b.n	8004b28 <UART_Start_Receive_IT+0xa4>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10d      	bne.n	8004afa <UART_Start_Receive_IT+0x76>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <UART_Start_Receive_IT+0x6c>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	22ff      	movs	r2, #255	; 0xff
 8004aea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aee:	e01b      	b.n	8004b28 <UART_Start_Receive_IT+0xa4>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	227f      	movs	r2, #127	; 0x7f
 8004af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004af8:	e016      	b.n	8004b28 <UART_Start_Receive_IT+0xa4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b02:	d10d      	bne.n	8004b20 <UART_Start_Receive_IT+0x9c>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <UART_Start_Receive_IT+0x92>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	227f      	movs	r2, #127	; 0x7f
 8004b10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b14:	e008      	b.n	8004b28 <UART_Start_Receive_IT+0xa4>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	223f      	movs	r2, #63	; 0x3f
 8004b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b1e:	e003      	b.n	8004b28 <UART_Start_Receive_IT+0xa4>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2222      	movs	r2, #34	; 0x22
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4e:	d107      	bne.n	8004b60 <UART_Start_Receive_IT+0xdc>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <UART_Start_Receive_IT+0x108>)
 8004b5c:	665a      	str	r2, [r3, #100]	; 0x64
 8004b5e:	e002      	b.n	8004b66 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <UART_Start_Receive_IT+0x10c>)
 8004b64:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004b7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	08004e19 	.word	0x08004e19
 8004b90:	08004d41 	.word	0x08004d41

08004b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004baa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0210 	bic.w	r2, r2, #16
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff fb2f 	bl	8004274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2a:	2b21      	cmp	r3, #33	; 0x21
 8004c2c:	d12b      	bne.n	8004c86 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d110      	bne.n	8004c5c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c58:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004c5a:	e014      	b.n	8004c86 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	b292      	uxth	r2, r2
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c9e:	2b21      	cmp	r3, #33	; 0x21
 8004ca0:	d12f      	bne.n	8004d02 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d110      	bne.n	8004cd0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ccc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004cce:	e018      	b.n	8004d02 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d24:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fb fc78 	bl	8000628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d4e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d54:	2b22      	cmp	r3, #34	; 0x22
 8004d56:	d151      	bne.n	8004dfc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d5e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d60:	89bb      	ldrh	r3, [r7, #12]
 8004d62:	b2d9      	uxtb	r1, r3
 8004d64:	89fb      	ldrh	r3, [r7, #14]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d13a      	bne.n	8004e10 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004da8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10f      	bne.n	8004dee <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0210 	bic.w	r2, r2, #16
 8004ddc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fa4e 	bl	8004288 <HAL_UARTEx_RxEventCallback>
 8004dec:	e002      	b.n	8004df4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fb fc2a 	bl	8000648 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dfa:	e009      	b.n	8004e10 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	8b1b      	ldrh	r3, [r3, #24]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0208 	orr.w	r2, r2, #8
 8004e0c:	b292      	uxth	r2, r2
 8004e0e:	831a      	strh	r2, [r3, #24]
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e2c:	2b22      	cmp	r3, #34	; 0x22
 8004e2e:	d151      	bne.n	8004ed4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e3e:	89ba      	ldrh	r2, [r7, #12]
 8004e40:	89fb      	ldrh	r3, [r7, #14]
 8004e42:	4013      	ands	r3, r2
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	1c9a      	adds	r2, r3, #2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d13a      	bne.n	8004ee8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e80:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10f      	bne.n	8004ec6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0210 	bic.w	r2, r2, #16
 8004eb4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff f9e2 	bl	8004288 <HAL_UARTEx_RxEventCallback>
 8004ec4:	e002      	b.n	8004ecc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fbbe 	bl	8000648 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ed2:	e009      	b.n	8004ee8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	8b1b      	ldrh	r3, [r3, #24]
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0208 	orr.w	r2, r2, #8
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	831a      	strh	r2, [r3, #24]
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f04:	b084      	sub	sp, #16
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	f107 001c 	add.w	r0, r7, #28
 8004f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa24 	bl	8005370 <USB_CoreReset>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f3e:	e005      	b.n	8004f4c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f58:	b004      	add	sp, #16
 8004f5a:	4770      	bx	lr

08004f5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f023 0201 	bic.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e00b      	b.n	8004fc2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]
 8004fbc:	e001      	b.n	8004fc2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e003      	b.n	8004fca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fc2:	2032      	movs	r0, #50	; 0x32
 8004fc4:	f7fc faa8 	bl	8001518 <HAL_Delay>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b086      	sub	sp, #24
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e009      	b.n	8005008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3340      	adds	r3, #64	; 0x40
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	2200      	movs	r2, #0
 8005000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3301      	adds	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b0e      	cmp	r3, #14
 800500c:	d9f2      	bls.n	8004ff4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800500e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11c      	bne.n	800504e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e005      	b.n	800505a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005060:	461a      	mov	r2, r3
 8005062:	2300      	movs	r3, #0
 8005064:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	4619      	mov	r1, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	461a      	mov	r2, r3
 8005076:	680b      	ldr	r3, [r1, #0]
 8005078:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800507a:	2103      	movs	r1, #3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f93d 	bl	80052fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005082:	2110      	movs	r1, #16
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8f1 	bl	800526c <USB_FlushTxFifo>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f90f 	bl	80052b8 <USB_FlushRxFifo>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	461a      	mov	r2, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	461a      	mov	r2, r3
 80050b8:	2300      	movs	r3, #0
 80050ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	461a      	mov	r2, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e043      	b.n	8005156 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e4:	d118      	bne.n	8005118 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e013      	b.n	800512a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	461a      	mov	r2, r3
 8005110:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e008      	b.n	800512a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	461a      	mov	r2, r3
 8005126:	2300      	movs	r3, #0
 8005128:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	461a      	mov	r2, r3
 8005138:	2300      	movs	r3, #0
 800513a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800514e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3301      	adds	r3, #1
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d3b7      	bcc.n	80050ce <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e043      	b.n	80051ec <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517a:	d118      	bne.n	80051ae <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e013      	b.n	80051c0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e008      	b.n	80051c0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	461a      	mov	r2, r3
 80051e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d3b7      	bcc.n	8005164 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005206:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005214:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f043 0210 	orr.w	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <USB_DevInit+0x294>)
 8005228:	4313      	orrs	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800522e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f043 0208 	orr.w	r2, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d107      	bne.n	8005256 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524e:	f043 0304 	orr.w	r3, r3, #4
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005256:	7dfb      	ldrb	r3, [r7, #23]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005262:	b004      	add	sp, #16
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	803c3800 	.word	0x803c3800

0800526c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3301      	adds	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <USB_FlushTxFifo+0x48>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d901      	bls.n	8005298 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e006      	b.n	80052a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d0f0      	beq.n	8005286 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	00030d40 	.word	0x00030d40

080052b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2210      	movs	r2, #16
 80052c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3301      	adds	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <USB_FlushRxFifo+0x40>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e006      	b.n	80052ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d0f0      	beq.n	80052ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	00030d40 	.word	0x00030d40

080052fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <USB_CoreReset+0x64>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e01b      	b.n	80053c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	daf2      	bge.n	800537c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <USB_CoreReset+0x64>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e006      	b.n	80053c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d0f0      	beq.n	80053a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	00030d40 	.word	0x00030d40

080053d8 <__libc_init_array>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4d0d      	ldr	r5, [pc, #52]	; (8005410 <__libc_init_array+0x38>)
 80053dc:	4c0d      	ldr	r4, [pc, #52]	; (8005414 <__libc_init_array+0x3c>)
 80053de:	1b64      	subs	r4, r4, r5
 80053e0:	10a4      	asrs	r4, r4, #2
 80053e2:	2600      	movs	r6, #0
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	d109      	bne.n	80053fc <__libc_init_array+0x24>
 80053e8:	4d0b      	ldr	r5, [pc, #44]	; (8005418 <__libc_init_array+0x40>)
 80053ea:	4c0c      	ldr	r4, [pc, #48]	; (800541c <__libc_init_array+0x44>)
 80053ec:	f000 f820 	bl	8005430 <_init>
 80053f0:	1b64      	subs	r4, r4, r5
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	2600      	movs	r6, #0
 80053f6:	42a6      	cmp	r6, r4
 80053f8:	d105      	bne.n	8005406 <__libc_init_array+0x2e>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005400:	4798      	blx	r3
 8005402:	3601      	adds	r6, #1
 8005404:	e7ee      	b.n	80053e4 <__libc_init_array+0xc>
 8005406:	f855 3b04 	ldr.w	r3, [r5], #4
 800540a:	4798      	blx	r3
 800540c:	3601      	adds	r6, #1
 800540e:	e7f2      	b.n	80053f6 <__libc_init_array+0x1e>
 8005410:	08005498 	.word	0x08005498
 8005414:	08005498 	.word	0x08005498
 8005418:	08005498 	.word	0x08005498
 800541c:	0800549c 	.word	0x0800549c

08005420 <memset>:
 8005420:	4402      	add	r2, r0
 8005422:	4603      	mov	r3, r0
 8005424:	4293      	cmp	r3, r2
 8005426:	d100      	bne.n	800542a <memset+0xa>
 8005428:	4770      	bx	lr
 800542a:	f803 1b01 	strb.w	r1, [r3], #1
 800542e:	e7f9      	b.n	8005424 <memset+0x4>

08005430 <_init>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr

0800543c <_fini>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr
