
AutomaticIrrigation-STM32F3Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000586c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a2c  08005a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a2c  08005a2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a2c  08005a2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  2000000c  08005a40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08005a40  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ea6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a9  00000000  00000000  00033ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e858  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014933  00000000  00000000  00057110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8b06  00000000  00000000  0006ba43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004710  00000000  00000000  0012459c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059dc 	.word	0x080059dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080059dc 	.word	0x080059dc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr
 80007d4:	0000      	movs	r0, r0
	...

080007d8 <V_TO_MOISTURE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t V_TO_MOISTURE(uint32_t volt)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	return (uint8_t)100-(volt*((3.0/4096.0))*(100.0/3.0));
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff5d 	bl	80006a0 <__aeabi_ui2d>
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <V_TO_MOISTURE+0x58>)
 80007ec:	f7ff fcec 	bl	80001c8 <__aeabi_dmul>
 80007f0:	4602      	mov	r2, r0
 80007f2:	460b      	mov	r3, r1
 80007f4:	4610      	mov	r0, r2
 80007f6:	4619      	mov	r1, r3
 80007f8:	a30b      	add	r3, pc, #44	; (adr r3, 8000828 <V_TO_MOISTURE+0x50>)
 80007fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007fe:	f7ff fce3 	bl	80001c8 <__aeabi_dmul>
 8000802:	4602      	mov	r2, r0
 8000804:	460b      	mov	r3, r1
 8000806:	f04f 0000 	mov.w	r0, #0
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <V_TO_MOISTURE+0x5c>)
 800080c:	f7ff fe0a 	bl	8000424 <__aeabi_dsub>
 8000810:	4602      	mov	r2, r0
 8000812:	460b      	mov	r3, r1
 8000814:	4610      	mov	r0, r2
 8000816:	4619      	mov	r1, r3
 8000818:	f7ff ffbc 	bl	8000794 <__aeabi_d2uiz>
 800081c:	4603      	mov	r3, r0
 800081e:	b2db      	uxtb	r3, r3
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	aaaaaaab 	.word	0xaaaaaaab
 800082c:	4040aaaa 	.word	0x4040aaaa
 8000830:	3f480000 	.word	0x3f480000
 8000834:	40590000 	.word	0x40590000

08000838 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	uint8_t moistureLevel = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
	uint8_t threshold = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	73bb      	strb	r3, [r7, #14]

	adcData = HAL_ADC_GetValue(hadc);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f001 f817 	bl	800187c <HAL_ADC_GetValue>
 800084e:	4603      	mov	r3, r0
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000852:	6013      	str	r3, [r2, #0]
	moistureLevel = V_TO_MOISTURE(adcData);
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffbd 	bl	80007d8 <V_TO_MOISTURE>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]

	// Qui andrebbe implementato un semaforo
	threshold = uartRxData;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_ADC_ConvCpltCallback+0x50>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	73bb      	strb	r3, [r7, #14]


	if (moistureLevel < threshold){
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	429a      	cmp	r2, r3
 800086e:	d204      	bcs.n	800087a <HAL_ADC_ConvCpltCallback+0x42>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <HAL_ADC_ConvCpltCallback+0x54>)
 8000876:	f002 faf9 	bl	8002e6c <HAL_GPIO_TogglePin>
	}

	//HAL_ADC_Start_IT(hadc);
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000028 	.word	0x20000028
 8000888:	2000002c 	.word	0x2000002c
 800088c:	48001000 	.word	0x48001000

08000890 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_UART_RxCpltCallback+0x24>)
 800089e:	f002 fae5 	bl	8002e6c <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, &uartRxData, 1/*sizeof(uint8_t)*/);
 80008a2:	2201      	movs	r2, #1
 80008a4:	4904      	ldr	r1, [pc, #16]	; (80008b8 <HAL_UART_RxCpltCallback+0x28>)
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f004 f8e5 	bl	8004a76 <HAL_UART_Receive_IT>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	48001000 	.word	0x48001000
 80008b8:	2000002c 	.word	0x2000002c

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 fc42 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f81c 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f000 f9c0 	bl	8000c4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80008cc:	f000 f8ee 	bl	8000aac <MX_I2C1_Init>
  MX_SPI1_Init();
 80008d0:	f000 f92c 	bl	8000b2c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80008d4:	f000 f998 	bl	8000c08 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80008d8:	f000 f878 	bl	80009cc <MX_ADC1_Init>
  MX_UART4_Init();
 80008dc:	f000 f964 	bl	8000ba8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, &uartRxData, 1/*sizeof(uint8_t)*/);
 80008e0:	2201      	movs	r2, #1
 80008e2:	4904      	ldr	r1, [pc, #16]	; (80008f4 <main+0x38>)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <main+0x3c>)
 80008e6:	f004 f8c6 	bl	8004a76 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc1);
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <main+0x40>)
 80008ec:	f000 fe86 	bl	80015fc <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <main+0x34>
 80008f2:	bf00      	nop
 80008f4:	2000002c 	.word	0x2000002c
 80008f8:	200000cc 	.word	0x200000cc
 80008fc:	2000007c 	.word	0x2000007c

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09e      	sub	sp, #120	; 0x78
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800090a:	2228      	movs	r2, #40	; 0x28
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f005 f85c 	bl	80059cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	223c      	movs	r2, #60	; 0x3c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f005 f84e 	bl	80059cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000930:	2303      	movs	r3, #3
 8000932:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000934:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000938:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093e:	2301      	movs	r3, #1
 8000940:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	2310      	movs	r3, #16
 8000944:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000950:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000954:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fca4 	bl	80032a8 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000966:	f000 f9f1 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2302      	movs	r3, #2
 8000970:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f003 fb96 	bl	80040b8 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000992:	f000 f9db 	bl	8000d4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <SystemClock_Config+0xc8>)
 8000998:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800099e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 fdb8 	bl	8004524 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009ba:	f000 f9c7 	bl	8000d4c <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3778      	adds	r7, #120	; 0x78
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	000200a8 	.word	0x000200a8

080009cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 80009f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a4a:	f000 fbf7 	bl	800123c <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000a54:	f000 f97a 	bl	8000d4c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a64:	f001 fd38 	bl	80024d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a6e:	f000 f96d 	bl	8000d4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_ADC1_Init+0xdc>)
 8000a90:	f001 fa36 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a9a:	f000 f957 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000007c 	.word	0x2000007c

08000aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_I2C1_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_I2C1_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000ae8:	f002 f9da 	bl	8002ea0 <HAL_I2C_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af2:	f000 f92b 	bl	8000d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000afa:	f002 fa60 	bl	8002fbe <HAL_I2CEx_ConfigAnalogFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b04:	f000 f922 	bl	8000d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_I2C1_Init+0x74>)
 8000b0c:	f002 faa2 	bl	8003054 <HAL_I2CEx_ConfigDigitalFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 f919 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000030 	.word	0x20000030
 8000b24:	40005400 	.word	0x40005400
 8000b28:	2000090e 	.word	0x2000090e

08000b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_SPI1_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b62:	2208      	movs	r2, #8
 8000b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b8c:	f003 fe7a 	bl	8004884 <HAL_SPI_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f000 f8d9 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000150 	.word	0x20000150
 8000ba4:	40013000 	.word	0x40013000

08000ba8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <MX_UART4_Init+0x5c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_UART4_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_UART4_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_UART4_Init+0x58>)
 8000bec:	f003 fef5 	bl	80049da <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f000 f8a9 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000cc 	.word	0x200000cc
 8000c04:	40004c00 	.word	0x40004c00

08000c08 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_USB_PCD_Init+0x3c>)
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <MX_USB_PCD_Init+0x40>)
 8000c10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USB_PCD_Init+0x3c>)
 8000c14:	2208      	movs	r2, #8
 8000c16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_USB_PCD_Init+0x3c>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USB_PCD_Init+0x3c>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_USB_PCD_Init+0x3c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USB_PCD_Init+0x3c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_USB_PCD_Init+0x3c>)
 8000c32:	f002 fa5b 	bl	80030ec <HAL_PCD_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c3c:	f000 f886 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200001b4 	.word	0x200001b4
 8000c48:	40005c00 	.word	0x40005c00

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a36      	ldr	r2, [pc, #216]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_GPIO_Init+0xf8>)
 8000ce2:	f002 f8ab 	bl	8002e3c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000ce6:	2337      	movs	r3, #55	; 0x37
 8000ce8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_GPIO_Init+0xfc>)
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MX_GPIO_Init+0xf8>)
 8000cfa:	f001 ff25 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000cfe:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d02:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <MX_GPIO_Init+0xf8>)
 8000d18:	f001 ff16 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f001 ff09 	bl	8002b48 <HAL_GPIO_Init>

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000
 8000d44:	48001000 	.word	0x48001000
 8000d48:	10120000 	.word	0x10120000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x44>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x44>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x44>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f001 fe22 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc0:	d12c      	bne.n	8000e1c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_ADC_MspInit+0x84>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_ADC_MspInit+0x84>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_ADC_MspInit+0x84>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_ADC_MspInit+0x84>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <HAL_ADC_MspInit+0x84>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_ADC_MspInit+0x84>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000df2:	2302      	movs	r3, #2
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df6:	2303      	movs	r3, #3
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f001 fe9e 	bl	8002b48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2102      	movs	r1, #2
 8000e10:	2012      	movs	r0, #18
 8000e12:	f001 fdec 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e16:	2012      	movs	r0, #18
 8000e18:	f001 fe05 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_I2C_MspInit+0x7c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d127      	bne.n	8000e9a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_I2C_MspInit+0x80>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <HAL_I2C_MspInit+0x80>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_I2C_MspInit+0x80>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	2312      	movs	r3, #18
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e72:	2304      	movs	r3, #4
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <HAL_I2C_MspInit+0x84>)
 8000e7e:	f001 fe63 	bl	8002b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x80>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_I2C_MspInit+0x80>)
 8000e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_I2C_MspInit+0x80>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000400 	.word	0x48000400

08000eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_SPI_MspInit+0x7c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d128      	bne.n	8000f24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_SPI_MspInit+0x80>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_SPI_MspInit+0x80>)
 8000ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_SPI_MspInit+0x80>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_SPI_MspInit+0x80>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_SPI_MspInit+0x80>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_SPI_MspInit+0x80>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000f02:	23e0      	movs	r3, #224	; 0xe0
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f12:	2305      	movs	r3, #5
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 fe12 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40013000 	.word	0x40013000
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d130      	bne.n	8000fb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000f98:	2305      	movs	r3, #5
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <HAL_UART_MspInit+0x94>)
 8000fa4:	f001 fdd0 	bl	8002b48 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2101      	movs	r1, #1
 8000fac:	2034      	movs	r0, #52	; 0x34
 8000fae:	f001 fd1e 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000fb2:	2034      	movs	r0, #52	; 0x34
 8000fb4:	f001 fd37 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40004c00 	.word	0x40004c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800

08000fcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_PCD_MspInit+0x80>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d129      	bne.n	8001042 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_PCD_MspInit+0x84>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_PCD_MspInit+0x84>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_PCD_MspInit+0x84>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001006:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001018:	230e      	movs	r3, #14
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f001 fd8f 	bl	8002b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_PCD_MspInit+0x84>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_PCD_MspInit+0x84>)
 8001030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_PCD_MspInit+0x84>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005c00 	.word	0x40005c00
 8001050:	40021000 	.word	0x40021000

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f898 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <ADC1_2_IRQHandler+0x10>)
 80010ae:	f000 fbf3 	bl	8001898 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000007c 	.word	0x2000007c

080010bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <UART4_IRQHandler+0x10>)
 80010c2:	f003 fd15 	bl	8004af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000cc 	.word	0x200000cc

080010d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490e      	ldr	r1, [pc, #56]	; (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0b      	ldr	r4, [pc, #44]	; (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111e:	f7ff ffd7 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f004 fc2f 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001126:	f7ff fbc9 	bl	80008bc <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800112c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001138:	08005a34 	.word	0x08005a34
  ldr r2, =_sbss
 800113c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001140:	200004a4 	.word	0x200004a4

08001144 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC3_IRQHandler>
	...

08001148 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x28>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x28>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f001 fc3d 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fdf8 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fc55 	bl	8002a42 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b0:	f001 fc1d 	bl	80029ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	200004a0 	.word	0x200004a0

080011fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200004a0 	.word	0x200004a0

08001214 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	; 0x68
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e1c9      	b.n	80015f0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d176      	bne.n	800135c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d152      	bne.n	800131c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fd85 	bl	8000da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13b      	bne.n	800131c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f001 fa67 	bl	8002778 <ADC_Disable>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d12f      	bne.n	800131c <HAL_ADC_Init+0xe0>
 80012bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12b      	bne.n	800131c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	f043 0202 	orr.w	r2, r3, #2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b86      	ldr	r3, [pc, #536]	; (8001514 <HAL_ADC_Init+0x2d8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a86      	ldr	r2, [pc, #536]	; (8001518 <HAL_ADC_Init+0x2dc>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130e:	e002      	b.n	8001316 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001338:	d110      	bne.n	800135c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f023 0312 	bic.w	r3, r3, #18
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 8136 	bne.w	80015d6 <HAL_ADC_Init+0x39a>
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 8131 	bne.w	80015d6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 8129 	bne.w	80015d6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800138c:	f043 0202 	orr.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139c:	d004      	beq.n	80013a8 <HAL_ADC_Init+0x16c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a5e      	ldr	r2, [pc, #376]	; (800151c <HAL_ADC_Init+0x2e0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_Init+0x170>
 80013a8:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <HAL_ADC_Init+0x2e4>)
 80013aa:	e000      	b.n	80013ae <HAL_ADC_Init+0x172>
 80013ac:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <HAL_ADC_Init+0x2e8>)
 80013ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013b8:	d102      	bne.n	80013c0 <HAL_ADC_Init+0x184>
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_ADC_Init+0x2e0>)
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e01a      	b.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a55      	ldr	r2, [pc, #340]	; (800151c <HAL_ADC_Init+0x2e0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d103      	bne.n	80013d2 <HAL_ADC_Init+0x196>
 80013ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e011      	b.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a54      	ldr	r2, [pc, #336]	; (8001528 <HAL_ADC_Init+0x2ec>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d102      	bne.n	80013e2 <HAL_ADC_Init+0x1a6>
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_ADC_Init+0x2f0>)
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e009      	b.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a51      	ldr	r2, [pc, #324]	; (800152c <HAL_ADC_Init+0x2f0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d102      	bne.n	80013f2 <HAL_ADC_Init+0x1b6>
 80013ec:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <HAL_ADC_Init+0x2ec>)
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e001      	b.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <HAL_ADC_Init+0x1da>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Init+0x1da>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_ADC_Init+0x1dc>
 8001416:	2300      	movs	r3, #0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11c      	bne.n	8001456 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800141c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	d010      	beq.n	8001444 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_ADC_Init+0x202>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_ADC_Init+0x202>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_ADC_Init+0x204>
 800143e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001440:	2b00      	cmp	r3, #0
 8001442:	d108      	bne.n	8001456 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	431a      	orrs	r2, r3
 8001452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001454:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7e5b      	ldrb	r3, [r3, #25]
 800145a:	035b      	lsls	r3, r3, #13
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001460:	2a01      	cmp	r2, #1
 8001462:	d002      	beq.n	800146a <HAL_ADC_Init+0x22e>
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	e000      	b.n	800146c <HAL_ADC_Init+0x230>
 800146a:	2200      	movs	r2, #0
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4313      	orrs	r3, r2
 800147a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800147c:	4313      	orrs	r3, r2
 800147e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d11b      	bne.n	80014c2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e5b      	ldrb	r3, [r3, #25]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	3b01      	subs	r3, #1
 8001498:	045a      	lsls	r2, r3, #17
 800149a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800149c:	4313      	orrs	r3, r2
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	663b      	str	r3, [r7, #96]	; 0x60
 80014a4:	e00d      	b.n	80014c2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80014ae:	f043 0220 	orr.w	r2, r3, #32
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d03a      	beq.n	8001540 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <HAL_ADC_Init+0x2ec>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d004      	beq.n	80014de <HAL_ADC_Init+0x2a2>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_ADC_Init+0x2f0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d128      	bne.n	8001530 <HAL_ADC_Init+0x2f4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80014e6:	d012      	beq.n	800150e <HAL_ADC_Init+0x2d2>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f0:	d00a      	beq.n	8001508 <HAL_ADC_Init+0x2cc>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80014fa:	d002      	beq.n	8001502 <HAL_ADC_Init+0x2c6>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	e018      	b.n	8001534 <HAL_ADC_Init+0x2f8>
 8001502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001506:	e015      	b.n	8001534 <HAL_ADC_Init+0x2f8>
 8001508:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800150c:	e012      	b.n	8001534 <HAL_ADC_Init+0x2f8>
 800150e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001512:	e00f      	b.n	8001534 <HAL_ADC_Init+0x2f8>
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83
 800151c:	50000100 	.word	0x50000100
 8001520:	50000300 	.word	0x50000300
 8001524:	50000700 	.word	0x50000700
 8001528:	50000400 	.word	0x50000400
 800152c:	50000500 	.word	0x50000500
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001538:	4313      	orrs	r3, r2
 800153a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800153c:	4313      	orrs	r3, r2
 800153e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b00      	cmp	r3, #0
 800154c:	d114      	bne.n	8001578 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800155c:	f023 0302 	bic.w	r3, r3, #2
 8001560:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7e1b      	ldrb	r3, [r3, #24]
 8001566:	039a      	lsls	r2, r3, #14
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4313      	orrs	r3, r2
 8001572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001574:	4313      	orrs	r3, r2
 8001576:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_ADC_Init+0x3bc>)
 8001580:	4013      	ands	r3, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001588:	430b      	orrs	r3, r1
 800158a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10c      	bne.n	80015ae <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f023 010f 	bic.w	r1, r3, #15
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
 80015ac:	e007      	b.n	80015be <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 020f 	bic.w	r2, r2, #15
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f023 0303 	bic.w	r3, r3, #3
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	641a      	str	r2, [r3, #64]	; 0x40
 80015d4:	e00a      	b.n	80015ec <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f023 0312 	bic.w	r3, r3, #18
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3768      	adds	r7, #104	; 0x68
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	fff0c007 	.word	0xfff0c007

080015fc <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8123 	bne.w	800185e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_ADC_Start_IT+0x2a>
 8001622:	2302      	movs	r3, #2
 8001624:	e11e      	b.n	8001864 <HAL_ADC_Start_IT+0x268>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 f844 	bl	80026bc <ADC_Enable>
 8001634:	4603      	mov	r3, r0
 8001636:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 810a 	bne.w	8001854 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165c:	d004      	beq.n	8001668 <HAL_ADC_Start_IT+0x6c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a82      	ldr	r2, [pc, #520]	; (800186c <HAL_ADC_Start_IT+0x270>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d106      	bne.n	8001676 <HAL_ADC_Start_IT+0x7a>
 8001668:	4b81      	ldr	r3, [pc, #516]	; (8001870 <HAL_ADC_Start_IT+0x274>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2b00      	cmp	r3, #0
 8001672:	d010      	beq.n	8001696 <HAL_ADC_Start_IT+0x9a>
 8001674:	e005      	b.n	8001682 <HAL_ADC_Start_IT+0x86>
 8001676:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <HAL_ADC_Start_IT+0x278>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_ADC_Start_IT+0x9a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800168a:	d004      	beq.n	8001696 <HAL_ADC_Start_IT+0x9a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_ADC_Start_IT+0x27c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d115      	bne.n	80016c2 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d036      	beq.n	800171e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016c0:	e02d      	b.n	800171e <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d6:	d004      	beq.n	80016e2 <HAL_ADC_Start_IT+0xe6>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a63      	ldr	r2, [pc, #396]	; (800186c <HAL_ADC_Start_IT+0x270>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10a      	bne.n	80016f8 <HAL_ADC_Start_IT+0xfc>
 80016e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	e008      	b.n	800170a <HAL_ADC_Start_IT+0x10e>
 80016f8:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_ADC_Start_IT+0x27c>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001716:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172a:	d106      	bne.n	800173a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f023 0206 	bic.w	r2, r3, #6
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
 8001738:	e002      	b.n	8001740 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	221c      	movs	r2, #28
 800174e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d110      	bne.n	800177a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0208 	orr.w	r2, r2, #8
 8001776:	605a      	str	r2, [r3, #4]
          break;
 8001778:	e008      	b.n	800178c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 020c 	orr.w	r2, r2, #12
 8001788:	605a      	str	r2, [r3, #4]
          break;
 800178a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001790:	2b01      	cmp	r3, #1
 8001792:	d107      	bne.n	80017a4 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0210 	bic.w	r2, r2, #16
 80017a2:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ac:	d004      	beq.n	80017b8 <HAL_ADC_Start_IT+0x1bc>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a2e      	ldr	r2, [pc, #184]	; (800186c <HAL_ADC_Start_IT+0x270>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d106      	bne.n	80017c6 <HAL_ADC_Start_IT+0x1ca>
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_ADC_Start_IT+0x274>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d03e      	beq.n	8001842 <HAL_ADC_Start_IT+0x246>
 80017c4:	e005      	b.n	80017d2 <HAL_ADC_Start_IT+0x1d6>
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_ADC_Start_IT+0x278>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d037      	beq.n	8001842 <HAL_ADC_Start_IT+0x246>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017da:	d004      	beq.n	80017e6 <HAL_ADC_Start_IT+0x1ea>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_ADC_Start_IT+0x270>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d106      	bne.n	80017f4 <HAL_ADC_Start_IT+0x1f8>
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_ADC_Start_IT+0x274>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d027      	beq.n	8001842 <HAL_ADC_Start_IT+0x246>
 80017f2:	e005      	b.n	8001800 <HAL_ADC_Start_IT+0x204>
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_ADC_Start_IT+0x278>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d020      	beq.n	8001842 <HAL_ADC_Start_IT+0x246>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001808:	d004      	beq.n	8001814 <HAL_ADC_Start_IT+0x218>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_ADC_Start_IT+0x270>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d106      	bne.n	8001822 <HAL_ADC_Start_IT+0x226>
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_ADC_Start_IT+0x274>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	2b09      	cmp	r3, #9
 800181e:	d010      	beq.n	8001842 <HAL_ADC_Start_IT+0x246>
 8001820:	e005      	b.n	800182e <HAL_ADC_Start_IT+0x232>
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_ADC_Start_IT+0x278>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	2b09      	cmp	r3, #9
 800182c:	d009      	beq.n	8001842 <HAL_ADC_Start_IT+0x246>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001836:	d004      	beq.n	8001842 <HAL_ADC_Start_IT+0x246>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_ADC_Start_IT+0x27c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10f      	bne.n	8001862 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0204 	orr.w	r2, r2, #4
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	e006      	b.n	8001862 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800185c:	e001      	b.n	8001862 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	50000100 	.word	0x50000100
 8001870:	50000300 	.word	0x50000300
 8001874:	50000700 	.word	0x50000700
 8001878:	50000400 	.word	0x50000400

0800187c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d106      	bne.n	80018c8 <HAL_ADC_IRQHandler+0x30>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d00f      	beq.n	80018e8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	f040 80c0 	bne.w	8001a58 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	f040 80b8 	bne.w	8001a58 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001908:	d004      	beq.n	8001914 <HAL_ADC_IRQHandler+0x7c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a95      	ldr	r2, [pc, #596]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d106      	bne.n	8001922 <HAL_ADC_IRQHandler+0x8a>
 8001914:	4b94      	ldr	r3, [pc, #592]	; (8001b68 <HAL_ADC_IRQHandler+0x2d0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03e      	beq.n	800199e <HAL_ADC_IRQHandler+0x106>
 8001920:	e005      	b.n	800192e <HAL_ADC_IRQHandler+0x96>
 8001922:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <HAL_ADC_IRQHandler+0x2d4>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2b00      	cmp	r3, #0
 800192c:	d037      	beq.n	800199e <HAL_ADC_IRQHandler+0x106>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001936:	d004      	beq.n	8001942 <HAL_ADC_IRQHandler+0xaa>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a89      	ldr	r2, [pc, #548]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d106      	bne.n	8001950 <HAL_ADC_IRQHandler+0xb8>
 8001942:	4b89      	ldr	r3, [pc, #548]	; (8001b68 <HAL_ADC_IRQHandler+0x2d0>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	2b05      	cmp	r3, #5
 800194c:	d027      	beq.n	800199e <HAL_ADC_IRQHandler+0x106>
 800194e:	e005      	b.n	800195c <HAL_ADC_IRQHandler+0xc4>
 8001950:	4b86      	ldr	r3, [pc, #536]	; (8001b6c <HAL_ADC_IRQHandler+0x2d4>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2b05      	cmp	r3, #5
 800195a:	d020      	beq.n	800199e <HAL_ADC_IRQHandler+0x106>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001964:	d004      	beq.n	8001970 <HAL_ADC_IRQHandler+0xd8>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7e      	ldr	r2, [pc, #504]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d106      	bne.n	800197e <HAL_ADC_IRQHandler+0xe6>
 8001970:	4b7d      	ldr	r3, [pc, #500]	; (8001b68 <HAL_ADC_IRQHandler+0x2d0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	2b09      	cmp	r3, #9
 800197a:	d010      	beq.n	800199e <HAL_ADC_IRQHandler+0x106>
 800197c:	e005      	b.n	800198a <HAL_ADC_IRQHandler+0xf2>
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <HAL_ADC_IRQHandler+0x2d4>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	2b09      	cmp	r3, #9
 8001988:	d009      	beq.n	800199e <HAL_ADC_IRQHandler+0x106>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001992:	d004      	beq.n	800199e <HAL_ADC_IRQHandler+0x106>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a75      	ldr	r2, [pc, #468]	; (8001b70 <HAL_ADC_IRQHandler+0x2d8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d104      	bne.n	80019a8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e00f      	b.n	80019c8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b0:	d004      	beq.n	80019bc <HAL_ADC_IRQHandler+0x124>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6b      	ldr	r2, [pc, #428]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d102      	bne.n	80019c2 <HAL_ADC_IRQHandler+0x12a>
 80019bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019c0:	e000      	b.n	80019c4 <HAL_ADC_IRQHandler+0x12c>
 80019c2:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_ADC_IRQHandler+0x2d8>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d139      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d134      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d12d      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11a      	bne.n	8001a32 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 020c 	bic.w	r2, r2, #12
 8001a0a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d112      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a30:	e00b      	b.n	8001a4a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f043 0210 	orr.w	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe fef4 	bl	8000838 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	220c      	movs	r2, #12
 8001a56:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d106      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x1dc>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d00f      	beq.n	8001a94 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001a7e:	2b40      	cmp	r3, #64	; 0x40
 8001a80:	f040 813c 	bne.w	8001cfc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	f040 8134 	bne.w	8001cfc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aa8:	d004      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0x21c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x22a>
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_ADC_IRQHandler+0x2d0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d03e      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x2a6>
 8001ac0:	e005      	b.n	8001ace <HAL_ADC_IRQHandler+0x236>
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_ADC_IRQHandler+0x2d4>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d037      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x2a6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x24a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d106      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x258>
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_ADC_IRQHandler+0x2d0>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d027      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x2a6>
 8001aee:	e005      	b.n	8001afc <HAL_ADC_IRQHandler+0x264>
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_ADC_IRQHandler+0x2d4>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d020      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x2a6>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b04:	d004      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x278>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d106      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x286>
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_ADC_IRQHandler+0x2d0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	d010      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x2a6>
 8001b1c:	e005      	b.n	8001b2a <HAL_ADC_IRQHandler+0x292>
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_ADC_IRQHandler+0x2d4>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	d009      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x2a6>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b32:	d004      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x2a6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_ADC_IRQHandler+0x2d8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d104      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e018      	b.n	8001b7a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b50:	d004      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x2c4>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_ADC_IRQHandler+0x2cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d10b      	bne.n	8001b74 <HAL_ADC_IRQHandler+0x2dc>
 8001b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b60:	e009      	b.n	8001b76 <HAL_ADC_IRQHandler+0x2de>
 8001b62:	bf00      	nop
 8001b64:	50000100 	.word	0x50000100
 8001b68:	50000300 	.word	0x50000300
 8001b6c:	50000700 	.word	0x50000700
 8001b70:	50000400 	.word	0x50000400
 8001b74:	4b9d      	ldr	r3, [pc, #628]	; (8001dec <HAL_ADC_IRQHandler+0x554>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 80b2 	bne.w	8001cee <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80a5 	bne.w	8001cee <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 809f 	bne.w	8001cee <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	f040 8097 	bne.w	8001cee <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d004      	beq.n	8001bd4 <HAL_ADC_IRQHandler+0x33c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a88      	ldr	r2, [pc, #544]	; (8001df0 <HAL_ADC_IRQHandler+0x558>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d106      	bne.n	8001be2 <HAL_ADC_IRQHandler+0x34a>
 8001bd4:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <HAL_ADC_IRQHandler+0x55c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03e      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3c6>
 8001be0:	e005      	b.n	8001bee <HAL_ADC_IRQHandler+0x356>
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_ADC_IRQHandler+0x560>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d037      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3c6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x36a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a7c      	ldr	r2, [pc, #496]	; (8001df0 <HAL_ADC_IRQHandler+0x558>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x378>
 8001c02:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <HAL_ADC_IRQHandler+0x55c>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d027      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3c6>
 8001c0e:	e005      	b.n	8001c1c <HAL_ADC_IRQHandler+0x384>
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_ADC_IRQHandler+0x560>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2b06      	cmp	r3, #6
 8001c1a:	d020      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3c6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c24:	d004      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x398>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a71      	ldr	r2, [pc, #452]	; (8001df0 <HAL_ADC_IRQHandler+0x558>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d106      	bne.n	8001c3e <HAL_ADC_IRQHandler+0x3a6>
 8001c30:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <HAL_ADC_IRQHandler+0x55c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2b07      	cmp	r3, #7
 8001c3a:	d010      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3c6>
 8001c3c:	e005      	b.n	8001c4a <HAL_ADC_IRQHandler+0x3b2>
 8001c3e:	4b6e      	ldr	r3, [pc, #440]	; (8001df8 <HAL_ADC_IRQHandler+0x560>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d009      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3c6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c52:	d004      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x3c6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a64      	ldr	r2, [pc, #400]	; (8001dec <HAL_ADC_IRQHandler+0x554>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d104      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e00f      	b.n	8001c88 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c70:	d004      	beq.n	8001c7c <HAL_ADC_IRQHandler+0x3e4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a5e      	ldr	r2, [pc, #376]	; (8001df0 <HAL_ADC_IRQHandler+0x558>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d102      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x3ea>
 8001c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c80:	e000      	b.n	8001c84 <HAL_ADC_IRQHandler+0x3ec>
 8001c82:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <HAL_ADC_IRQHandler+0x554>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12d      	bne.n	8001cee <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11a      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cae:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d112      	bne.n	8001cee <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd4:	e00b      	b.n	8001cee <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8de 	bl	8001eb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2260      	movs	r2, #96	; 0x60
 8001cfa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d113      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x49a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d10c      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fa75 	bl	8001214 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d40:	d115      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x4d6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d50:	d10d      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8ba 	bl	8001ed8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d115      	bne.n	8001daa <HAL_ADC_IRQHandler+0x512>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8c:	d10d      	bne.n	8001daa <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8a6 	bl	8001eec <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d151      	bne.n	8001e5c <HAL_ADC_IRQHandler+0x5c4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d14a      	bne.n	8001e5c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e02d      	b.n	8001e30 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x550>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <HAL_ADC_IRQHandler+0x558>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d109      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x564>
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <HAL_ADC_IRQHandler+0x55c>)
 8001dea:	e008      	b.n	8001dfe <HAL_ADC_IRQHandler+0x566>
 8001dec:	50000400 	.word	0x50000400
 8001df0:	50000100 	.word	0x50000100
 8001df4:	50000300 	.word	0x50000300
 8001df8:	50000700 	.word	0x50000700
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_ADC_IRQHandler+0x614>)
 8001dfe:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10a      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e007      	b.n	8001e30 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10e      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff f9ea 	bl	8001228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2210      	movs	r2, #16
 8001e5a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x60c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d113      	bne.n	8001ea4 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	f043 0208 	orr.w	r2, r3, #8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f810 	bl	8001ec4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	50000700 	.word	0x50000700

08001eb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b09b      	sub	sp, #108	; 0x6c
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x22>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e2cb      	b.n	80024ba <HAL_ADC_ConfigChannel+0x5ba>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 82af 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d81c      	bhi.n	8001f7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	461a      	mov	r2, r3
 8001f56:	231f      	movs	r3, #31
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4019      	ands	r1, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
 8001f7a:	e063      	b.n	8002044 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	d81e      	bhi.n	8001fc2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	3b1e      	subs	r3, #30
 8001f98:	221f      	movs	r2, #31
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	4019      	ands	r1, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	3b1e      	subs	r3, #30
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc0:	e040      	b.n	8002044 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b0e      	cmp	r3, #14
 8001fc8:	d81e      	bhi.n	8002008 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	3b3c      	subs	r3, #60	; 0x3c
 8001fde:	221f      	movs	r2, #31
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	3b3c      	subs	r3, #60	; 0x3c
 8001ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
 8002006:	e01d      	b.n	8002044 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	3b5a      	subs	r3, #90	; 0x5a
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	4019      	ands	r1, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	3b5a      	subs	r3, #90	; 0x5a
 8002038:	fa00 f203 	lsl.w	r2, r0, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80e5 	bne.w	800221e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d91c      	bls.n	8002096 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6999      	ldr	r1, [r3, #24]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	3b1e      	subs	r3, #30
 800206e:	2207      	movs	r2, #7
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	4019      	ands	r1, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6898      	ldr	r0, [r3, #8]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	3b1e      	subs	r3, #30
 8002088:	fa00 f203 	lsl.w	r2, r0, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	619a      	str	r2, [r3, #24]
 8002094:	e019      	b.n	80020ca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6959      	ldr	r1, [r3, #20]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	2207      	movs	r2, #7
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4019      	ands	r1, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6898      	ldr	r0, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	fa00 f203 	lsl.w	r2, r0, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d84f      	bhi.n	800218c <HAL_ADC_ConfigChannel+0x28c>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_ADC_ConfigChannel+0x1f4>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002105 	.word	0x08002105
 80020f8:	08002127 	.word	0x08002127
 80020fc:	08002149 	.word	0x08002149
 8002100:	0800216b 	.word	0x0800216b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800210a:	4b9f      	ldr	r3, [pc, #636]	; (8002388 <HAL_ADC_ConfigChannel+0x488>)
 800210c:	4013      	ands	r3, r2
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	0691      	lsls	r1, r2, #26
 8002114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002116:	430a      	orrs	r2, r1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002122:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002124:	e07e      	b.n	8002224 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800212c:	4b96      	ldr	r3, [pc, #600]	; (8002388 <HAL_ADC_ConfigChannel+0x488>)
 800212e:	4013      	ands	r3, r2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	0691      	lsls	r1, r2, #26
 8002136:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002138:	430a      	orrs	r2, r1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002144:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002146:	e06d      	b.n	8002224 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800214e:	4b8e      	ldr	r3, [pc, #568]	; (8002388 <HAL_ADC_ConfigChannel+0x488>)
 8002150:	4013      	ands	r3, r2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	0691      	lsls	r1, r2, #26
 8002158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800215a:	430a      	orrs	r2, r1
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002166:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002168:	e05c      	b.n	8002224 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002170:	4b85      	ldr	r3, [pc, #532]	; (8002388 <HAL_ADC_ConfigChannel+0x488>)
 8002172:	4013      	ands	r3, r2
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	0691      	lsls	r1, r2, #26
 800217a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800217c:	430a      	orrs	r2, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002188:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800218a:	e04b      	b.n	8002224 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021d2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	069b      	lsls	r3, r3, #26
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021f6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	069b      	lsls	r3, r3, #26
 8002208:	429a      	cmp	r2, r3
 800220a:	d10a      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800221a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800221c:	e001      	b.n	8002222 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002222:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x344>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x344>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_ADC_ConfigChannel+0x346>
 8002244:	2300      	movs	r3, #0
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8131 	bne.w	80024ae <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d00f      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002272:	e049      	b.n	8002308 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	409a      	lsls	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b09      	cmp	r3, #9
 8002294:	d91c      	bls.n	80022d0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6999      	ldr	r1, [r3, #24]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	3b1b      	subs	r3, #27
 80022a8:	2207      	movs	r2, #7
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	4019      	ands	r1, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6898      	ldr	r0, [r3, #8]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1b      	subs	r3, #27
 80022c2:	fa00 f203 	lsl.w	r2, r0, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	619a      	str	r2, [r3, #24]
 80022ce:	e01b      	b.n	8002308 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	2207      	movs	r2, #7
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4019      	ands	r1, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6898      	ldr	r0, [r3, #8]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002310:	d004      	beq.n	800231c <HAL_ADC_ConfigChannel+0x41c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_ADC_ConfigChannel+0x48c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x420>
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_ADC_ConfigChannel+0x490>)
 800231e:	e000      	b.n	8002322 <HAL_ADC_ConfigChannel+0x422>
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_ADC_ConfigChannel+0x494>)
 8002322:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b10      	cmp	r3, #16
 800232a:	d105      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800233c:	2b11      	cmp	r3, #17
 800233e:	d105      	bne.n	800234c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002350:	2b12      	cmp	r3, #18
 8002352:	f040 80ac 	bne.w	80024ae <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 80a5 	bne.w	80024ae <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236c:	d102      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x474>
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <HAL_ADC_ConfigChannel+0x48c>)
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e023      	b.n	80023bc <HAL_ADC_ConfigChannel+0x4bc>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_ADC_ConfigChannel+0x48c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10c      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x498>
 800237e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e01a      	b.n	80023bc <HAL_ADC_ConfigChannel+0x4bc>
 8002386:	bf00      	nop
 8002388:	83fff000 	.word	0x83fff000
 800238c:	50000100 	.word	0x50000100
 8002390:	50000300 	.word	0x50000300
 8002394:	50000700 	.word	0x50000700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <HAL_ADC_ConfigChannel+0x5c8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d102      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x4a8>
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_ADC_ConfigChannel+0x5cc>)
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e009      	b.n	80023bc <HAL_ADC_ConfigChannel+0x4bc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a47      	ldr	r2, [pc, #284]	; (80024cc <HAL_ADC_ConfigChannel+0x5cc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d102      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x4b8>
 80023b2:	4b45      	ldr	r3, [pc, #276]	; (80024c8 <HAL_ADC_ConfigChannel+0x5c8>)
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e001      	b.n	80023bc <HAL_ADC_ConfigChannel+0x4bc>
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x4dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x4dc>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_ADC_ConfigChannel+0x4de>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d150      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x504>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x504>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_ADC_ConfigChannel+0x506>
 8002404:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002406:	2b00      	cmp	r3, #0
 8002408:	d13c      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b10      	cmp	r3, #16
 8002410:	d11d      	bne.n	800244e <HAL_ADC_ConfigChannel+0x54e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800241a:	d118      	bne.n	800244e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800241c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002426:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_ADC_ConfigChannel+0x5d0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <HAL_ADC_ConfigChannel+0x5d4>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	0c9a      	lsrs	r2, r3, #18
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800243e:	e002      	b.n	8002446 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3b01      	subs	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f9      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800244c:	e02e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b11      	cmp	r3, #17
 8002454:	d10b      	bne.n	800246e <HAL_ADC_ConfigChannel+0x56e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245e:	d106      	bne.n	800246e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800246c:	e01e      	b.n	80024ac <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b12      	cmp	r3, #18
 8002474:	d11a      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800247e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002480:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002482:	e013      	b.n	80024ac <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002496:	e00a      	b.n	80024ae <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024aa:	e000      	b.n	80024ae <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024ac:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	376c      	adds	r7, #108	; 0x6c
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	50000400 	.word	0x50000400
 80024cc:	50000500 	.word	0x50000500
 80024d0:	20000000 	.word	0x20000000
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80024d8:	b480      	push	{r7}
 80024da:	b099      	sub	sp, #100	; 0x64
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f0:	d102      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80024f2:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	e01a      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6a      	ldr	r2, [pc, #424]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d103      	bne.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	e011      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a67      	ldr	r2, [pc, #412]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	e009      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a64      	ldr	r2, [pc, #400]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d102      	bne.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002524:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	e001      	b.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b0      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002542:	2302      	movs	r3, #2
 8002544:	e0a9      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f040 808d 	bne.w	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 8086 	bne.w	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002574:	d004      	beq.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002582:	e000      	b.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002584:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002586:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d040      	beq.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025a2:	035b      	lsls	r3, r3, #13
 80025a4:	430b      	orrs	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025aa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d108      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80025cc:	2300      	movs	r3, #0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d15c      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d107      	bne.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80025ee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d14b      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025fc:	f023 030f 	bic.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	6811      	ldr	r1, [r2, #0]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	430a      	orrs	r2, r1
 800260a:	431a      	orrs	r2, r3
 800260c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800260e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002610:	e03c      	b.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d123      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002660:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002662:	2b00      	cmp	r3, #0
 8002664:	d112      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800266e:	f023 030f 	bic.w	r3, r3, #15
 8002672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002674:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002676:	e009      	b.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800268a:	e000      	b.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800269a:	4618      	mov	r0, r3
 800269c:	3764      	adds	r7, #100	; 0x64
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	50000100 	.word	0x50000100
 80026ac:	50000400 	.word	0x50000400
 80026b0:	50000500 	.word	0x50000500
 80026b4:	50000300 	.word	0x50000300
 80026b8:	50000700 	.word	0x50000700

080026bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <ADC_Enable+0x2c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <ADC_Enable+0x2c>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <ADC_Enable+0x2e>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d13c      	bne.n	8002768 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <ADC_Enable+0xb8>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0210 	orr.w	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e028      	b.n	800276a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002728:	f7fe fd68 	bl	80011fc <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800272e:	e014      	b.n	800275a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002730:	f7fe fd64 	bl	80011fc <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d90d      	bls.n	800275a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f043 0210 	orr.w	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e007      	b.n	800276a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d1e3      	bne.n	8002730 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	8000003f 	.word	0x8000003f

08002778 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <ADC_Disable+0x2c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <ADC_Disable+0x2c>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <ADC_Disable+0x2e>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d040      	beq.n	800282c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030d 	and.w	r3, r3, #13
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10f      	bne.n	80027d8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0202 	orr.w	r2, r2, #2
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2203      	movs	r2, #3
 80027ce:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fd14 	bl	80011fc <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027d6:	e022      	b.n	800281e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e01c      	b.n	800282e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027f4:	f7fe fd02 	bl	80011fc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d90d      	bls.n	800281e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d0e3      	beq.n	80027f4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286a:	4a04      	ldr	r2, [pc, #16]	; (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	60d3      	str	r3, [r2, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <__NVIC_GetPriorityGrouping+0x18>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 0307 	and.w	r3, r3, #7
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	db0b      	blt.n	80028c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4907      	ldr	r1, [pc, #28]	; (80028d4 <__NVIC_EnableIRQ+0x38>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2001      	movs	r0, #1
 80028be:	fa00 f202 	lsl.w	r2, r0, r2
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e100 	.word	0xe000e100

080028d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db0a      	blt.n	8002902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	490c      	ldr	r1, [pc, #48]	; (8002924 <__NVIC_SetPriority+0x4c>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002900:	e00a      	b.n	8002918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4908      	ldr	r1, [pc, #32]	; (8002928 <__NVIC_SetPriority+0x50>)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3b04      	subs	r3, #4
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	440b      	add	r3, r1
 8002916:	761a      	strb	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	2b04      	cmp	r3, #4
 8002948:	bf28      	it	cs
 800294a:	2304      	movcs	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3304      	adds	r3, #4
 8002952:	2b06      	cmp	r3, #6
 8002954:	d902      	bls.n	800295c <NVIC_EncodePriority+0x30>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3b03      	subs	r3, #3
 800295a:	e000      	b.n	800295e <NVIC_EncodePriority+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	401a      	ands	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43d9      	mvns	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	4313      	orrs	r3, r2
         );
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a4:	d301      	bcc.n	80029aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00f      	b.n	80029ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <SysTick_Config+0x40>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b2:	210f      	movs	r1, #15
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b8:	f7ff ff8e 	bl	80028d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <SysTick_Config+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <SysTick_Config+0x40>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff29 	bl	8002838 <__NVIC_SetPriorityGrouping>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a00:	f7ff ff3e 	bl	8002880 <__NVIC_GetPriorityGrouping>
 8002a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff8e 	bl	800292c <NVIC_EncodePriority>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff5d 	bl	80028d8 <__NVIC_SetPriority>
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff31 	bl	800289c <__NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffa2 	bl	8002994 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e020      	b.n	8002ac0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 020e 	bic.w	r2, r2, #14
 8002a8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d005      	beq.n	8002aee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	e027      	b.n	8002b3e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020e 	bic.w	r2, r2, #14
 8002afc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
    } 
  }
  return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b56:	e154      	b.n	8002e02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8146 	beq.w	8002dfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d00b      	beq.n	8002b90 <HAL_GPIO_Init+0x48>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d007      	beq.n	8002b90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b84:	2b11      	cmp	r3, #17
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b12      	cmp	r3, #18
 8002b8e:	d130      	bne.n	8002bf2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0201 	and.w	r2, r3, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0xea>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d123      	bne.n	8002c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	6939      	ldr	r1, [r7, #16]
 8002c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0203 	and.w	r2, r3, #3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80a0 	beq.w	8002dfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbc:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a57      	ldr	r2, [pc, #348]	; (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cd4:	4a53      	ldr	r2, [pc, #332]	; (8002e24 <HAL_GPIO_Init+0x2dc>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cfe:	d019      	beq.n	8002d34 <HAL_GPIO_Init+0x1ec>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a49      	ldr	r2, [pc, #292]	; (8002e28 <HAL_GPIO_Init+0x2e0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_GPIO_Init+0x1e8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a48      	ldr	r2, [pc, #288]	; (8002e2c <HAL_GPIO_Init+0x2e4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00d      	beq.n	8002d2c <HAL_GPIO_Init+0x1e4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a47      	ldr	r2, [pc, #284]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <HAL_GPIO_Init+0x1e0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_GPIO_Init+0x1dc>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e008      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d24:	2305      	movs	r3, #5
 8002d26:	e006      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e004      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d34:	2300      	movs	r3, #0
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	f002 0203 	and.w	r2, r2, #3
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	4093      	lsls	r3, r2
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d46:	4937      	ldr	r1, [pc, #220]	; (8002e24 <HAL_GPIO_Init+0x2dc>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d54:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d78:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002da2:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f47f aea3 	bne.w	8002b58 <HAL_GPIO_Init+0x10>
  }
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010000 	.word	0x40010000
 8002e28:	48000400 	.word	0x48000400
 8002e2c:	48000800 	.word	0x48000800
 8002e30:	48000c00 	.word	0x48000c00
 8002e34:	48001000 	.word	0x48001000
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43d9      	mvns	r1, r3
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e081      	b.n	8002fb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd ffae 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	e006      	b.n	8002f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d104      	bne.n	8002f3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	ea42 0103 	orr.w	r1, r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	021a      	lsls	r2, r3, #8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d138      	bne.n	8003046 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e032      	b.n	8003048 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2224      	movs	r2, #36	; 0x24
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003010:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	d139      	bne.n	80030de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003074:	2302      	movs	r3, #2
 8003076:	e033      	b.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	b08b      	sub	sp, #44	; 0x2c
 80030f0:	af06      	add	r7, sp, #24
 80030f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0d0      	b.n	80032a0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd ff5a 	bl	8000fcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2203      	movs	r2, #3
 800311c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f002 fbf1 	bl	800590c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e04c      	b.n	80031ca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	3301      	adds	r3, #1
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	b298      	uxth	r0, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	3336      	adds	r3, #54	; 0x36
 800316e:	4602      	mov	r2, r0
 8003170:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	3303      	adds	r3, #3
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	3338      	adds	r3, #56	; 0x38
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	333c      	adds	r3, #60	; 0x3c
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	3340      	adds	r3, #64	; 0x40
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	3301      	adds	r3, #1
 80031c8:	73fb      	strb	r3, [r7, #15]
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3ad      	bcc.n	8003130 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e044      	b.n	8003264 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	3301      	adds	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d3b5      	bcc.n	80031da <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	687e      	ldr	r6, [r7, #4]
 8003276:	466d      	mov	r5, sp
 8003278:	f106 0410 	add.w	r4, r6, #16
 800327c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	602b      	str	r3, [r5, #0]
 8003284:	1d33      	adds	r3, r6, #4
 8003286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003288:	6838      	ldr	r0, [r7, #0]
 800328a:	f002 fb5a 	bl	8005942 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f000 bef4 	b.w	80040aa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 816a 	beq.w	80035a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032d2:	4bb3      	ldr	r3, [pc, #716]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032de:	4bb0      	ldr	r3, [pc, #704]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d159      	bne.n	800339e <HAL_RCC_OscConfig+0xf6>
 80032ea:	4bad      	ldr	r3, [pc, #692]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f6:	d152      	bne.n	800339e <HAL_RCC_OscConfig+0xf6>
 80032f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800330c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_RCC_OscConfig+0x82>
 8003324:	4b9e      	ldr	r3, [pc, #632]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0xae>
 800332a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800332e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800333e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003342:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003346:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003352:	4b93      	ldr	r3, [pc, #588]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800335a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800335e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003362:	fa92 f2a2 	rbit	r2, r2
 8003366:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800336a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800336e:	fab2 f282 	clz	r2, r2
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	f042 0220 	orr.w	r2, r2, #32
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f002 021f 	and.w	r2, r2, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 810c 	beq.w	80035a4 <HAL_RCC_OscConfig+0x2fc>
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 8106 	bne.w	80035a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f000 be86 	b.w	80040aa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x110>
 80033aa:	4b7d      	ldr	r3, [pc, #500]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7c      	ldr	r2, [pc, #496]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e030      	b.n	800341a <HAL_RCC_OscConfig+0x172>
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x134>
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a76      	ldr	r2, [pc, #472]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b74      	ldr	r3, [pc, #464]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a73      	ldr	r2, [pc, #460]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e01e      	b.n	800341a <HAL_RCC_OscConfig+0x172>
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e6:	d10c      	bne.n	8003402 <HAL_RCC_OscConfig+0x15a>
 80033e8:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6c      	ldr	r2, [pc, #432]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a69      	ldr	r2, [pc, #420]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e00b      	b.n	800341a <HAL_RCC_OscConfig+0x172>
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a66      	ldr	r2, [pc, #408]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b64      	ldr	r3, [pc, #400]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a63      	ldr	r2, [pc, #396]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800341a:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	f023 020f 	bic.w	r2, r3, #15
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	495d      	ldr	r1, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 800342a:	4313      	orrs	r3, r2
 800342c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d059      	beq.n	80034ec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fd fee0 	bl	80011fc <HAL_GetTick>
 800343c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003442:	f7fd fedb 	bl	80011fc <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d902      	bls.n	8003458 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	f000 be29 	b.w	80040aa <HAL_RCC_OscConfig+0xe02>
 8003458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800346c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d102      	bne.n	800348a <HAL_RCC_OscConfig+0x1e2>
 8003484:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e015      	b.n	80034b6 <HAL_RCC_OscConfig+0x20e>
 800348a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800348e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800349e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034b2:	4b3b      	ldr	r3, [pc, #236]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034ce:	fab2 f282 	clz	r2, r2
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f042 0220 	orr.w	r2, r2, #32
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f002 021f 	and.w	r2, r2, #31
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f202 	lsl.w	r2, r1, r2
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ab      	beq.n	8003442 <HAL_RCC_OscConfig+0x19a>
 80034ea:	e05c      	b.n	80035a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fe86 	bl	80011fc <HAL_GetTick>
 80034f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f6:	f7fd fe81 	bl	80011fc <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d902      	bls.n	800350c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	f000 bdcf 	b.w	80040aa <HAL_RCC_OscConfig+0xe02>
 800350c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003510:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003520:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_RCC_OscConfig+0x296>
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x2c2>
 800353e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003542:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003556:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800355a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <HAL_RCC_OscConfig+0x2f8>)
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800356e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003572:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003576:	fa92 f2a2 	rbit	r2, r2
 800357a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800357e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ab      	bne.n	80034f6 <HAL_RCC_OscConfig+0x24e>
 800359e:	e002      	b.n	80035a6 <HAL_RCC_OscConfig+0x2fe>
 80035a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 816f 	beq.w	8003894 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035b6:	4bd0      	ldr	r3, [pc, #832]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035c2:	4bcd      	ldr	r3, [pc, #820]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d16c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x400>
 80035ce:	4bca      	ldr	r3, [pc, #808]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d166      	bne.n	80036a8 <HAL_RCC_OscConfig+0x400>
 80035da:	2302      	movs	r3, #2
 80035dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d102      	bne.n	800360a <HAL_RCC_OscConfig+0x362>
 8003604:	4bbc      	ldr	r3, [pc, #752]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e013      	b.n	8003632 <HAL_RCC_OscConfig+0x38a>
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003614:	fa93 f3a3 	rbit	r3, r3
 8003618:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800361c:	2302      	movs	r3, #2
 800361e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003622:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800362e:	4bb2      	ldr	r3, [pc, #712]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2202      	movs	r2, #2
 8003634:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003638:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800363c:	fa92 f2a2 	rbit	r2, r2
 8003640:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003644:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003648:	fab2 f282 	clz	r2, r2
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f042 0220 	orr.w	r2, r2, #32
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	f002 021f 	and.w	r2, r2, #31
 8003658:	2101      	movs	r1, #1
 800365a:	fa01 f202 	lsl.w	r2, r1, r2
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_RCC_OscConfig+0x3cc>
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f000 bd1b 	b.w	80040aa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4ba0      	ldr	r3, [pc, #640]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	21f8      	movs	r1, #248	; 0xf8
 8003684:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800368c:	fa91 f1a1 	rbit	r1, r1
 8003690:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003694:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003698:	fab1 f181 	clz	r1, r1
 800369c:	b2c9      	uxtb	r1, r1
 800369e:	408b      	lsls	r3, r1
 80036a0:	4995      	ldr	r1, [pc, #596]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	e0f5      	b.n	8003894 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8085 	beq.w	80037be <HAL_RCC_OscConfig+0x516>
 80036b4:	2301      	movs	r3, #1
 80036b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	2301      	movs	r3, #1
 80036de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fd fd8c 	bl	80011fc <HAL_GetTick>
 80036e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ea:	f7fd fd87 	bl	80011fc <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d902      	bls.n	8003700 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	f000 bcd5 	b.w	80040aa <HAL_RCC_OscConfig+0xe02>
 8003700:	2302      	movs	r3, #2
 8003702:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003712:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d102      	bne.n	8003730 <HAL_RCC_OscConfig+0x488>
 800372a:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	e013      	b.n	8003758 <HAL_RCC_OscConfig+0x4b0>
 8003730:	2302      	movs	r3, #2
 8003732:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003742:	2302      	movs	r3, #2
 8003744:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003748:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003754:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2202      	movs	r2, #2
 800375a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800375e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003762:	fa92 f2a2 	rbit	r2, r2
 8003766:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800376a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800376e:	fab2 f282 	clz	r2, r2
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f042 0220 	orr.w	r2, r2, #32
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f002 021f 	and.w	r2, r2, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0af      	beq.n	80036ea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b5b      	ldr	r3, [pc, #364]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	21f8      	movs	r1, #248	; 0xf8
 800379a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037a2:	fa91 f1a1 	rbit	r1, r1
 80037a6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037ae:	fab1 f181 	clz	r1, r1
 80037b2:	b2c9      	uxtb	r1, r1
 80037b4:	408b      	lsls	r3, r1
 80037b6:	4950      	ldr	r1, [pc, #320]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e06a      	b.n	8003894 <HAL_RCC_OscConfig+0x5ec>
 80037be:	2301      	movs	r3, #1
 80037c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	461a      	mov	r2, r3
 80037e6:	2300      	movs	r3, #0
 80037e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7fd fd07 	bl	80011fc <HAL_GetTick>
 80037ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f4:	f7fd fd02 	bl	80011fc <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	f000 bc50 	b.w	80040aa <HAL_RCC_OscConfig+0xe02>
 800380a:	2302      	movs	r3, #2
 800380c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800381c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d102      	bne.n	800383a <HAL_RCC_OscConfig+0x592>
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	e013      	b.n	8003862 <HAL_RCC_OscConfig+0x5ba>
 800383a:	2302      	movs	r3, #2
 800383c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800384c:	2302      	movs	r3, #2
 800384e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003852:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_RCC_OscConfig+0x650>)
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2202      	movs	r2, #2
 8003864:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003868:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800386c:	fa92 f2a2 	rbit	r2, r2
 8003870:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003874:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f002 021f 	and.w	r2, r2, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1af      	bne.n	80037f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80da 	beq.w	8003a58 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d069      	beq.n	8003982 <HAL_RCC_OscConfig+0x6da>
 80038ae:	2301      	movs	r3, #1
 80038b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c4:	fab3 f383 	clz	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_OscConfig+0x654>)
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	461a      	mov	r2, r3
 80038d4:	2301      	movs	r3, #1
 80038d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7fd fc90 	bl	80011fc <HAL_GetTick>
 80038dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e0:	e00e      	b.n	8003900 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e2:	f7fd fc8b 	bl	80011fc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d906      	bls.n	8003900 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e3d9      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	10908120 	.word	0x10908120
 8003900:	2302      	movs	r3, #2
 8003902:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003912:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003916:	2202      	movs	r2, #2
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	fa93 f2a3 	rbit	r2, r3
 8003924:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800392e:	2202      	movs	r2, #2
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fa93 f2a3 	rbit	r2, r3
 800393c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003940:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003942:	4ba5      	ldr	r3, [pc, #660]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003946:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800394a:	2102      	movs	r1, #2
 800394c:	6019      	str	r1, [r3, #0]
 800394e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f1a3 	rbit	r1, r3
 8003958:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800395c:	6019      	str	r1, [r3, #0]
  return result;
 800395e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0b0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x63a>
 8003980:	e06a      	b.n	8003a58 <HAL_RCC_OscConfig+0x7b0>
 8003982:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	fa93 f2a3 	rbit	r2, r3
 8003994:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003998:	601a      	str	r2, [r3, #0]
  return result;
 800399a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800399e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b8c      	ldr	r3, [pc, #560]	; (8003bdc <HAL_RCC_OscConfig+0x934>)
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	461a      	mov	r2, r3
 80039b0:	2300      	movs	r3, #0
 80039b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fd fc22 	bl	80011fc <HAL_GetTick>
 80039b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	e009      	b.n	80039d2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039be:	f7fd fc1d 	bl	80011fc <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e36b      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
 80039d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039d6:	2202      	movs	r2, #2
 80039d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	fa93 f2a3 	rbit	r2, r3
 80039e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039ee:	2202      	movs	r2, #2
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a06:	2202      	movs	r2, #2
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a22:	2102      	movs	r1, #2
 8003a24:	6019      	str	r1, [r3, #0]
 8003a26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f1a3 	rbit	r1, r3
 8003a30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a34:	6019      	str	r1, [r3, #0]
  return result;
 8003a36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1b2      	bne.n	80039be <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8158 	beq.w	8003d18 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d112      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	4b57      	ldr	r3, [pc, #348]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4a56      	ldr	r2, [pc, #344]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	61d3      	str	r3, [r2, #28]
 8003a86:	4b54      	ldr	r3, [pc, #336]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <HAL_RCC_OscConfig+0x938>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11a      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aac:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x938>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a4b      	ldr	r2, [pc, #300]	; (8003be0 <HAL_RCC_OscConfig+0x938>)
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fba0 	bl	80011fc <HAL_GetTick>
 8003abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e009      	b.n	8003ad6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fd fb9b 	bl	80011fc <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e2e9      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCC_OscConfig+0x938>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ef      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x852>
 8003aec:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4a39      	ldr	r2, [pc, #228]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6213      	str	r3, [r2, #32]
 8003af8:	e02f      	b.n	8003b5a <HAL_RCC_OscConfig+0x8b2>
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0x876>
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	4a33      	ldr	r2, [pc, #204]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6213      	str	r3, [r2, #32]
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b16:	f023 0304 	bic.w	r3, r3, #4
 8003b1a:	6213      	str	r3, [r2, #32]
 8003b1c:	e01d      	b.n	8003b5a <HAL_RCC_OscConfig+0x8b2>
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x89a>
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6213      	str	r3, [r2, #32]
 8003b34:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6213      	str	r3, [r2, #32]
 8003b40:	e00b      	b.n	8003b5a <HAL_RCC_OscConfig+0x8b2>
 8003b42:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a24      	ldr	r2, [pc, #144]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6213      	str	r3, [r2, #32]
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d06b      	beq.n	8003c3c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fd fb4a 	bl	80011fc <HAL_GetTick>
 8003b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6c:	e00b      	b.n	8003b86 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fb45 	bl	80011fc <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e291      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
 8003b86:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bb4:	601a      	str	r2, [r3, #0]
  return result;
 8003bb6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	fab3 f383 	clz	r3, r3
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f043 0302 	orr.w	r3, r3, #2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d109      	bne.n	8003be4 <HAL_RCC_OscConfig+0x93c>
 8003bd0:	4b01      	ldr	r3, [pc, #4]	; (8003bd8 <HAL_RCC_OscConfig+0x930>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	e014      	b.n	8003c00 <HAL_RCC_OscConfig+0x958>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	10908120 	.word	0x10908120
 8003be0:	40007000 	.word	0x40007000
 8003be4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003be8:	2202      	movs	r2, #2
 8003bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	4bbb      	ldr	r3, [pc, #748]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c04:	2102      	movs	r1, #2
 8003c06:	6011      	str	r1, [r2, #0]
 8003c08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	fa92 f1a2 	rbit	r1, r2
 8003c12:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c16:	6011      	str	r1, [r2, #0]
  return result;
 8003c18:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	fab2 f282 	clz	r2, r2
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f002 021f 	and.w	r2, r2, #31
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f202 	lsl.w	r2, r1, r2
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d099      	beq.n	8003b6e <HAL_RCC_OscConfig+0x8c6>
 8003c3a:	e063      	b.n	8003d04 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fade 	bl	80011fc <HAL_GetTick>
 8003c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c44:	e00b      	b.n	8003c5e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd fad9 	bl	80011fc <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e225      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
 8003c5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c62:	2202      	movs	r2, #2
 8003c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	fa93 f2a3 	rbit	r2, r3
 8003c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	fa93 f2a3 	rbit	r2, r3
 8003c88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c8c:	601a      	str	r2, [r3, #0]
  return result;
 8003c8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f043 0302 	orr.w	r3, r3, #2
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d102      	bne.n	8003cae <HAL_RCC_OscConfig+0xa06>
 8003ca8:	4b90      	ldr	r3, [pc, #576]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	e00d      	b.n	8003cca <HAL_RCC_OscConfig+0xa22>
 8003cae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	4b89      	ldr	r3, [pc, #548]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cce:	2102      	movs	r1, #2
 8003cd0:	6011      	str	r1, [r2, #0]
 8003cd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	fa92 f1a2 	rbit	r1, r2
 8003cdc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003ce0:	6011      	str	r1, [r2, #0]
  return result;
 8003ce2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	fab2 f282 	clz	r2, r2
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f002 021f 	and.w	r2, r2, #31
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1a0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b77      	ldr	r3, [pc, #476]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4a76      	ldr	r2, [pc, #472]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 81c2 	beq.w	80040a8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d24:	4b71      	ldr	r3, [pc, #452]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	f000 819c 	beq.w	800406a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	f040 8114 	bne.w	8003f66 <HAL_RCC_OscConfig+0xcbe>
 8003d3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	fa93 f2a3 	rbit	r2, r3
 8003d52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d56:	601a      	str	r2, [r3, #0]
  return result;
 8003d58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2300      	movs	r3, #0
 8003d72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7fd fa42 	bl	80011fc <HAL_GetTick>
 8003d78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7c:	e009      	b.n	8003d92 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd fa3d 	bl	80011fc <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e18b      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
 8003d92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	fa93 f2a3 	rbit	r2, r3
 8003da6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003daa:	601a      	str	r2, [r3, #0]
  return result;
 8003dac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003db0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d102      	bne.n	8003dcc <HAL_RCC_OscConfig+0xb24>
 8003dc6:	4b49      	ldr	r3, [pc, #292]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	e01b      	b.n	8003e04 <HAL_RCC_OscConfig+0xb5c>
 8003dcc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	fa93 f2a3 	rbit	r2, r3
 8003de0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fa93 f2a3 	rbit	r2, r3
 8003dfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	4b3a      	ldr	r3, [pc, #232]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e0c:	6011      	str	r1, [r2, #0]
 8003e0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	fa92 f1a2 	rbit	r1, r2
 8003e18:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e1c:	6011      	str	r1, [r2, #0]
  return result;
 8003e1e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	fab2 f282 	clz	r2, r2
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	f042 0220 	orr.w	r2, r2, #32
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	f002 021f 	and.w	r2, r2, #31
 8003e34:	2101      	movs	r1, #1
 8003e36:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d19e      	bne.n	8003d7e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	430b      	orrs	r3, r1
 8003e56:	4925      	ldr	r1, [pc, #148]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
 8003e5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	fa93 f2a3 	rbit	r2, r3
 8003e70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e74:	601a      	str	r2, [r3, #0]
  return result;
 8003e76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e7a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2301      	movs	r3, #1
 8003e90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fd f9b3 	bl	80011fc <HAL_GetTick>
 8003e96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e9a:	e009      	b.n	8003eb0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd f9ae 	bl	80011fc <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0fc      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
 8003eb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ec8:	601a      	str	r2, [r3, #0]
  return result;
 8003eca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ece:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xc48>
 8003ee4:	4b01      	ldr	r3, [pc, #4]	; (8003eec <HAL_RCC_OscConfig+0xc44>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e01e      	b.n	8003f28 <HAL_RCC_OscConfig+0xc80>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ef4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fa93 f2a3 	rbit	r2, r3
 8003f04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fa93 f2a3 	rbit	r2, r3
 8003f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <HAL_RCC_OscConfig+0xe0c>)
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	fa92 f1a2 	rbit	r1, r2
 8003f3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f40:	6011      	str	r1, [r2, #0]
  return result;
 8003f42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f042 0220 	orr.w	r2, r2, #32
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f002 021f 	and.w	r2, r2, #31
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d09b      	beq.n	8003e9c <HAL_RCC_OscConfig+0xbf4>
 8003f64:	e0a0      	b.n	80040a8 <HAL_RCC_OscConfig+0xe00>
 8003f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	fa93 f2a3 	rbit	r2, r3
 8003f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7e:	601a      	str	r2, [r3, #0]
  return result;
 8003f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f92e 	bl	80011fc <HAL_GetTick>
 8003fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa4:	e009      	b.n	8003fba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fd f929 	bl	80011fc <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e077      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
 8003fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	fa93 f2a3 	rbit	r2, r3
 8003fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd2:	601a      	str	r2, [r3, #0]
  return result;
 8003fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d102      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xd4c>
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_RCC_OscConfig+0xe0c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	e01b      	b.n	800402c <HAL_RCC_OscConfig+0xd84>
 8003ff4:	f107 0320 	add.w	r3, r7, #32
 8003ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f107 0320 	add.w	r3, r7, #32
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	fa93 f2a3 	rbit	r2, r3
 8004008:	f107 031c 	add.w	r3, r7, #28
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f107 0318 	add.w	r3, r7, #24
 8004012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	4b22      	ldr	r3, [pc, #136]	; (80040b4 <HAL_RCC_OscConfig+0xe0c>)
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f107 0210 	add.w	r2, r7, #16
 8004030:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	f107 0210 	add.w	r2, r7, #16
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	fa92 f1a2 	rbit	r1, r2
 8004040:	f107 020c 	add.w	r2, r7, #12
 8004044:	6011      	str	r1, [r2, #0]
  return result;
 8004046:	f107 020c 	add.w	r2, r7, #12
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	fab2 f282 	clz	r2, r2
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	f042 0220 	orr.w	r2, r2, #32
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	f002 021f 	and.w	r2, r2, #31
 800405c:	2101      	movs	r1, #1
 800405e:	fa01 f202 	lsl.w	r2, r1, r2
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d19e      	bne.n	8003fa6 <HAL_RCC_OscConfig+0xcfe>
 8004068:	e01e      	b.n	80040a8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800406a:	1d3b      	adds	r3, r7, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e018      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_RCC_OscConfig+0xe0c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004080:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	429a      	cmp	r2, r3
 8004090:	d108      	bne.n	80040a4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004092:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004096:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b09e      	sub	sp, #120	; 0x78
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e162      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d0:	4b90      	ldr	r3, [pc, #576]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d910      	bls.n	8004100 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 0207 	bic.w	r2, r3, #7
 80040e6:	498b      	ldr	r1, [pc, #556]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b89      	ldr	r3, [pc, #548]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e14a      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b82      	ldr	r3, [pc, #520]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	497f      	ldr	r1, [pc, #508]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80dc 	beq.w	80042e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d13c      	bne.n	80041ae <HAL_RCC_ClockConfig+0xf6>
 8004134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004138:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <HAL_RCC_ClockConfig+0xa6>
 8004158:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	e00f      	b.n	800417e <HAL_RCC_ClockConfig+0xc6>
 800415e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004162:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	667b      	str	r3, [r7, #100]	; 0x64
 800416c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004170:	663b      	str	r3, [r7, #96]	; 0x60
 8004172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417a:	4b67      	ldr	r3, [pc, #412]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004182:	65ba      	str	r2, [r7, #88]	; 0x58
 8004184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004186:	fa92 f2a2 	rbit	r2, r2
 800418a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800418c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800418e:	fab2 f282 	clz	r2, r2
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	f042 0220 	orr.w	r2, r2, #32
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	f002 021f 	and.w	r2, r2, #31
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d17b      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0f3      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d13c      	bne.n	8004230 <HAL_RCC_ClockConfig+0x178>
 80041b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x128>
 80041da:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e00f      	b.n	8004200 <HAL_RCC_ClockConfig+0x148>
 80041e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	647b      	str	r3, [r7, #68]	; 0x44
 80041ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
 80041f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fc:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004204:	63ba      	str	r2, [r7, #56]	; 0x38
 8004206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004208:	fa92 f2a2 	rbit	r2, r2
 800420c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800420e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004210:	fab2 f282 	clz	r2, r2
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f042 0220 	orr.w	r2, r2, #32
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f002 021f 	and.w	r2, r2, #31
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f202 	lsl.w	r2, r1, r2
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d13a      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b2      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
 8004230:	2302      	movs	r3, #2
 8004232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d102      	bne.n	8004258 <HAL_RCC_ClockConfig+0x1a0>
 8004252:	4b31      	ldr	r3, [pc, #196]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	e00d      	b.n	8004274 <HAL_RCC_ClockConfig+0x1bc>
 8004258:	2302      	movs	r3, #2
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	2302      	movs	r3, #2
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	4b29      	ldr	r3, [pc, #164]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2202      	movs	r2, #2
 8004276:	61ba      	str	r2, [r7, #24]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	fa92 f2a2 	rbit	r2, r2
 800427e:	617a      	str	r2, [r7, #20]
  return result;
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	fab2 f282 	clz	r2, r2
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	f042 0220 	orr.w	r2, r2, #32
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f002 021f 	and.w	r2, r2, #31
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e079      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	491a      	ldr	r1, [pc, #104]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fc ffa2 	bl	80011fc <HAL_GetTick>
 80042b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fc ff9e 	bl	80011fc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e061      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d214      	bcs.n	800431c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	4906      	ldr	r1, [pc, #24]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <HAL_RCC_ClockConfig+0x25c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e040      	b.n	8004396 <HAL_RCC_ClockConfig+0x2de>
 8004314:	40022000 	.word	0x40022000
 8004318:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	491a      	ldr	r1, [pc, #104]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4912      	ldr	r1, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800435a:	f000 f829 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800435e:	4601      	mov	r1, r0
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004368:	22f0      	movs	r2, #240	; 0xf0
 800436a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	fa92 f2a2 	rbit	r2, r2
 8004372:	60fa      	str	r2, [r7, #12]
  return result;
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	fab2 f282 	clz	r2, r2
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	40d3      	lsrs	r3, r2
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x2ec>)
 8004380:	5cd3      	ldrb	r3, [r2, r3]
 8004382:	fa21 f303 	lsr.w	r3, r1, r3
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_RCC_ClockConfig+0x2f0>)
 8004388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_RCC_ClockConfig+0x2f4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fc fef0 	bl	8001174 <HAL_InitTick>
  
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3778      	adds	r7, #120	; 0x78
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	080059f4 	.word	0x080059f4
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b08b      	sub	sp, #44	; 0x2c
 80043b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x30>
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x36>
 80043de:	e03c      	b.n	800445a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043e2:	623b      	str	r3, [r7, #32]
      break;
 80043e4:	e03c      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	fa92 f2a2 	rbit	r2, r2
 80043f8:	607a      	str	r2, [r7, #4]
  return result;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	fab2 f282 	clz	r2, r2
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	40d3      	lsrs	r3, r2
 8004404:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc0>)
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	220f      	movs	r2, #15
 8004414:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	fa92 f2a2 	rbit	r2, r2
 800441c:	60fa      	str	r2, [r7, #12]
  return result;
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	40d3      	lsrs	r3, r2
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <HAL_RCC_GetSysClockFreq+0xcc>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004438:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	e004      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <HAL_RCC_GetSysClockFreq+0xd0>)
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	623b      	str	r3, [r7, #32]
      break;
 8004458:	e002      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800445c:	623b      	str	r3, [r7, #32]
      break;
 800445e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004460:	6a3b      	ldr	r3, [r7, #32]
}
 8004462:	4618      	mov	r0, r3
 8004464:	372c      	adds	r7, #44	; 0x2c
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	007a1200 	.word	0x007a1200
 8004478:	08005a0c 	.word	0x08005a0c
 800447c:	08005a1c 	.word	0x08005a1c
 8004480:	003d0900 	.word	0x003d0900

08004484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000000 	.word	0x20000000

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044a2:	f7ff ffef 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a6:	4601      	mov	r1, r0
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	fa92 f2a2 	rbit	r2, r2
 80044bc:	603a      	str	r2, [r7, #0]
  return result;
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	fab2 f282 	clz	r2, r2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	40d3      	lsrs	r3, r2
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	08005a04 	.word	0x08005a04

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044e6:	f7ff ffcd 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044ea:	4601      	mov	r1, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80044f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80044f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	fa92 f2a2 	rbit	r2, r2
 8004500:	603a      	str	r2, [r7, #0]
  return result;
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	fab2 f282 	clz	r2, r2
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	40d3      	lsrs	r3, r2
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x40>)
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000
 8004520:	08005a04 	.word	0x08005a04

08004524 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b092      	sub	sp, #72	; 0x48
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80d4 	beq.w	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004548:	4b4e      	ldr	r3, [pc, #312]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10e      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4a4a      	ldr	r2, [pc, #296]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455e:	61d3      	str	r3, [r2, #28]
 8004560:	4b48      	ldr	r3, [pc, #288]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b45      	ldr	r3, [pc, #276]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b42      	ldr	r3, [pc, #264]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a41      	ldr	r2, [pc, #260]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fc fe37 	bl	80011fc <HAL_GetTick>
 800458e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fc fe33 	bl	80011fc <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	; 0x64
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e169      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b38      	ldr	r3, [pc, #224]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045b0:	4b34      	ldr	r3, [pc, #208]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8084 	beq.w	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d07c      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045d0:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	461a      	mov	r2, r3
 80045fa:	2301      	movs	r3, #1
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04b      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fc fde3 	bl	80011fc <HAL_GetTick>
 8004636:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	e00a      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fc fddf 	bl	80011fc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e113      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004650:	2302      	movs	r3, #2
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
 800465c:	2302      	movs	r3, #2
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	61fb      	str	r3, [r7, #28]
  return result;
 8004668:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d108      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800467e:	4b01      	ldr	r3, [pc, #4]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	e00d      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004684:	40021000 	.word	0x40021000
 8004688:	40007000 	.word	0x40007000
 800468c:	10908100 	.word	0x10908100
 8004690:	2302      	movs	r3, #2
 8004692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	4b78      	ldr	r3, [pc, #480]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2202      	movs	r2, #2
 80046a2:	613a      	str	r2, [r7, #16]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	fa92 f2a2 	rbit	r2, r2
 80046aa:	60fa      	str	r2, [r7, #12]
  return result;
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fab2 f282 	clz	r2, r2
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	f002 021f 	and.w	r2, r2, #31
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f202 	lsl.w	r2, r1, r2
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0b7      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046ca:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	496a      	ldr	r1, [pc, #424]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046fc:	4b60      	ldr	r3, [pc, #384]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f023 0203 	bic.w	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	495d      	ldr	r1, [pc, #372]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800471a:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4956      	ldr	r1, [pc, #344]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004738:	4b51      	ldr	r3, [pc, #324]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	494e      	ldr	r1, [pc, #312]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f023 0210 	bic.w	r2, r3, #16
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4947      	ldr	r1, [pc, #284]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004764:	4313      	orrs	r3, r2
 8004766:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004774:	4b42      	ldr	r3, [pc, #264]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	493f      	ldr	r1, [pc, #252]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004792:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f023 0220 	bic.w	r2, r3, #32
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	4938      	ldr	r1, [pc, #224]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047b0:	4b33      	ldr	r3, [pc, #204]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	4930      	ldr	r1, [pc, #192]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ce:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	4929      	ldr	r1, [pc, #164]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4921      	ldr	r1, [pc, #132]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	491a      	ldr	r1, [pc, #104]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	4912      	ldr	r1, [pc, #72]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	490b      	ldr	r1, [pc, #44]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004870:	4903      	ldr	r1, [pc, #12]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3748      	adds	r7, #72	; 0x48
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e09d      	b.n	80049d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d108      	bne.n	80048b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a6:	d009      	beq.n	80048bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	61da      	str	r2, [r3, #28]
 80048ae:	e005      	b.n	80048bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc faea 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048fc:	d902      	bls.n	8004904 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e002      	b.n	800490a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004908:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004912:	d007      	beq.n	8004924 <HAL_SPI_Init+0xa0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800491c:	d002      	beq.n	8004924 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	ea42 0103 	orr.w	r1, r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	f003 0204 	and.w	r2, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049a0:	ea42 0103 	orr.w	r1, r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e040      	b.n	8004a6e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fc fa99 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2224      	movs	r2, #36	; 0x24
 8004a06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa89 	bl	8004f30 <UART_SetConfig>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e022      	b.n	8004a6e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fc51 	bl	80052d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fcd8 	bl	800541c <UART_CheckIdleState>
 8004a6c:	4603      	mov	r3, r0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	4613      	mov	r3, r2
 8004a82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d12c      	bne.n	8004ae6 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_UART_Receive_IT+0x22>
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e025      	b.n	8004ae8 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Receive_IT+0x34>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e01e      	b.n	8004ae8 <HAL_UART_Receive_IT+0x72>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ad4:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fd63 	bl	80055a8 <UART_Start_Receive_IT>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	e000      	b.n	8004ae8 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d113      	bne.n	8004b48 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 81cc 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
      }
      return;
 8004b46:	e1c6      	b.n	8004ed6 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80e3 	beq.w	8004d16 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4ba5      	ldr	r3, [pc, #660]	; (8004df4 <HAL_UART_IRQHandler+0x304>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80d8 	beq.w	8004d16 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d010      	beq.n	8004b92 <HAL_UART_IRQHandler+0xa2>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d010      	beq.n	8004bbe <HAL_UART_IRQHandler+0xce>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2202      	movs	r2, #2
 8004bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d010      	beq.n	8004bea <HAL_UART_IRQHandler+0xfa>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be0:	f043 0202 	orr.w	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c16:	f043 0208 	orr.w	r2, r3, #8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d011      	beq.n	8004c4e <HAL_UART_IRQHandler+0x15e>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00c      	beq.n	8004c4e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8140 	beq.w	8004eda <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c84:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d004      	beq.n	8004c9e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d031      	beq.n	8004d02 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fcf8 	bl	8005694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d123      	bne.n	8004cfa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d013      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a4a      	ldr	r2, [pc, #296]	; (8004df8 <HAL_UART_IRQHandler+0x308>)
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fef8 	bl	8002acc <HAL_DMA_Abort_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d017      	beq.n	8004d12 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	e00f      	b.n	8004d12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f906 	bl	8004f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e00b      	b.n	8004d12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f902 	bl	8004f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	e007      	b.n	8004d12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8fe 	bl	8004f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004d10:	e0e3      	b.n	8004eda <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d12:	bf00      	nop
    return;
 8004d14:	e0e1      	b.n	8004eda <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	f040 80a7 	bne.w	8004e6e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80a1 	beq.w	8004e6e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 809b 	beq.w	8004e6e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d156      	bne.n	8004dfc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004d58:	893b      	ldrh	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80bf 	beq.w	8004ede <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d66:	893a      	ldrh	r2, [r7, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	f080 80b8 	bcs.w	8004ede <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	893a      	ldrh	r2, [r7, #8]
 8004d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d02a      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0210 	bic.w	r2, r2, #16
 8004dca:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fd fe42 	bl	8002a5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f894 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004df0:	e075      	b.n	8004ede <HAL_UART_IRQHandler+0x3ee>
 8004df2:	bf00      	nop
 8004df4:	04000120 	.word	0x04000120
 8004df8:	080056f3 	.word	0x080056f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d063      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d060      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0210 	bic.w	r2, r2, #16
 8004e60:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f856 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e6c:	e039      	b.n	8004ee2 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <HAL_UART_IRQHandler+0x3a4>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fd33 	bl	80058f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e92:	e029      	b.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01a      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
    }
    return;
 8004eb8:	e015      	b.n	8004ee6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d011      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fc25 	bl	800571e <UART_EndTransmit_IT>
    return;
 8004ed4:	e008      	b.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004ed6:	bf00      	nop
 8004ed8:	e006      	b.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004eda:	bf00      	nop
 8004edc:	e004      	b.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004ede:	bf00      	nop
 8004ee0:	e002      	b.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004ee6:	bf00      	nop
  }

}
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop

08004ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f5e:	f023 030c 	bic.w	r3, r3, #12
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4aae      	ldr	r2, [pc, #696]	; (8005264 <UART_SetConfig+0x334>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d120      	bne.n	8004ff2 <UART_SetConfig+0xc2>
 8004fb0:	4bad      	ldr	r3, [pc, #692]	; (8005268 <UART_SetConfig+0x338>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d817      	bhi.n	8004fec <UART_SetConfig+0xbc>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x94>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fd5 	.word	0x08004fd5
 8004fc8:	08004fe1 	.word	0x08004fe1
 8004fcc:	08004fe7 	.word	0x08004fe7
 8004fd0:	08004fdb 	.word	0x08004fdb
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e0b5      	b.n	8005146 <UART_SetConfig+0x216>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e0b2      	b.n	8005146 <UART_SetConfig+0x216>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e0af      	b.n	8005146 <UART_SetConfig+0x216>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e0ac      	b.n	8005146 <UART_SetConfig+0x216>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e0a9      	b.n	8005146 <UART_SetConfig+0x216>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a9d      	ldr	r2, [pc, #628]	; (800526c <UART_SetConfig+0x33c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d124      	bne.n	8005046 <UART_SetConfig+0x116>
 8004ffc:	4b9a      	ldr	r3, [pc, #616]	; (8005268 <UART_SetConfig+0x338>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005004:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005008:	d011      	beq.n	800502e <UART_SetConfig+0xfe>
 800500a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800500e:	d817      	bhi.n	8005040 <UART_SetConfig+0x110>
 8005010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005014:	d011      	beq.n	800503a <UART_SetConfig+0x10a>
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501a:	d811      	bhi.n	8005040 <UART_SetConfig+0x110>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <UART_SetConfig+0xf8>
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d006      	beq.n	8005034 <UART_SetConfig+0x104>
 8005026:	e00b      	b.n	8005040 <UART_SetConfig+0x110>
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e08b      	b.n	8005146 <UART_SetConfig+0x216>
 800502e:	2302      	movs	r3, #2
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e088      	b.n	8005146 <UART_SetConfig+0x216>
 8005034:	2304      	movs	r3, #4
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e085      	b.n	8005146 <UART_SetConfig+0x216>
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e082      	b.n	8005146 <UART_SetConfig+0x216>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e07f      	b.n	8005146 <UART_SetConfig+0x216>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a89      	ldr	r2, [pc, #548]	; (8005270 <UART_SetConfig+0x340>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d124      	bne.n	800509a <UART_SetConfig+0x16a>
 8005050:	4b85      	ldr	r3, [pc, #532]	; (8005268 <UART_SetConfig+0x338>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005058:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800505c:	d011      	beq.n	8005082 <UART_SetConfig+0x152>
 800505e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005062:	d817      	bhi.n	8005094 <UART_SetConfig+0x164>
 8005064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005068:	d011      	beq.n	800508e <UART_SetConfig+0x15e>
 800506a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800506e:	d811      	bhi.n	8005094 <UART_SetConfig+0x164>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x14c>
 8005074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005078:	d006      	beq.n	8005088 <UART_SetConfig+0x158>
 800507a:	e00b      	b.n	8005094 <UART_SetConfig+0x164>
 800507c:	2300      	movs	r3, #0
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e061      	b.n	8005146 <UART_SetConfig+0x216>
 8005082:	2302      	movs	r3, #2
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e05e      	b.n	8005146 <UART_SetConfig+0x216>
 8005088:	2304      	movs	r3, #4
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e05b      	b.n	8005146 <UART_SetConfig+0x216>
 800508e:	2308      	movs	r3, #8
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e058      	b.n	8005146 <UART_SetConfig+0x216>
 8005094:	2310      	movs	r3, #16
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e055      	b.n	8005146 <UART_SetConfig+0x216>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a75      	ldr	r2, [pc, #468]	; (8005274 <UART_SetConfig+0x344>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d124      	bne.n	80050ee <UART_SetConfig+0x1be>
 80050a4:	4b70      	ldr	r3, [pc, #448]	; (8005268 <UART_SetConfig+0x338>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80050ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050b0:	d011      	beq.n	80050d6 <UART_SetConfig+0x1a6>
 80050b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050b6:	d817      	bhi.n	80050e8 <UART_SetConfig+0x1b8>
 80050b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050bc:	d011      	beq.n	80050e2 <UART_SetConfig+0x1b2>
 80050be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050c2:	d811      	bhi.n	80050e8 <UART_SetConfig+0x1b8>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <UART_SetConfig+0x1a0>
 80050c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050cc:	d006      	beq.n	80050dc <UART_SetConfig+0x1ac>
 80050ce:	e00b      	b.n	80050e8 <UART_SetConfig+0x1b8>
 80050d0:	2300      	movs	r3, #0
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e037      	b.n	8005146 <UART_SetConfig+0x216>
 80050d6:	2302      	movs	r3, #2
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e034      	b.n	8005146 <UART_SetConfig+0x216>
 80050dc:	2304      	movs	r3, #4
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e031      	b.n	8005146 <UART_SetConfig+0x216>
 80050e2:	2308      	movs	r3, #8
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e02e      	b.n	8005146 <UART_SetConfig+0x216>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e02b      	b.n	8005146 <UART_SetConfig+0x216>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a61      	ldr	r2, [pc, #388]	; (8005278 <UART_SetConfig+0x348>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d124      	bne.n	8005142 <UART_SetConfig+0x212>
 80050f8:	4b5b      	ldr	r3, [pc, #364]	; (8005268 <UART_SetConfig+0x338>)
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005100:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005104:	d011      	beq.n	800512a <UART_SetConfig+0x1fa>
 8005106:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800510a:	d817      	bhi.n	800513c <UART_SetConfig+0x20c>
 800510c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005110:	d011      	beq.n	8005136 <UART_SetConfig+0x206>
 8005112:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005116:	d811      	bhi.n	800513c <UART_SetConfig+0x20c>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <UART_SetConfig+0x1f4>
 800511c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005120:	d006      	beq.n	8005130 <UART_SetConfig+0x200>
 8005122:	e00b      	b.n	800513c <UART_SetConfig+0x20c>
 8005124:	2300      	movs	r3, #0
 8005126:	77fb      	strb	r3, [r7, #31]
 8005128:	e00d      	b.n	8005146 <UART_SetConfig+0x216>
 800512a:	2302      	movs	r3, #2
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e00a      	b.n	8005146 <UART_SetConfig+0x216>
 8005130:	2304      	movs	r3, #4
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e007      	b.n	8005146 <UART_SetConfig+0x216>
 8005136:	2308      	movs	r3, #8
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e004      	b.n	8005146 <UART_SetConfig+0x216>
 800513c:	2310      	movs	r3, #16
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e001      	b.n	8005146 <UART_SetConfig+0x216>
 8005142:	2310      	movs	r3, #16
 8005144:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514e:	d15c      	bne.n	800520a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d827      	bhi.n	80051a6 <UART_SetConfig+0x276>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <UART_SetConfig+0x22c>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005181 	.word	0x08005181
 8005160:	08005189 	.word	0x08005189
 8005164:	08005191 	.word	0x08005191
 8005168:	080051a7 	.word	0x080051a7
 800516c:	08005197 	.word	0x08005197
 8005170:	080051a7 	.word	0x080051a7
 8005174:	080051a7 	.word	0x080051a7
 8005178:	080051a7 	.word	0x080051a7
 800517c:	0800519f 	.word	0x0800519f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005180:	f7ff f98c 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005184:	61b8      	str	r0, [r7, #24]
        break;
 8005186:	e013      	b.n	80051b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005188:	f7ff f9aa 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 800518c:	61b8      	str	r0, [r7, #24]
        break;
 800518e:	e00f      	b.n	80051b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005190:	4b3a      	ldr	r3, [pc, #232]	; (800527c <UART_SetConfig+0x34c>)
 8005192:	61bb      	str	r3, [r7, #24]
        break;
 8005194:	e00c      	b.n	80051b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005196:	f7ff f90b 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800519a:	61b8      	str	r0, [r7, #24]
        break;
 800519c:	e008      	b.n	80051b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a2:	61bb      	str	r3, [r7, #24]
        break;
 80051a4:	e004      	b.n	80051b0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	77bb      	strb	r3, [r7, #30]
        break;
 80051ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8085 	beq.w	80052c2 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	005a      	lsls	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	441a      	add	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	d916      	bls.n	8005204 <UART_SetConfig+0x2d4>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051dc:	d212      	bcs.n	8005204 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f023 030f 	bic.w	r3, r3, #15
 80051e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	89fa      	ldrh	r2, [r7, #14]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e05e      	b.n	80052c2 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	77bb      	strb	r3, [r7, #30]
 8005208:	e05b      	b.n	80052c2 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800520a:	7ffb      	ldrb	r3, [r7, #31]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d837      	bhi.n	8005280 <UART_SetConfig+0x350>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <UART_SetConfig+0x2e8>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005245 	.word	0x08005245
 8005220:	0800524d 	.word	0x0800524d
 8005224:	08005281 	.word	0x08005281
 8005228:	08005253 	.word	0x08005253
 800522c:	08005281 	.word	0x08005281
 8005230:	08005281 	.word	0x08005281
 8005234:	08005281 	.word	0x08005281
 8005238:	0800525b 	.word	0x0800525b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523c:	f7ff f92e 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005240:	61b8      	str	r0, [r7, #24]
        break;
 8005242:	e022      	b.n	800528a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005244:	f7ff f94c 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8005248:	61b8      	str	r0, [r7, #24]
        break;
 800524a:	e01e      	b.n	800528a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <UART_SetConfig+0x34c>)
 800524e:	61bb      	str	r3, [r7, #24]
        break;
 8005250:	e01b      	b.n	800528a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005252:	f7ff f8ad 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005256:	61b8      	str	r0, [r7, #24]
        break;
 8005258:	e017      	b.n	800528a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525e:	61bb      	str	r3, [r7, #24]
        break;
 8005260:	e013      	b.n	800528a <UART_SetConfig+0x35a>
 8005262:	bf00      	nop
 8005264:	40013800 	.word	0x40013800
 8005268:	40021000 	.word	0x40021000
 800526c:	40004400 	.word	0x40004400
 8005270:	40004800 	.word	0x40004800
 8005274:	40004c00 	.word	0x40004c00
 8005278:	40005000 	.word	0x40005000
 800527c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	77bb      	strb	r3, [r7, #30]
        break;
 8005288:	bf00      	nop
    }

    if (pclk != 0U)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	085a      	lsrs	r2, r3, #1
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b0f      	cmp	r3, #15
 80052aa:	d908      	bls.n	80052be <UART_SetConfig+0x38e>
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d204      	bcs.n	80052be <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	e001      	b.n	80052c2 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01a      	beq.n	80053ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d6:	d10a      	bne.n	80053ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af02      	add	r7, sp, #8
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800542c:	f7fb fee6 	bl	80011fc <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b08      	cmp	r3, #8
 800543e:	d10e      	bne.n	800545e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f82d 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e023      	b.n	80054a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d10e      	bne.n	800548a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f817 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e00d      	b.n	80054a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054be:	e05e      	b.n	800557e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c6:	d05a      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fb fe98 	bl	80011fc <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <UART_WaitOnFlagUntilTimeout+0x30>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11b      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e043      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02c      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005532:	d124      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800553c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800554c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e00f      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4013      	ands	r3, r2
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	429a      	cmp	r2, r3
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	429a      	cmp	r2, r3
 800559a:	d091      	beq.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d10e      	bne.n	80055fa <UART_Start_Receive_IT+0x52>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <UART_Start_Receive_IT+0x48>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ee:	e01a      	b.n	8005626 <UART_Start_Receive_IT+0x7e>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	22ff      	movs	r2, #255	; 0xff
 80055f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f8:	e015      	b.n	8005626 <UART_Start_Receive_IT+0x7e>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10d      	bne.n	800561e <UART_Start_Receive_IT+0x76>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d104      	bne.n	8005614 <UART_Start_Receive_IT+0x6c>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005612:	e008      	b.n	8005626 <UART_Start_Receive_IT+0x7e>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	227f      	movs	r2, #127	; 0x7f
 8005618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800561c:	e003      	b.n	8005626 <UART_Start_Receive_IT+0x7e>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2222      	movs	r2, #34	; 0x22
 8005632:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564c:	d107      	bne.n	800565e <UART_Start_Receive_IT+0xb6>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a0c      	ldr	r2, [pc, #48]	; (800568c <UART_Start_Receive_IT+0xe4>)
 800565a:	665a      	str	r2, [r3, #100]	; 0x64
 800565c:	e002      	b.n	8005664 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a0b      	ldr	r2, [pc, #44]	; (8005690 <UART_Start_Receive_IT+0xe8>)
 8005662:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800567a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	08005825 	.word	0x08005825
 8005690:	08005751 	.word	0x08005751

08005694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d107      	bne.n	80056d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0210 	bic.w	r2, r2, #16
 80056d2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fbf7 	bl	8004f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005734:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fbd4 	bl	8004ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800575e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005764:	2b22      	cmp	r3, #34	; 0x22
 8005766:	d151      	bne.n	800580c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800576e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005770:	89bb      	ldrh	r3, [r7, #12]
 8005772:	b2d9      	uxtb	r1, r3
 8005774:	89fb      	ldrh	r3, [r7, #14]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	400a      	ands	r2, r1
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d138      	bne.n	800581c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057b8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10f      	bne.n	80057fe <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0210 	bic.w	r2, r2, #16
 80057ec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fb8e 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
 80057fc:	e002      	b.n	8005804 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fb f846 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800580a:	e007      	b.n	800581c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005832:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005838:	2b22      	cmp	r3, #34	; 0x22
 800583a:	d151      	bne.n	80058e0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005842:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005848:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800584a:	89ba      	ldrh	r2, [r7, #12]
 800584c:	89fb      	ldrh	r3, [r7, #14]
 800584e:	4013      	ands	r3, r2
 8005850:	b29a      	uxth	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d138      	bne.n	80058f0 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800588c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d10f      	bne.n	80058d2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0210 	bic.w	r2, r2, #16
 80058c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff fb24 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
 80058d0:	e002      	b.n	80058d8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fa ffdc 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058de:	e007      	b.n	80058f0 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0208 	orr.w	r2, r2, #8
 80058ee:	619a      	str	r2, [r3, #24]
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005914:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005918:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	b29b      	uxth	r3, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	b29b      	uxth	r3, r3
 800592a:	4013      	ands	r3, r2
 800592c:	b29a      	uxth	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005942:	b084      	sub	sp, #16
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	f107 0014 	add.w	r0, r7, #20
 8005950:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	b004      	add	sp, #16
 8005982:	4770      	bx	lr

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	; (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	; (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	; (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	; (80059c8 <__libc_init_array+0x44>)
 8005998:	f000 f820 	bl	80059dc <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08005a2c 	.word	0x08005a2c
 80059c0:	08005a2c 	.word	0x08005a2c
 80059c4:	08005a2c 	.word	0x08005a2c
 80059c8:	08005a30 	.word	0x08005a30

080059cc <memset>:
 80059cc:	4402      	add	r2, r0
 80059ce:	4603      	mov	r3, r0
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d100      	bne.n	80059d6 <memset+0xa>
 80059d4:	4770      	bx	lr
 80059d6:	f803 1b01 	strb.w	r1, [r3], #1
 80059da:	e7f9      	b.n	80059d0 <memset+0x4>

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
