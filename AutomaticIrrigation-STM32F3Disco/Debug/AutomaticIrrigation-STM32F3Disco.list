
AutomaticIrrigation-STM32F3Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a0  080053a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053a0  080053a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053a0  080053a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  2000000c  080053b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  080053b4  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e5d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a3  00000000  00000000  00033e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00036840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000378d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e858  00000000  00000000  00038858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014913  00000000  00000000  000570b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8adb  00000000  00000000  0006b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012449e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ec  00000000  00000000  001244f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005350 	.word	0x08005350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005350 	.word	0x08005350

080001c8 <HAL_ADC_ConvCpltCallback>:
uint8_t uartRxData = 0x00;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80001d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d4:	4807      	ldr	r0, [pc, #28]	; (80001f4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80001d6:	f002 fb03 	bl	80027e0 <HAL_GPIO_TogglePin>
	adcData = HAL_ADC_GetValue(hadc);
 80001da:	6878      	ldr	r0, [r7, #4]
 80001dc:	f001 f808 	bl	80011f0 <HAL_ADC_GetValue>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <HAL_ADC_ConvCpltCallback+0x30>)
 80001e4:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start_IT(hadc);
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f000 fec2 	bl	8000f70 <HAL_ADC_Start_IT>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	48001000 	.word	0x48001000
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	if (uartRxData == 0xFF)
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <HAL_UART_RxCpltCallback+0x2c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2bff      	cmp	r3, #255	; 0xff
 800020a:	d104      	bne.n	8000216 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 800020c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <HAL_UART_RxCpltCallback+0x30>)
 8000212:	f002 fae5 	bl	80027e0 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, &uartRxData, 1/*sizeof(uint8_t)*/);
 8000216:	2201      	movs	r2, #1
 8000218:	4903      	ldr	r1, [pc, #12]	; (8000228 <HAL_UART_RxCpltCallback+0x2c>)
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f004 f8e5 	bl	80043ea <HAL_UART_Receive_IT>
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000002c 	.word	0x2000002c
 800022c:	48001000 	.word	0x48001000

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fc42 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f81c 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f9c0 	bl	80005c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000240:	f000 f8ee 	bl	8000420 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000244:	f000 f92c 	bl	80004a0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000248:	f000 f998 	bl	800057c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800024c:	f000 f878 	bl	8000340 <MX_ADC1_Init>
  MX_UART4_Init();
 8000250:	f000 f964 	bl	800051c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <main+0x38>)
 8000256:	f000 fe8b 	bl	8000f70 <HAL_ADC_Start_IT>
  HAL_UART_Receive_IT(&huart4, &uartRxData, 1/*sizeof(uint8_t)*/);
 800025a:	2201      	movs	r2, #1
 800025c:	4903      	ldr	r1, [pc, #12]	; (800026c <main+0x3c>)
 800025e:	4804      	ldr	r0, [pc, #16]	; (8000270 <main+0x40>)
 8000260:	f004 f8c3 	bl	80043ea <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x34>
 8000266:	bf00      	nop
 8000268:	2000007c 	.word	0x2000007c
 800026c:	2000002c 	.word	0x2000002c
 8000270:	200000cc 	.word	0x200000cc

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b09e      	sub	sp, #120	; 0x78
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f005 f85c 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	223c      	movs	r2, #60	; 0x3c
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f005 f84e 	bl	8005340 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002a4:	2303      	movs	r3, #3
 80002a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fca4 	bl	8002c1c <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002da:	f000 f9f1 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 fb96 	bl	8003a2c <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000306:	f000 f9db 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <SystemClock_Config+0xc8>)
 800030c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000316:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800031c:	2300      	movs	r3, #0
 800031e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	463b      	mov	r3, r7
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fdb8 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800032e:	f000 f9c7 	bl	80006c0 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3778      	adds	r7, #120	; 0x78
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	000200a8 	.word	0x000200a8

08000340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08a      	sub	sp, #40	; 0x28
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000346:	f107 031c 	add.w	r3, r7, #28
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
 8000360:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <MX_ADC1_Init+0xdc>)
 8000364:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000368:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800036a:	4b2c      	ldr	r3, [pc, #176]	; (800041c <MX_ADC1_Init+0xdc>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000370:	4b2a      	ldr	r3, [pc, #168]	; (800041c <MX_ADC1_Init+0xdc>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000376:	4b29      	ldr	r3, [pc, #164]	; (800041c <MX_ADC1_Init+0xdc>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800037c:	4b27      	ldr	r3, [pc, #156]	; (800041c <MX_ADC1_Init+0xdc>)
 800037e:	2200      	movs	r2, #0
 8000380:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000382:	4b26      	ldr	r3, [pc, #152]	; (800041c <MX_ADC1_Init+0xdc>)
 8000384:	2200      	movs	r2, #0
 8000386:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <MX_ADC1_Init+0xdc>)
 800038c:	2200      	movs	r2, #0
 800038e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000390:	4b22      	ldr	r3, [pc, #136]	; (800041c <MX_ADC1_Init+0xdc>)
 8000392:	2201      	movs	r2, #1
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000396:	4b21      	ldr	r3, [pc, #132]	; (800041c <MX_ADC1_Init+0xdc>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <MX_ADC1_Init+0xdc>)
 800039e:	2201      	movs	r2, #1
 80003a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <MX_ADC1_Init+0xdc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003aa:	4b1c      	ldr	r3, [pc, #112]	; (800041c <MX_ADC1_Init+0xdc>)
 80003ac:	2204      	movs	r2, #4
 80003ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_ADC1_Init+0xdc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003b6:	4b19      	ldr	r3, [pc, #100]	; (800041c <MX_ADC1_Init+0xdc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003bc:	4817      	ldr	r0, [pc, #92]	; (800041c <MX_ADC1_Init+0xdc>)
 80003be:	f000 fbf7 	bl	8000bb0 <HAL_ADC_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003c8:	f000 f97a 	bl	80006c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003d0:	f107 031c 	add.w	r3, r7, #28
 80003d4:	4619      	mov	r1, r3
 80003d6:	4811      	ldr	r0, [pc, #68]	; (800041c <MX_ADC1_Init+0xdc>)
 80003d8:	f001 fd38 	bl	8001e4c <HAL_ADCEx_MultiModeConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003e2:	f000 f96d 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <MX_ADC1_Init+0xdc>)
 8000404:	f001 fa36 	bl	8001874 <HAL_ADC_ConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800040e:	f000 f957 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	3728      	adds	r7, #40	; 0x28
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	2000007c 	.word	0x2000007c

08000420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_I2C1_Init+0x74>)
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <MX_I2C1_Init+0x78>)
 8000428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_I2C1_Init+0x74>)
 800042c:	4a1b      	ldr	r2, [pc, #108]	; (800049c <MX_I2C1_Init+0x7c>)
 800042e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_I2C1_Init+0x74>)
 8000438:	2201      	movs	r2, #1
 800043a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_I2C1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800045a:	480e      	ldr	r0, [pc, #56]	; (8000494 <MX_I2C1_Init+0x74>)
 800045c:	f002 f9da 	bl	8002814 <HAL_I2C_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000466:	f000 f92b 	bl	80006c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800046a:	2100      	movs	r1, #0
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <MX_I2C1_Init+0x74>)
 800046e:	f002 fa60 	bl	8002932 <HAL_I2CEx_ConfigAnalogFilter>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000478:	f000 f922 	bl	80006c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800047c:	2100      	movs	r1, #0
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_I2C1_Init+0x74>)
 8000480:	f002 faa2 	bl	80029c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800048a:	f000 f919 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000030 	.word	0x20000030
 8000498:	40005400 	.word	0x40005400
 800049c:	2000090e 	.word	0x2000090e

080004a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_SPI1_Init+0x74>)
 80004a6:	4a1c      	ldr	r2, [pc, #112]	; (8000518 <MX_SPI1_Init+0x78>)
 80004a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <MX_SPI1_Init+0x74>)
 80004ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <MX_SPI1_Init+0x74>)
 80004ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_SPI1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_SPI1_Init+0x74>)
 80004ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_SPI1_Init+0x74>)
 80004d6:	2208      	movs	r2, #8
 80004d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_SPI1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_SPI1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_SPI1_Init+0x74>)
 80004ee:	2207      	movs	r2, #7
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_SPI1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_SPI1_Init+0x74>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_SPI1_Init+0x74>)
 8000500:	f003 fe7a 	bl	80041f8 <HAL_SPI_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800050a:	f000 f8d9 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000150 	.word	0x20000150
 8000518:	40013000 	.word	0x40013000

0800051c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_UART4_Init+0x58>)
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <MX_UART4_Init+0x5c>)
 8000524:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_UART4_Init+0x58>)
 8000528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800052c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_UART4_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_UART4_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_UART4_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_UART4_Init+0x58>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_UART4_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_UART4_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_UART4_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_UART4_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_UART4_Init+0x58>)
 8000560:	f003 fef5 	bl	800434e <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800056a:	f000 f8a9 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000cc 	.word	0x200000cc
 8000578:	40004c00 	.word	0x40004c00

0800057c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_USB_PCD_Init+0x3c>)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <MX_USB_PCD_Init+0x40>)
 8000584:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_USB_PCD_Init+0x3c>)
 8000588:	2208      	movs	r2, #8
 800058a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MX_USB_PCD_Init+0x3c>)
 800058e:	2202      	movs	r2, #2
 8000590:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_USB_PCD_Init+0x3c>)
 8000594:	2202      	movs	r2, #2
 8000596:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <MX_USB_PCD_Init+0x3c>)
 800059a:	2200      	movs	r2, #0
 800059c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_USB_PCD_Init+0x3c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_USB_PCD_Init+0x3c>)
 80005a6:	f002 fa5b 	bl	8002a60 <HAL_PCD_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005b0:	f000 f886 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001b4 	.word	0x200001b4
 80005bc:	40005c00 	.word	0x40005c00

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d6:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <MX_GPIO_Init+0xf4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a36      	ldr	r2, [pc, #216]	; (80006b4 <MX_GPIO_Init+0xf4>)
 80005dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_GPIO_Init+0xf4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_GPIO_Init+0xf4>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a30      	ldr	r2, [pc, #192]	; (80006b4 <MX_GPIO_Init+0xf4>)
 80005f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <MX_GPIO_Init+0xf4>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <MX_GPIO_Init+0xf4>)
 800060c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_GPIO_Init+0xf4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <MX_GPIO_Init+0xf4>)
 800063c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_GPIO_Init+0xf4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800064e:	2200      	movs	r2, #0
 8000650:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_GPIO_Init+0xf8>)
 8000656:	f002 f8ab 	bl	80027b0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800065a:	2337      	movs	r3, #55	; 0x37
 800065c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_GPIO_Init+0xfc>)
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_GPIO_Init+0xf8>)
 800066e:	f001 ff25 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000672:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000676:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0xf8>)
 800068c:	f001 ff16 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f001 ff09 	bl	80024bc <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48001000 	.word	0x48001000
 80006bc:	10120000 	.word	0x10120000

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x44>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x44>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x44>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x44>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_MspInit+0x44>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_MspInit+0x44>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000702:	2007      	movs	r0, #7
 8000704:	f001 fe22 	bl	800234c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000734:	d12c      	bne.n	8000790 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_ADC_MspInit+0x84>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_ADC_MspInit+0x84>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_ADC_MspInit+0x84>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_ADC_MspInit+0x84>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <HAL_ADC_MspInit+0x84>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_ADC_MspInit+0x84>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000766:	2302      	movs	r3, #2
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f001 fe9e 	bl	80024bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 2);
 8000780:	2202      	movs	r2, #2
 8000782:	2100      	movs	r1, #0
 8000784:	2012      	movs	r0, #18
 8000786:	f001 fdec 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800078a:	2012      	movs	r0, #18
 800078c:	f001 fe05 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_I2C_MspInit+0x7c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d127      	bne.n	800080e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_I2C_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <HAL_I2C_MspInit+0x80>)
 80007c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_I2C_MspInit+0x80>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007d6:	23c0      	movs	r3, #192	; 0xc0
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007da:	2312      	movs	r3, #18
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e6:	2304      	movs	r3, #4
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <HAL_I2C_MspInit+0x84>)
 80007f2:	f001 fe63 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_I2C_MspInit+0x80>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_I2C_MspInit+0x80>)
 80007fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_I2C_MspInit+0x80>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40005400 	.word	0x40005400
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <HAL_SPI_MspInit+0x7c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d128      	bne.n	8000898 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 800084c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_SPI_MspInit+0x80>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000876:	23e0      	movs	r3, #224	; 0xe0
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000886:	2305      	movs	r3, #5
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 fe12 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40013000 	.word	0x40013000
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <HAL_UART_MspInit+0x8c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d130      	bne.n	800092c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_UART_MspInit+0x90>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <HAL_UART_MspInit+0x90>)
 80008d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_UART_MspInit+0x90>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_UART_MspInit+0x90>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <HAL_UART_MspInit+0x90>)
 80008e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_UART_MspInit+0x90>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800090c:	2305      	movs	r3, #5
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_UART_MspInit+0x94>)
 8000918:	f001 fdd0 	bl	80024bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2100      	movs	r1, #0
 8000920:	2034      	movs	r0, #52	; 0x34
 8000922:	f001 fd1e 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000926:	2034      	movs	r0, #52	; 0x34
 8000928:	f001 fd37 	bl	800239a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40004c00 	.word	0x40004c00
 8000938:	40021000 	.word	0x40021000
 800093c:	48000800 	.word	0x48000800

08000940 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_PCD_MspInit+0x80>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d129      	bne.n	80009b6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_PCD_MspInit+0x84>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_PCD_MspInit+0x84>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_PCD_MspInit+0x84>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800097a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800098c:	230e      	movs	r3, #14
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f001 fd8f 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_PCD_MspInit+0x84>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_PCD_MspInit+0x84>)
 80009a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_PCD_MspInit+0x84>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40005c00 	.word	0x40005c00
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f898 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <ADC1_2_IRQHandler+0x10>)
 8000a22:	f000 fbf3 	bl	800120c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000007c 	.word	0x2000007c

08000a30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <UART4_IRQHandler+0x10>)
 8000a36:	f003 fd15 	bl	8004464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000cc 	.word	0x200000cc

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a92:	f7ff ffd7 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f004 fc2f 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fbc9 	bl	8000230 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aac:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab4:	200004a4 	.word	0x200004a4

08000ab8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC3_IRQHandler>
	...

08000abc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x28>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x28>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f001 fc3d 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fdf8 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fc55 	bl	80023b6 <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	f001 fc1d 	bl	8002362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	200004a0 	.word	0x200004a0

08000b70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200004a0 	.word	0x200004a0

08000b88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09a      	sub	sp, #104	; 0x68
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e1c9      	b.n	8000f64 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d176      	bne.n	8000cd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d152      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fd85 	bl	8000714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d13b      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 fa67 	bl	80020ec <ADC_Disable>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d12f      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
 8000c30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d12b      	bne.n	8000c90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c40:	f023 0302 	bic.w	r3, r3, #2
 8000c44:	f043 0202 	orr.w	r2, r3, #2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c6c:	4b86      	ldr	r3, [pc, #536]	; (8000e88 <HAL_ADC_Init+0x2d8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a86      	ldr	r2, [pc, #536]	; (8000e8c <HAL_ADC_Init+0x2dc>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9a      	lsrs	r2, r3, #18
 8000c78:	4613      	mov	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c82:	e002      	b.n	8000c8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1f9      	bne.n	8000c84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d007      	beq.n	8000cae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cac:	d110      	bne.n	8000cd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f023 0312 	bic.w	r3, r3, #18
 8000cb6:	f043 0210 	orr.w	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f040 8136 	bne.w	8000f4a <HAL_ADC_Init+0x39a>
 8000cde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8131 	bne.w	8000f4a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8129 	bne.w	8000f4a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d00:	f043 0202 	orr.w	r2, r3, #2
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d10:	d004      	beq.n	8000d1c <HAL_ADC_Init+0x16c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a5e      	ldr	r2, [pc, #376]	; (8000e90 <HAL_ADC_Init+0x2e0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <HAL_ADC_Init+0x170>
 8000d1c:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <HAL_ADC_Init+0x2e4>)
 8000d1e:	e000      	b.n	8000d22 <HAL_ADC_Init+0x172>
 8000d20:	4b5d      	ldr	r3, [pc, #372]	; (8000e98 <HAL_ADC_Init+0x2e8>)
 8000d22:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2c:	d102      	bne.n	8000d34 <HAL_ADC_Init+0x184>
 8000d2e:	4b58      	ldr	r3, [pc, #352]	; (8000e90 <HAL_ADC_Init+0x2e0>)
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e01a      	b.n	8000d6a <HAL_ADC_Init+0x1ba>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a55      	ldr	r2, [pc, #340]	; (8000e90 <HAL_ADC_Init+0x2e0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d103      	bne.n	8000d46 <HAL_ADC_Init+0x196>
 8000d3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e011      	b.n	8000d6a <HAL_ADC_Init+0x1ba>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a54      	ldr	r2, [pc, #336]	; (8000e9c <HAL_ADC_Init+0x2ec>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d102      	bne.n	8000d56 <HAL_ADC_Init+0x1a6>
 8000d50:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <HAL_ADC_Init+0x2f0>)
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e009      	b.n	8000d6a <HAL_ADC_Init+0x1ba>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a51      	ldr	r2, [pc, #324]	; (8000ea0 <HAL_ADC_Init+0x2f0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d102      	bne.n	8000d66 <HAL_ADC_Init+0x1b6>
 8000d60:	4b4e      	ldr	r3, [pc, #312]	; (8000e9c <HAL_ADC_Init+0x2ec>)
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e001      	b.n	8000d6a <HAL_ADC_Init+0x1ba>
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d108      	bne.n	8000d8a <HAL_ADC_Init+0x1da>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d101      	bne.n	8000d8a <HAL_ADC_Init+0x1da>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_ADC_Init+0x1dc>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d11c      	bne.n	8000dca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d010      	beq.n	8000db8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d107      	bne.n	8000db2 <HAL_ADC_Init+0x202>
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Init+0x202>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_ADC_Init+0x204>
 8000db2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d108      	bne.n	8000dca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7e5b      	ldrb	r3, [r3, #25]
 8000dce:	035b      	lsls	r3, r3, #13
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dd4:	2a01      	cmp	r2, #1
 8000dd6:	d002      	beq.n	8000dde <HAL_ADC_Init+0x22e>
 8000dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ddc:	e000      	b.n	8000de0 <HAL_ADC_Init+0x230>
 8000dde:	2200      	movs	r2, #0
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000df0:	4313      	orrs	r3, r2
 8000df2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d11b      	bne.n	8000e36 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7e5b      	ldrb	r3, [r3, #25]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	045a      	lsls	r2, r3, #17
 8000e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e10:	4313      	orrs	r3, r2
 8000e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e16:	663b      	str	r3, [r7, #96]	; 0x60
 8000e18:	e00d      	b.n	8000e36 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e22:	f043 0220 	orr.w	r2, r3, #32
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f043 0201 	orr.w	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d03a      	beq.n	8000eb4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <HAL_ADC_Init+0x2ec>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d004      	beq.n	8000e52 <HAL_ADC_Init+0x2a2>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_ADC_Init+0x2f0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d128      	bne.n	8000ea4 <HAL_ADC_Init+0x2f4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000e5a:	d012      	beq.n	8000e82 <HAL_ADC_Init+0x2d2>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e64:	d00a      	beq.n	8000e7c <HAL_ADC_Init+0x2cc>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000e6e:	d002      	beq.n	8000e76 <HAL_ADC_Init+0x2c6>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	e018      	b.n	8000ea8 <HAL_ADC_Init+0x2f8>
 8000e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7a:	e015      	b.n	8000ea8 <HAL_ADC_Init+0x2f8>
 8000e7c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000e80:	e012      	b.n	8000ea8 <HAL_ADC_Init+0x2f8>
 8000e82:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e86:	e00f      	b.n	8000ea8 <HAL_ADC_Init+0x2f8>
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	50000100 	.word	0x50000100
 8000e94:	50000300 	.word	0x50000300
 8000e98:	50000700 	.word	0x50000700
 8000e9c:	50000400 	.word	0x50000400
 8000ea0:	50000500 	.word	0x50000500
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000eac:	4313      	orrs	r3, r2
 8000eae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d114      	bne.n	8000eec <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ed0:	f023 0302 	bic.w	r3, r3, #2
 8000ed4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7e1b      	ldrb	r3, [r3, #24]
 8000eda:	039a      	lsls	r2, r3, #14
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_ADC_Init+0x3bc>)
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000efc:	430b      	orrs	r3, r1
 8000efe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d10c      	bne.n	8000f22 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f023 010f 	bic.w	r1, r3, #15
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f20:	e007      	b.n	8000f32 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 020f 	bic.w	r2, r2, #15
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f023 0303 	bic.w	r3, r3, #3
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
 8000f48:	e00a      	b.n	8000f60 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f023 0312 	bic.w	r3, r3, #18
 8000f52:	f043 0210 	orr.w	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3768      	adds	r7, #104	; 0x68
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	fff0c007 	.word	0xfff0c007

08000f70 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 8123 	bne.w	80011d2 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_ADC_Start_IT+0x2a>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e11e      	b.n	80011d8 <HAL_ADC_Start_IT+0x268>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f001 f844 	bl	8002030 <ADC_Enable>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f040 810a 	bne.w	80011c8 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd0:	d004      	beq.n	8000fdc <HAL_ADC_Start_IT+0x6c>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a82      	ldr	r2, [pc, #520]	; (80011e0 <HAL_ADC_Start_IT+0x270>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_Start_IT+0x7a>
 8000fdc:	4b81      	ldr	r3, [pc, #516]	; (80011e4 <HAL_ADC_Start_IT+0x274>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d010      	beq.n	800100a <HAL_ADC_Start_IT+0x9a>
 8000fe8:	e005      	b.n	8000ff6 <HAL_ADC_Start_IT+0x86>
 8000fea:	4b7f      	ldr	r3, [pc, #508]	; (80011e8 <HAL_ADC_Start_IT+0x278>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_ADC_Start_IT+0x9a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ffe:	d004      	beq.n	800100a <HAL_ADC_Start_IT+0x9a>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a79      	ldr	r2, [pc, #484]	; (80011ec <HAL_ADC_Start_IT+0x27c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d115      	bne.n	8001036 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d036      	beq.n	8001092 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001034:	e02d      	b.n	8001092 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800104a:	d004      	beq.n	8001056 <HAL_ADC_Start_IT+0xe6>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a63      	ldr	r2, [pc, #396]	; (80011e0 <HAL_ADC_Start_IT+0x270>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10a      	bne.n	800106c <HAL_ADC_Start_IT+0xfc>
 8001056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	e008      	b.n	800107e <HAL_ADC_Start_IT+0x10e>
 800106c:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <HAL_ADC_Start_IT+0x27c>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800108a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800109e:	d106      	bne.n	80010ae <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	f023 0206 	bic.w	r2, r3, #6
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	645a      	str	r2, [r3, #68]	; 0x44
 80010ac:	e002      	b.n	80010b4 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	221c      	movs	r2, #28
 80010c2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d110      	bne.n	80010ee <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0204 	bic.w	r2, r2, #4
 80010da:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0208 	orr.w	r2, r2, #8
 80010ea:	605a      	str	r2, [r3, #4]
          break;
 80010ec:	e008      	b.n	8001100 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 020c 	orr.w	r2, r2, #12
 80010fc:	605a      	str	r2, [r3, #4]
          break;
 80010fe:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	2b01      	cmp	r3, #1
 8001106:	d107      	bne.n	8001118 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0210 	bic.w	r2, r2, #16
 8001116:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001120:	d004      	beq.n	800112c <HAL_ADC_Start_IT+0x1bc>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <HAL_ADC_Start_IT+0x270>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d106      	bne.n	800113a <HAL_ADC_Start_IT+0x1ca>
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_ADC_Start_IT+0x274>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2b00      	cmp	r3, #0
 8001136:	d03e      	beq.n	80011b6 <HAL_ADC_Start_IT+0x246>
 8001138:	e005      	b.n	8001146 <HAL_ADC_Start_IT+0x1d6>
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_ADC_Start_IT+0x278>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	2b00      	cmp	r3, #0
 8001144:	d037      	beq.n	80011b6 <HAL_ADC_Start_IT+0x246>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800114e:	d004      	beq.n	800115a <HAL_ADC_Start_IT+0x1ea>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_ADC_Start_IT+0x270>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d106      	bne.n	8001168 <HAL_ADC_Start_IT+0x1f8>
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_ADC_Start_IT+0x274>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	2b05      	cmp	r3, #5
 8001164:	d027      	beq.n	80011b6 <HAL_ADC_Start_IT+0x246>
 8001166:	e005      	b.n	8001174 <HAL_ADC_Start_IT+0x204>
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_ADC_Start_IT+0x278>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	2b05      	cmp	r3, #5
 8001172:	d020      	beq.n	80011b6 <HAL_ADC_Start_IT+0x246>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800117c:	d004      	beq.n	8001188 <HAL_ADC_Start_IT+0x218>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_ADC_Start_IT+0x270>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d106      	bne.n	8001196 <HAL_ADC_Start_IT+0x226>
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_ADC_Start_IT+0x274>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	2b09      	cmp	r3, #9
 8001192:	d010      	beq.n	80011b6 <HAL_ADC_Start_IT+0x246>
 8001194:	e005      	b.n	80011a2 <HAL_ADC_Start_IT+0x232>
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_ADC_Start_IT+0x278>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2b09      	cmp	r3, #9
 80011a0:	d009      	beq.n	80011b6 <HAL_ADC_Start_IT+0x246>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011aa:	d004      	beq.n	80011b6 <HAL_ADC_Start_IT+0x246>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_ADC_Start_IT+0x27c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10f      	bne.n	80011d6 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0204 	orr.w	r2, r2, #4
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	e006      	b.n	80011d6 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80011d0:	e001      	b.n	80011d6 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
 80011d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	50000100 	.word	0x50000100
 80011e4:	50000300 	.word	0x50000300
 80011e8:	50000700 	.word	0x50000700
 80011ec:	50000400 	.word	0x50000400

080011f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b04      	cmp	r3, #4
 800122c:	d106      	bne.n	800123c <HAL_ADC_IRQHandler+0x30>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b04      	cmp	r3, #4
 800123a:	d00f      	beq.n	800125c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001246:	2b08      	cmp	r3, #8
 8001248:	f040 80c0 	bne.w	80013cc <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b08      	cmp	r3, #8
 8001258:	f040 80b8 	bne.w	80013cc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800127c:	d004      	beq.n	8001288 <HAL_ADC_IRQHandler+0x7c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a95      	ldr	r2, [pc, #596]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d106      	bne.n	8001296 <HAL_ADC_IRQHandler+0x8a>
 8001288:	4b94      	ldr	r3, [pc, #592]	; (80014dc <HAL_ADC_IRQHandler+0x2d0>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	2b00      	cmp	r3, #0
 8001292:	d03e      	beq.n	8001312 <HAL_ADC_IRQHandler+0x106>
 8001294:	e005      	b.n	80012a2 <HAL_ADC_IRQHandler+0x96>
 8001296:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d037      	beq.n	8001312 <HAL_ADC_IRQHandler+0x106>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_IRQHandler+0xaa>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a89      	ldr	r2, [pc, #548]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d106      	bne.n	80012c4 <HAL_ADC_IRQHandler+0xb8>
 80012b6:	4b89      	ldr	r3, [pc, #548]	; (80014dc <HAL_ADC_IRQHandler+0x2d0>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d027      	beq.n	8001312 <HAL_ADC_IRQHandler+0x106>
 80012c2:	e005      	b.n	80012d0 <HAL_ADC_IRQHandler+0xc4>
 80012c4:	4b86      	ldr	r3, [pc, #536]	; (80014e0 <HAL_ADC_IRQHandler+0x2d4>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d020      	beq.n	8001312 <HAL_ADC_IRQHandler+0x106>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d004      	beq.n	80012e4 <HAL_ADC_IRQHandler+0xd8>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7e      	ldr	r2, [pc, #504]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d106      	bne.n	80012f2 <HAL_ADC_IRQHandler+0xe6>
 80012e4:	4b7d      	ldr	r3, [pc, #500]	; (80014dc <HAL_ADC_IRQHandler+0x2d0>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	d010      	beq.n	8001312 <HAL_ADC_IRQHandler+0x106>
 80012f0:	e005      	b.n	80012fe <HAL_ADC_IRQHandler+0xf2>
 80012f2:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_ADC_IRQHandler+0x2d4>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2b09      	cmp	r3, #9
 80012fc:	d009      	beq.n	8001312 <HAL_ADC_IRQHandler+0x106>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001306:	d004      	beq.n	8001312 <HAL_ADC_IRQHandler+0x106>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a75      	ldr	r2, [pc, #468]	; (80014e4 <HAL_ADC_IRQHandler+0x2d8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d104      	bne.n	800131c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	e00f      	b.n	800133c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001324:	d004      	beq.n	8001330 <HAL_ADC_IRQHandler+0x124>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6b      	ldr	r2, [pc, #428]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d102      	bne.n	8001336 <HAL_ADC_IRQHandler+0x12a>
 8001330:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001334:	e000      	b.n	8001338 <HAL_ADC_IRQHandler+0x12c>
 8001336:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <HAL_ADC_IRQHandler+0x2d8>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001346:	2b00      	cmp	r3, #0
 8001348:	d139      	bne.n	80013be <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001350:	2b00      	cmp	r3, #0
 8001352:	d134      	bne.n	80013be <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b08      	cmp	r3, #8
 8001360:	d12d      	bne.n	80013be <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11a      	bne.n	80013a6 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 020c 	bic.w	r2, r2, #12
 800137e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d112      	bne.n	80013be <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
 80013a4:	e00b      	b.n	80013be <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7fe ff02 	bl	80001c8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	220c      	movs	r2, #12
 80013ca:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d106      	bne.n	80013e8 <HAL_ADC_IRQHandler+0x1dc>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d00f      	beq.n	8001408 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80013f2:	2b40      	cmp	r3, #64	; 0x40
 80013f4:	f040 813c 	bne.w	8001670 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001402:	2b40      	cmp	r3, #64	; 0x40
 8001404:	f040 8134 	bne.w	8001670 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141c:	d004      	beq.n	8001428 <HAL_ADC_IRQHandler+0x21c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d106      	bne.n	8001436 <HAL_ADC_IRQHandler+0x22a>
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_ADC_IRQHandler+0x2d0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2b00      	cmp	r3, #0
 8001432:	d03e      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x2a6>
 8001434:	e005      	b.n	8001442 <HAL_ADC_IRQHandler+0x236>
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	2b00      	cmp	r3, #0
 8001440:	d037      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x2a6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144a:	d004      	beq.n	8001456 <HAL_ADC_IRQHandler+0x24a>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d106      	bne.n	8001464 <HAL_ADC_IRQHandler+0x258>
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_ADC_IRQHandler+0x2d0>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	2b05      	cmp	r3, #5
 8001460:	d027      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x2a6>
 8001462:	e005      	b.n	8001470 <HAL_ADC_IRQHandler+0x264>
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	2b05      	cmp	r3, #5
 800146e:	d020      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x2a6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001478:	d004      	beq.n	8001484 <HAL_ADC_IRQHandler+0x278>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d106      	bne.n	8001492 <HAL_ADC_IRQHandler+0x286>
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_ADC_IRQHandler+0x2d0>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2b09      	cmp	r3, #9
 800148e:	d010      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x2a6>
 8001490:	e005      	b.n	800149e <HAL_ADC_IRQHandler+0x292>
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_ADC_IRQHandler+0x2d4>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2b09      	cmp	r3, #9
 800149c:	d009      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x2a6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a6:	d004      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x2a6>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_ADC_IRQHandler+0x2d8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d104      	bne.n	80014bc <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	e018      	b.n	80014ee <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c4:	d004      	beq.n	80014d0 <HAL_ADC_IRQHandler+0x2c4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a03      	ldr	r2, [pc, #12]	; (80014d8 <HAL_ADC_IRQHandler+0x2cc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d10b      	bne.n	80014e8 <HAL_ADC_IRQHandler+0x2dc>
 80014d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014d4:	e009      	b.n	80014ea <HAL_ADC_IRQHandler+0x2de>
 80014d6:	bf00      	nop
 80014d8:	50000100 	.word	0x50000100
 80014dc:	50000300 	.word	0x50000300
 80014e0:	50000700 	.word	0x50000700
 80014e4:	50000400 	.word	0x50000400
 80014e8:	4b9d      	ldr	r3, [pc, #628]	; (8001760 <HAL_ADC_IRQHandler+0x554>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 80b2 	bne.w	8001662 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00d      	beq.n	8001524 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80a5 	bne.w	8001662 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 809f 	bne.w	8001662 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152e:	2b40      	cmp	r3, #64	; 0x40
 8001530:	f040 8097 	bne.w	8001662 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153c:	d004      	beq.n	8001548 <HAL_ADC_IRQHandler+0x33c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a88      	ldr	r2, [pc, #544]	; (8001764 <HAL_ADC_IRQHandler+0x558>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d106      	bne.n	8001556 <HAL_ADC_IRQHandler+0x34a>
 8001548:	4b87      	ldr	r3, [pc, #540]	; (8001768 <HAL_ADC_IRQHandler+0x55c>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	2b00      	cmp	r3, #0
 8001552:	d03e      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x3c6>
 8001554:	e005      	b.n	8001562 <HAL_ADC_IRQHandler+0x356>
 8001556:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_ADC_IRQHandler+0x560>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	2b00      	cmp	r3, #0
 8001560:	d037      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x3c6>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800156a:	d004      	beq.n	8001576 <HAL_ADC_IRQHandler+0x36a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_ADC_IRQHandler+0x558>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d106      	bne.n	8001584 <HAL_ADC_IRQHandler+0x378>
 8001576:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <HAL_ADC_IRQHandler+0x55c>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2b06      	cmp	r3, #6
 8001580:	d027      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x3c6>
 8001582:	e005      	b.n	8001590 <HAL_ADC_IRQHandler+0x384>
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <HAL_ADC_IRQHandler+0x560>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b06      	cmp	r3, #6
 800158e:	d020      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x3c6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001598:	d004      	beq.n	80015a4 <HAL_ADC_IRQHandler+0x398>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a71      	ldr	r2, [pc, #452]	; (8001764 <HAL_ADC_IRQHandler+0x558>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d106      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x3a6>
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_ADC_IRQHandler+0x55c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	2b07      	cmp	r3, #7
 80015ae:	d010      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x3c6>
 80015b0:	e005      	b.n	80015be <HAL_ADC_IRQHandler+0x3b2>
 80015b2:	4b6e      	ldr	r3, [pc, #440]	; (800176c <HAL_ADC_IRQHandler+0x560>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b07      	cmp	r3, #7
 80015bc:	d009      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x3c6>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c6:	d004      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x3c6>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a64      	ldr	r2, [pc, #400]	; (8001760 <HAL_ADC_IRQHandler+0x554>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d104      	bne.n	80015dc <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e00f      	b.n	80015fc <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e4:	d004      	beq.n	80015f0 <HAL_ADC_IRQHandler+0x3e4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <HAL_ADC_IRQHandler+0x558>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d102      	bne.n	80015f6 <HAL_ADC_IRQHandler+0x3ea>
 80015f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_IRQHandler+0x3ec>
 80015f6:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <HAL_ADC_IRQHandler+0x554>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d12d      	bne.n	8001662 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d11a      	bne.n	800164a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001622:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d112      	bne.n	8001662 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
 8001648:	e00b      	b.n	8001662 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f8de 	bl	8001824 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2260      	movs	r2, #96	; 0x60
 800166e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	2b80      	cmp	r3, #128	; 0x80
 800167c:	d113      	bne.n	80016a6 <HAL_ADC_IRQHandler+0x49a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	2b80      	cmp	r3, #128	; 0x80
 800168a:	d10c      	bne.n	80016a6 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fa75 	bl	8000b88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b4:	d115      	bne.n	80016e2 <HAL_ADC_IRQHandler+0x4d6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c4:	d10d      	bne.n	80016e2 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8ba 	bl	800184c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d115      	bne.n	800171e <HAL_ADC_IRQHandler+0x512>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001700:	d10d      	bne.n	800171e <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8a6 	bl	8001860 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b10      	cmp	r3, #16
 800172a:	d151      	bne.n	80017d0 <HAL_ADC_IRQHandler+0x5c4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b10      	cmp	r3, #16
 8001738:	d14a      	bne.n	80017d0 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e02d      	b.n	80017a4 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001750:	d004      	beq.n	800175c <HAL_ADC_IRQHandler+0x550>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_ADC_IRQHandler+0x558>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d109      	bne.n	8001770 <HAL_ADC_IRQHandler+0x564>
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_ADC_IRQHandler+0x55c>)
 800175e:	e008      	b.n	8001772 <HAL_ADC_IRQHandler+0x566>
 8001760:	50000400 	.word	0x50000400
 8001764:	50000100 	.word	0x50000100
 8001768:	50000300 	.word	0x50000300
 800176c:	50000700 	.word	0x50000700
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_ADC_IRQHandler+0x614>)
 8001772:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10a      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800178e:	2301      	movs	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e007      	b.n	80017a4 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10e      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f043 0202 	orr.w	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff f9ea 	bl	8000b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2210      	movs	r2, #16
 80017ce:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	d11b      	bne.n	8001818 <HAL_ADC_IRQHandler+0x60c>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ee:	d113      	bne.n	8001818 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f043 0208 	orr.w	r2, r3, #8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001810:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f810 	bl	8001838 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	50000700 	.word	0x50000700

08001824 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001874:	b480      	push	{r7}
 8001876:	b09b      	sub	sp, #108	; 0x6c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x22>
 8001892:	2302      	movs	r3, #2
 8001894:	e2cb      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x5ba>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 82af 	bne.w	8001e0c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d81c      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	461a      	mov	r2, r3
 80018ca:	231f      	movs	r3, #31
 80018cc:	4093      	lsls	r3, r2
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4019      	ands	r1, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
 80018ee:	e063      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d81e      	bhi.n	8001936 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3b1e      	subs	r3, #30
 800190c:	221f      	movs	r2, #31
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	4019      	ands	r1, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	3b1e      	subs	r3, #30
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
 8001934:	e040      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b0e      	cmp	r3, #14
 800193c:	d81e      	bhi.n	800197c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	3b3c      	subs	r3, #60	; 0x3c
 8001952:	221f      	movs	r2, #31
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	4019      	ands	r1, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	3b3c      	subs	r3, #60	; 0x3c
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
 800197a:	e01d      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	3b5a      	subs	r3, #90	; 0x5a
 8001990:	221f      	movs	r2, #31
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	4019      	ands	r1, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	3b5a      	subs	r3, #90	; 0x5a
 80019ac:	fa00 f203 	lsl.w	r2, r0, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 80e5 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d91c      	bls.n	8001a0a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6999      	ldr	r1, [r3, #24]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	3b1e      	subs	r3, #30
 80019e2:	2207      	movs	r2, #7
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4019      	ands	r1, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6898      	ldr	r0, [r3, #8]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	3b1e      	subs	r3, #30
 80019fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	e019      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6959      	ldr	r1, [r3, #20]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4019      	ands	r1, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6898      	ldr	r0, [r3, #8]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	08db      	lsrs	r3, r3, #3
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d84f      	bhi.n	8001b00 <HAL_ADC_ConfigChannel+0x28c>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a9b 	.word	0x08001a9b
 8001a70:	08001abd 	.word	0x08001abd
 8001a74:	08001adf 	.word	0x08001adf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7e:	4b9f      	ldr	r3, [pc, #636]	; (8001cfc <HAL_ADC_ConfigChannel+0x488>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	0691      	lsls	r1, r2, #26
 8001a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a96:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a98:	e07e      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001aa0:	4b96      	ldr	r3, [pc, #600]	; (8001cfc <HAL_ADC_ConfigChannel+0x488>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	0691      	lsls	r1, r2, #26
 8001aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aac:	430a      	orrs	r2, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ab8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aba:	e06d      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ac2:	4b8e      	ldr	r3, [pc, #568]	; (8001cfc <HAL_ADC_ConfigChannel+0x488>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	0691      	lsls	r1, r2, #26
 8001acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ada:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001adc:	e05c      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ae4:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_ADC_ConfigChannel+0x488>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	0691      	lsls	r1, r2, #26
 8001aee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001af0:	430a      	orrs	r2, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001afc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001afe:	e04b      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	069b      	lsls	r3, r3, #26
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d107      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b46:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b6a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10a      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b8e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b90:	e001      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b92:	bf00      	nop
 8001b94:	e000      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b96:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x344>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x344>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_ConfigChannel+0x346>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8131 	bne.w	8001e22 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d00f      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001be6:	e049      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	d91c      	bls.n	8001c44 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6999      	ldr	r1, [r3, #24]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b1b      	subs	r3, #27
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4019      	ands	r1, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6898      	ldr	r0, [r3, #8]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	3b1b      	subs	r3, #27
 8001c36:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	e01b      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6959      	ldr	r1, [r3, #20]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6898      	ldr	r0, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c84:	d004      	beq.n	8001c90 <HAL_ADC_ConfigChannel+0x41c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_ADC_ConfigChannel+0x48c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x420>
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_ADC_ConfigChannel+0x490>)
 8001c92:	e000      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x422>
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_ADC_ConfigChannel+0x494>)
 8001c96:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cb0:	2b11      	cmp	r3, #17
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cc4:	2b12      	cmp	r3, #18
 8001cc6:	f040 80ac 	bne.w	8001e22 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 80a5 	bne.w	8001e22 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce0:	d102      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x474>
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_ADC_ConfigChannel+0x48c>)
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e023      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x4bc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_ADC_ConfigChannel+0x48c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10c      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x498>
 8001cf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e01a      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x4bc>
 8001cfa:	bf00      	nop
 8001cfc:	83fff000 	.word	0x83fff000
 8001d00:	50000100 	.word	0x50000100
 8001d04:	50000300 	.word	0x50000300
 8001d08:	50000700 	.word	0x50000700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4a      	ldr	r2, [pc, #296]	; (8001e3c <HAL_ADC_ConfigChannel+0x5c8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d102      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x4a8>
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_ADC_ConfigChannel+0x5cc>)
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e009      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x4bc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a47      	ldr	r2, [pc, #284]	; (8001e40 <HAL_ADC_ConfigChannel+0x5cc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d102      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x4b8>
 8001d26:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <HAL_ADC_ConfigChannel+0x5c8>)
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e001      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x4bc>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d108      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x4dc>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x4dc>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x4de>
 8001d50:	2300      	movs	r3, #0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d150      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d56:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x504>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x504>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x506>
 8001d78:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d13c      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d11d      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x54e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d8e:	d118      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_ADC_ConfigChannel+0x5d0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_ADC_ConfigChannel+0x5d4>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9a      	lsrs	r2, r3, #18
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db2:	e002      	b.n	8001dba <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f9      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dc0:	e02e      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b11      	cmp	r3, #17
 8001dc8:	d10b      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x56e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dd2:	d106      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dde:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001de0:	e01e      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d11a      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001df6:	e013      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e0a:	e00a      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f043 0220 	orr.w	r2, r3, #32
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e20:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	376c      	adds	r7, #108	; 0x6c
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	50000400 	.word	0x50000400
 8001e40:	50000500 	.word	0x50000500
 8001e44:	20000000 	.word	0x20000000
 8001e48:	431bde83 	.word	0x431bde83

08001e4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b099      	sub	sp, #100	; 0x64
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e64:	d102      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e66:	4b6d      	ldr	r3, [pc, #436]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	e01a      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d103      	bne.n	8001e7e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	e011      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a67      	ldr	r2, [pc, #412]	; (8002020 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d102      	bne.n	8001e8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e88:	4b66      	ldr	r3, [pc, #408]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	e009      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a64      	ldr	r2, [pc, #400]	; (8002024 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d102      	bne.n	8001e9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e98:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	e001      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b0      	b.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e0a9      	b.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 808d 	bne.w	8001fec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8086 	bne.w	8001fec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ee8:	d004      	beq.n	8001ef4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001ef6:	e000      	b.n	8001efa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001efa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d040      	beq.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f16:	035b      	lsls	r3, r3, #13
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f1e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15c      	bne.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001f62:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d14b      	bne.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f70:	f023 030f 	bic.w	r3, r3, #15
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	6811      	ldr	r1, [r2, #0]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6892      	ldr	r2, [r2, #8]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f82:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f84:	e03c      	b.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f90:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d123      	bne.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001fd4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d112      	bne.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fe2:	f023 030f 	bic.w	r3, r3, #15
 8001fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fe8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fea:	e009      	b.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ffe:	e000      	b.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002000:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800200a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800200e:	4618      	mov	r0, r3
 8002010:	3764      	adds	r7, #100	; 0x64
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	50000100 	.word	0x50000100
 8002020:	50000400 	.word	0x50000400
 8002024:	50000500 	.word	0x50000500
 8002028:	50000300 	.word	0x50000300
 800202c:	50000700 	.word	0x50000700

08002030 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <ADC_Enable+0x2c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <ADC_Enable+0x2c>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <ADC_Enable+0x2e>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d13c      	bne.n	80020dc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <ADC_Enable+0xb8>)
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0210 	orr.w	r2, r3, #16
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e028      	b.n	80020de <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800209c:	f7fe fd68 	bl	8000b70 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020a2:	e014      	b.n	80020ce <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020a4:	f7fe fd64 	bl	8000b70 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d90d      	bls.n	80020ce <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f043 0210 	orr.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e007      	b.n	80020de <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d1e3      	bne.n	80020a4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	8000003f 	.word	0x8000003f

080020ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <ADC_Disable+0x2c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <ADC_Disable+0x2c>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <ADC_Disable+0x2e>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d040      	beq.n	80021a0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030d 	and.w	r3, r3, #13
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10f      	bne.n	800214c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0202 	orr.w	r2, r2, #2
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2203      	movs	r2, #3
 8002142:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002144:	f7fe fd14 	bl	8000b70 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800214a:	e022      	b.n	8002192 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0210 	orr.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e01c      	b.n	80021a2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002168:	f7fe fd02 	bl	8000b70 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d90d      	bls.n	8002192 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e007      	b.n	80021a2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d0e3      	beq.n	8002168 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff29 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002374:	f7ff ff3e 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 8002378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7ff ff8e 	bl	80022a0 <NVIC_EncodePriority>
 8002384:	4602      	mov	r2, r0
 8002386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff5d 	bl	800224c <__NVIC_SetPriority>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff31 	bl	8002210 <__NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffa2 	bl	8002308 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e020      	b.n	8002434 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 020e 	bic.w	r2, r2, #14
 8002400:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002452:	2b02      	cmp	r3, #2
 8002454:	d005      	beq.n	8002462 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e027      	b.n	80024b2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 020e 	bic.w	r2, r2, #14
 8002470:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
    } 
  }
  return status;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e154      	b.n	8002776 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8146 	beq.w	8002770 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d00b      	beq.n	8002504 <HAL_GPIO_Init+0x48>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d007      	beq.n	8002504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f8:	2b11      	cmp	r3, #17
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b12      	cmp	r3, #18
 8002502:	d130      	bne.n	8002566 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253a:	2201      	movs	r2, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 0201 	and.w	r2, r3, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0xea>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d123      	bne.n	80025ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	6939      	ldr	r1, [r7, #16]
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0203 	and.w	r2, r3, #3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80a0 	beq.w	8002770 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a57      	ldr	r2, [pc, #348]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b55      	ldr	r3, [pc, #340]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002648:	4a53      	ldr	r2, [pc, #332]	; (8002798 <HAL_GPIO_Init+0x2dc>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002672:	d019      	beq.n	80026a8 <HAL_GPIO_Init+0x1ec>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a49      	ldr	r2, [pc, #292]	; (800279c <HAL_GPIO_Init+0x2e0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_Init+0x1e8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a48      	ldr	r2, [pc, #288]	; (80027a0 <HAL_GPIO_Init+0x2e4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1e4>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a47      	ldr	r2, [pc, #284]	; (80027a4 <HAL_GPIO_Init+0x2e8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1e0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1dc>
 8002694:	2304      	movs	r3, #4
 8002696:	e008      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 8002698:	2305      	movs	r3, #5
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 800269c:	2303      	movs	r3, #3
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a8:	2300      	movs	r3, #0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ba:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_GPIO_Init+0x2dc>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026ec:	4a2f      	ldr	r2, [pc, #188]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271c:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f aea3 	bne.w	80024cc <HAL_GPIO_Init+0x10>
  }
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	48000400 	.word	0x48000400
 80027a0:	48000800 	.word	0x48000800
 80027a4:	48000c00 	.word	0x48000c00
 80027a8:	48001000 	.word	0x48001000
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43d9      	mvns	r1, r3
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	400b      	ands	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e081      	b.n	800292a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fd ffae 	bl	800079c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002864:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002874:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	e006      	b.n	800289c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800289a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d104      	bne.n	80028ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	ea42 0103 	orr.w	r1, r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	021a      	lsls	r2, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69d9      	ldr	r1, [r3, #28]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b20      	cmp	r3, #32
 8002946:	d138      	bne.n	80029ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002952:	2302      	movs	r3, #2
 8002954:	e032      	b.n	80029bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2224      	movs	r2, #36	; 0x24
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0201 	bic.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002984:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d139      	bne.n	8002a52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e033      	b.n	8002a54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a62:	b08b      	sub	sp, #44	; 0x2c
 8002a64:	af06      	add	r7, sp, #24
 8002a66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0d0      	b.n	8002c14 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fd ff5a 	bl	8000940 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 fbf1 	bl	8005280 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e04c      	b.n	8002b3e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	b298      	uxth	r0, r3
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3336      	adds	r3, #54	; 0x36
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3303      	adds	r3, #3
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	3338      	adds	r3, #56	; 0x38
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333c      	adds	r3, #60	; 0x3c
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3340      	adds	r3, #64	; 0x40
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d3ad      	bcc.n	8002aa4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e044      	b.n	8002bd8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3b5      	bcc.n	8002b4e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	687e      	ldr	r6, [r7, #4]
 8002bea:	466d      	mov	r5, sp
 8002bec:	f106 0410 	add.w	r4, r6, #16
 8002bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	602b      	str	r3, [r5, #0]
 8002bf8:	1d33      	adds	r3, r6, #4
 8002bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfc:	6838      	ldr	r0, [r7, #0]
 8002bfe:	f002 fb5a 	bl	80052b6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f000 bef4 	b.w	8003a1e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 816a 	beq.w	8002f1a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c46:	4bb3      	ldr	r3, [pc, #716]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c52:	4bb0      	ldr	r3, [pc, #704]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d159      	bne.n	8002d12 <HAL_RCC_OscConfig+0xf6>
 8002c5e:	4bad      	ldr	r3, [pc, #692]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6a:	d152      	bne.n	8002d12 <HAL_RCC_OscConfig+0xf6>
 8002c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c70:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c80:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x82>
 8002c98:	4b9e      	ldr	r3, [pc, #632]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0xae>
 8002c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002cba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002cc6:	4b93      	ldr	r3, [pc, #588]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002cd2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002cd6:	fa92 f2a2 	rbit	r2, r2
 8002cda:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002cde:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f002 021f 	and.w	r2, r2, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 810c 	beq.w	8002f18 <HAL_RCC_OscConfig+0x2fc>
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8106 	bne.w	8002f18 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f000 be86 	b.w	8003a1e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_OscConfig+0x110>
 8002d1e:	4b7d      	ldr	r3, [pc, #500]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7c      	ldr	r2, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e030      	b.n	8002d8e <HAL_RCC_OscConfig+0x172>
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x134>
 8002d36:	4b77      	ldr	r3, [pc, #476]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a76      	ldr	r2, [pc, #472]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b74      	ldr	r3, [pc, #464]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a73      	ldr	r2, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e01e      	b.n	8002d8e <HAL_RCC_OscConfig+0x172>
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x15a>
 8002d5c:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6c      	ldr	r2, [pc, #432]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b6a      	ldr	r3, [pc, #424]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a69      	ldr	r2, [pc, #420]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e00b      	b.n	8002d8e <HAL_RCC_OscConfig+0x172>
 8002d76:	4b67      	ldr	r3, [pc, #412]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a66      	ldr	r2, [pc, #408]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a63      	ldr	r2, [pc, #396]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d8e:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	f023 020f 	bic.w	r2, r3, #15
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	495d      	ldr	r1, [pc, #372]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d059      	beq.n	8002e60 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fd fee0 	bl	8000b70 <HAL_GetTick>
 8002db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db6:	f7fd fedb 	bl	8000b70 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d902      	bls.n	8002dcc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	f000 be29 	b.w	8003a1e <HAL_RCC_OscConfig+0xe02>
 8002dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002de0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_OscConfig+0x1e2>
 8002df8:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	e015      	b.n	8002e2a <HAL_RCC_OscConfig+0x20e>
 8002dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e02:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e16:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e1a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e2e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e36:	fa92 f2a2 	rbit	r2, r2
 8002e3a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e3e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e42:	fab2 f282 	clz	r2, r2
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f042 0220 	orr.w	r2, r2, #32
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f002 021f 	and.w	r2, r2, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f202 	lsl.w	r2, r1, r2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ab      	beq.n	8002db6 <HAL_RCC_OscConfig+0x19a>
 8002e5e:	e05c      	b.n	8002f1a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fd fe86 	bl	8000b70 <HAL_GetTick>
 8002e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6a:	f7fd fe81 	bl	8000b70 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d902      	bls.n	8002e80 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	f000 bdcf 	b.w	8003a1e <HAL_RCC_OscConfig+0xe02>
 8002e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x296>
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x2c2>
 8002eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ece:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_RCC_OscConfig+0x2f8>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ee2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ee6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002eea:	fa92 f2a2 	rbit	r2, r2
 8002eee:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ef2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ef6:	fab2 f282 	clz	r2, r2
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	f042 0220 	orr.w	r2, r2, #32
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	f002 021f 	and.w	r2, r2, #31
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ab      	bne.n	8002e6a <HAL_RCC_OscConfig+0x24e>
 8002f12:	e002      	b.n	8002f1a <HAL_RCC_OscConfig+0x2fe>
 8002f14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 816f 	beq.w	8003208 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f2a:	4bd0      	ldr	r3, [pc, #832]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f36:	4bcd      	ldr	r3, [pc, #820]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d16c      	bne.n	800301c <HAL_RCC_OscConfig+0x400>
 8002f42:	4bca      	ldr	r3, [pc, #808]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d166      	bne.n	800301c <HAL_RCC_OscConfig+0x400>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f60:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d102      	bne.n	8002f7e <HAL_RCC_OscConfig+0x362>
 8002f78:	4bbc      	ldr	r3, [pc, #752]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	e013      	b.n	8002fa6 <HAL_RCC_OscConfig+0x38a>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f90:	2302      	movs	r3, #2
 8002f92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fa2:	4bb2      	ldr	r3, [pc, #712]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002fac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fb0:	fa92 f2a2 	rbit	r2, r2
 8002fb4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002fb8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f042 0220 	orr.w	r2, r2, #32
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f002 021f 	and.w	r2, r2, #31
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f000 bd1b 	b.w	8003a1e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4ba0      	ldr	r3, [pc, #640]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	1d3b      	adds	r3, r7, #4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	21f8      	movs	r1, #248	; 0xf8
 8002ff8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003000:	fa91 f1a1 	rbit	r1, r1
 8003004:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003008:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800300c:	fab1 f181 	clz	r1, r1
 8003010:	b2c9      	uxtb	r1, r1
 8003012:	408b      	lsls	r3, r1
 8003014:	4995      	ldr	r1, [pc, #596]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e0f5      	b.n	8003208 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8085 	beq.w	8003132 <HAL_RCC_OscConfig+0x516>
 8003028:	2301      	movs	r3, #1
 800302a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800303a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003048:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	461a      	mov	r2, r3
 8003050:	2301      	movs	r3, #1
 8003052:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd fd8c 	bl	8000b70 <HAL_GetTick>
 8003058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fd fd87 	bl	8000b70 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d902      	bls.n	8003074 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	f000 bcd5 	b.w	8003a1e <HAL_RCC_OscConfig+0xe02>
 8003074:	2302      	movs	r3, #2
 8003076:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003086:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d102      	bne.n	80030a4 <HAL_RCC_OscConfig+0x488>
 800309e:	4b73      	ldr	r3, [pc, #460]	; (800326c <HAL_RCC_OscConfig+0x650>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	e013      	b.n	80030cc <HAL_RCC_OscConfig+0x4b0>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030b6:	2302      	movs	r3, #2
 80030b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x650>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2202      	movs	r2, #2
 80030ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80030d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80030d6:	fa92 f2a2 	rbit	r2, r2
 80030da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80030de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0af      	beq.n	800305e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	21f8      	movs	r1, #248	; 0xf8
 800310e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003116:	fa91 f1a1 	rbit	r1, r1
 800311a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800311e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003122:	fab1 f181 	clz	r1, r1
 8003126:	b2c9      	uxtb	r1, r1
 8003128:	408b      	lsls	r3, r1
 800312a:	4950      	ldr	r1, [pc, #320]	; (800326c <HAL_RCC_OscConfig+0x650>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e06a      	b.n	8003208 <HAL_RCC_OscConfig+0x5ec>
 8003132:	2301      	movs	r3, #1
 8003134:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003144:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003152:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fd fd07 	bl	8000b70 <HAL_GetTick>
 8003162:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003168:	f7fd fd02 	bl	8000b70 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d902      	bls.n	800317e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	f000 bc50 	b.w	8003a1e <HAL_RCC_OscConfig+0xe02>
 800317e:	2302      	movs	r3, #2
 8003180:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_OscConfig+0x592>
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_RCC_OscConfig+0x650>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e013      	b.n	80031d6 <HAL_RCC_OscConfig+0x5ba>
 80031ae:	2302      	movs	r3, #2
 80031b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031c0:	2302      	movs	r3, #2
 80031c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x650>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2202      	movs	r2, #2
 80031d8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80031dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031e0:	fa92 f2a2 	rbit	r2, r2
 80031e4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80031e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80031ec:	fab2 f282 	clz	r2, r2
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	f042 0220 	orr.w	r2, r2, #32
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	f002 021f 	and.w	r2, r2, #31
 80031fc:	2101      	movs	r1, #1
 80031fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1af      	bne.n	8003168 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80da 	beq.w	80033cc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d069      	beq.n	80032f6 <HAL_RCC_OscConfig+0x6da>
 8003222:	2301      	movs	r3, #1
 8003224:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_OscConfig+0x654>)
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	461a      	mov	r2, r3
 8003248:	2301      	movs	r3, #1
 800324a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fd fc90 	bl	8000b70 <HAL_GetTick>
 8003250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003254:	e00e      	b.n	8003274 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003256:	f7fd fc8b 	bl	8000b70 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d906      	bls.n	8003274 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e3d9      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	10908120 	.word	0x10908120
 8003274:	2302      	movs	r3, #2
 8003276:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003286:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800328a:	2202      	movs	r2, #2
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032a2:	2202      	movs	r2, #2
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80032b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4ba5      	ldr	r3, [pc, #660]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80032b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80032be:	2102      	movs	r1, #2
 80032c0:	6019      	str	r1, [r3, #0]
 80032c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f1a3 	rbit	r1, r3
 80032cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032d0:	6019      	str	r1, [r3, #0]
  return result;
 80032d2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0b0      	beq.n	8003256 <HAL_RCC_OscConfig+0x63a>
 80032f4:	e06a      	b.n	80033cc <HAL_RCC_OscConfig+0x7b0>
 80032f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800330c:	601a      	str	r2, [r3, #0]
  return result;
 800330e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003312:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	4b8c      	ldr	r3, [pc, #560]	; (8003550 <HAL_RCC_OscConfig+0x934>)
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	461a      	mov	r2, r3
 8003324:	2300      	movs	r3, #0
 8003326:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fd fc22 	bl	8000b70 <HAL_GetTick>
 800332c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	e009      	b.n	8003346 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003332:	f7fd fc1d 	bl	8000b70 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e36b      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
 8003346:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	fa93 f2a3 	rbit	r2, r3
 8003358:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003362:	2202      	movs	r2, #2
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800337a:	2202      	movs	r2, #2
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	fa93 f2a3 	rbit	r2, r3
 8003388:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800338c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338e:	4b6f      	ldr	r3, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x930>)
 8003390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003392:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003396:	2102      	movs	r1, #2
 8003398:	6019      	str	r1, [r3, #0]
 800339a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f1a3 	rbit	r1, r3
 80033a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033a8:	6019      	str	r1, [r3, #0]
  return result;
 80033aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1b2      	bne.n	8003332 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8158 	beq.w	800368c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b5a      	ldr	r3, [pc, #360]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d112      	bne.n	8003414 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	61d3      	str	r3, [r2, #28]
 80033fa:	4b54      	ldr	r3, [pc, #336]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f107 0308 	add.w	r3, r7, #8
 800340c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	4b4f      	ldr	r3, [pc, #316]	; (8003554 <HAL_RCC_OscConfig+0x938>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11a      	bne.n	8003456 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003420:	4b4c      	ldr	r3, [pc, #304]	; (8003554 <HAL_RCC_OscConfig+0x938>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4b      	ldr	r2, [pc, #300]	; (8003554 <HAL_RCC_OscConfig+0x938>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342c:	f7fd fba0 	bl	8000b70 <HAL_GetTick>
 8003430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	e009      	b.n	800344a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7fd fb9b 	bl	8000b70 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e2e9      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b42      	ldr	r3, [pc, #264]	; (8003554 <HAL_RCC_OscConfig+0x938>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ef      	beq.n	8003436 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x852>
 8003460:	4b3a      	ldr	r3, [pc, #232]	; (800354c <HAL_RCC_OscConfig+0x930>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4a39      	ldr	r2, [pc, #228]	; (800354c <HAL_RCC_OscConfig+0x930>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6213      	str	r3, [r2, #32]
 800346c:	e02f      	b.n	80034ce <HAL_RCC_OscConfig+0x8b2>
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x876>
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x930>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a33      	ldr	r2, [pc, #204]	; (800354c <HAL_RCC_OscConfig+0x930>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_RCC_OscConfig+0x930>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4a30      	ldr	r2, [pc, #192]	; (800354c <HAL_RCC_OscConfig+0x930>)
 800348a:	f023 0304 	bic.w	r3, r3, #4
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	e01d      	b.n	80034ce <HAL_RCC_OscConfig+0x8b2>
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b05      	cmp	r3, #5
 800349a:	d10c      	bne.n	80034b6 <HAL_RCC_OscConfig+0x89a>
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x930>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a2a      	ldr	r2, [pc, #168]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a27      	ldr	r2, [pc, #156]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	e00b      	b.n	80034ce <HAL_RCC_OscConfig+0x8b2>
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a24      	ldr	r2, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_RCC_OscConfig+0x930>)
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d06b      	beq.n	80035b0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d8:	f7fd fb4a 	bl	8000b70 <HAL_GetTick>
 80034dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fd fb45 	bl	8000b70 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e291      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
 80034fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034fe:	2202      	movs	r2, #2
 8003500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003516:	2202      	movs	r2, #2
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003528:	601a      	str	r2, [r3, #0]
  return result;
 800352a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800352e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d109      	bne.n	8003558 <HAL_RCC_OscConfig+0x93c>
 8003544:	4b01      	ldr	r3, [pc, #4]	; (800354c <HAL_RCC_OscConfig+0x930>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	e014      	b.n	8003574 <HAL_RCC_OscConfig+0x958>
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	10908120 	.word	0x10908120
 8003554:	40007000 	.word	0x40007000
 8003558:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800355c:	2202      	movs	r2, #2
 800355e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	4bbb      	ldr	r3, [pc, #748]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003578:	2102      	movs	r1, #2
 800357a:	6011      	str	r1, [r2, #0]
 800357c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	fa92 f1a2 	rbit	r1, r2
 8003586:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800358a:	6011      	str	r1, [r2, #0]
  return result;
 800358c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	fab2 f282 	clz	r2, r2
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	f002 021f 	and.w	r2, r2, #31
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d099      	beq.n	80034e2 <HAL_RCC_OscConfig+0x8c6>
 80035ae:	e063      	b.n	8003678 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fd fade 	bl	8000b70 <HAL_GetTick>
 80035b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fd fad9 	bl	8000b70 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e225      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
 80035d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035d6:	2202      	movs	r2, #2
 80035d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f2a3 	rbit	r2, r3
 80035e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035ee:	2202      	movs	r2, #2
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fa93 f2a3 	rbit	r2, r3
 80035fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003600:	601a      	str	r2, [r3, #0]
  return result;
 8003602:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003606:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d102      	bne.n	8003622 <HAL_RCC_OscConfig+0xa06>
 800361c:	4b90      	ldr	r3, [pc, #576]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	e00d      	b.n	800363e <HAL_RCC_OscConfig+0xa22>
 8003622:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003626:	2202      	movs	r2, #2
 8003628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	fa93 f2a3 	rbit	r2, r3
 8003634:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	4b89      	ldr	r3, [pc, #548]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003642:	2102      	movs	r1, #2
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	fa92 f1a2 	rbit	r1, r2
 8003650:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003654:	6011      	str	r1, [r2, #0]
  return result;
 8003656:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	fab2 f282 	clz	r2, r2
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f002 021f 	and.w	r2, r2, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1a0      	bne.n	80035ba <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003678:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b77      	ldr	r3, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4a76      	ldr	r2, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	1d3b      	adds	r3, r7, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 81c2 	beq.w	8003a1c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003698:	4b71      	ldr	r3, [pc, #452]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	f000 819c 	beq.w	80039de <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	f040 8114 	bne.w	80038da <HAL_RCC_OscConfig+0xcbe>
 80036b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036ca:	601a      	str	r2, [r3, #0]
  return result;
 80036cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	461a      	mov	r2, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fd fa42 	bl	8000b70 <HAL_GetTick>
 80036ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f0:	e009      	b.n	8003706 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fd fa3d 	bl	8000b70 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e18b      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
 8003706:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800370a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800371e:	601a      	str	r2, [r3, #0]
  return result;
 8003720:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003724:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d102      	bne.n	8003740 <HAL_RCC_OscConfig+0xb24>
 800373a:	4b49      	ldr	r3, [pc, #292]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	e01b      	b.n	8003778 <HAL_RCC_OscConfig+0xb5c>
 8003740:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	fa93 f2a3 	rbit	r2, r3
 8003754:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800375e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	fa93 f2a3 	rbit	r2, r3
 800376e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800377c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	fa92 f1a2 	rbit	r1, r2
 800378c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003790:	6011      	str	r1, [r2, #0]
  return result;
 8003792:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f002 021f 	and.w	r2, r2, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d19e      	bne.n	80036f2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	4925      	ldr	r1, [pc, #148]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
 80037d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037e8:	601a      	str	r2, [r3, #0]
  return result;
 80037ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	461a      	mov	r2, r3
 8003802:	2301      	movs	r3, #1
 8003804:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fd f9b3 	bl	8000b70 <HAL_GetTick>
 800380a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380e:	e009      	b.n	8003824 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd f9ae 	bl	8000b70 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e0fc      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
 8003824:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800382c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800383c:	601a      	str	r2, [r3, #0]
  return result;
 800383e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003842:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_RCC_OscConfig+0xc48>
 8003858:	4b01      	ldr	r3, [pc, #4]	; (8003860 <HAL_RCC_OscConfig+0xc44>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	e01e      	b.n	800389c <HAL_RCC_OscConfig+0xc80>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800386c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	fa93 f2a3 	rbit	r2, r3
 8003878:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	fa93 f2a3 	rbit	r2, r3
 8003892:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_OscConfig+0xe0c>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038a4:	6011      	str	r1, [r2, #0]
 80038a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	fa92 f1a2 	rbit	r1, r2
 80038b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038b4:	6011      	str	r1, [r2, #0]
  return result;
 80038b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	fab2 f282 	clz	r2, r2
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	f042 0220 	orr.w	r2, r2, #32
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	f002 021f 	and.w	r2, r2, #31
 80038cc:	2101      	movs	r1, #1
 80038ce:	fa01 f202 	lsl.w	r2, r1, r2
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d09b      	beq.n	8003810 <HAL_RCC_OscConfig+0xbf4>
 80038d8:	e0a0      	b.n	8003a1c <HAL_RCC_OscConfig+0xe00>
 80038da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003904:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	461a      	mov	r2, r3
 800390c:	2300      	movs	r3, #0
 800390e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd f92e 	bl	8000b70 <HAL_GetTick>
 8003914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003918:	e009      	b.n	800392e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391a:	f7fd f929 	bl	8000b70 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e077      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
 800392e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003946:	601a      	str	r2, [r3, #0]
  return result;
 8003948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_RCC_OscConfig+0xd4c>
 8003962:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <HAL_RCC_OscConfig+0xe0c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e01b      	b.n	80039a0 <HAL_RCC_OscConfig+0xd84>
 8003968:	f107 0320 	add.w	r3, r7, #32
 800396c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f107 0320 	add.w	r3, r7, #32
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f2a3 	rbit	r2, r3
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f107 0318 	add.w	r3, r7, #24
 8003986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f107 0318 	add.w	r3, r7, #24
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_OscConfig+0xe0c>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f107 0210 	add.w	r2, r7, #16
 80039a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	f107 0210 	add.w	r2, r7, #16
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	fa92 f1a2 	rbit	r1, r2
 80039b4:	f107 020c 	add.w	r2, r7, #12
 80039b8:	6011      	str	r1, [r2, #0]
  return result;
 80039ba:	f107 020c 	add.w	r2, r7, #12
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f002 021f 	and.w	r2, r2, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d19e      	bne.n	800391a <HAL_RCC_OscConfig+0xcfe>
 80039dc:	e01e      	b.n	8003a1c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e018      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <HAL_RCC_OscConfig+0xe0c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d108      	bne.n	8003a18 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b09e      	sub	sp, #120	; 0x78
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e162      	b.n	8003d0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b90      	ldr	r3, [pc, #576]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d910      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b8d      	ldr	r3, [pc, #564]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 0207 	bic.w	r2, r3, #7
 8003a5a:	498b      	ldr	r1, [pc, #556]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e14a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b82      	ldr	r3, [pc, #520]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	497f      	ldr	r1, [pc, #508]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80dc 	beq.w	8003c58 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d13c      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xf6>
 8003aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xa6>
 8003acc:	4b6f      	ldr	r3, [pc, #444]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	e00f      	b.n	8003af2 <HAL_RCC_ClockConfig+0xc6>
 8003ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aee:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003af6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003afa:	fa92 f2a2 	rbit	r2, r2
 8003afe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b02:	fab2 f282 	clz	r2, r2
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f042 0220 	orr.w	r2, r2, #32
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	f002 021f 	and.w	r2, r2, #31
 8003b12:	2101      	movs	r1, #1
 8003b14:	fa01 f202 	lsl.w	r2, r1, r2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d17b      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0f3      	b.n	8003d0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d13c      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x178>
 8003b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x128>
 8003b4e:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e00f      	b.n	8003b74 <HAL_RCC_ClockConfig+0x148>
 8003b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	647b      	str	r3, [r7, #68]	; 0x44
 8003b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40
 8003b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b78:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b7c:	fa92 f2a2 	rbit	r2, r2
 8003b80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f002 021f 	and.w	r2, r2, #31
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d13a      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0b2      	b.n	8003d0a <HAL_RCC_ClockConfig+0x2de>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d102      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x1a0>
 8003bc6:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	e00d      	b.n	8003be8 <HAL_RCC_ClockConfig+0x1bc>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	2302      	movs	r3, #2
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2202      	movs	r2, #2
 8003bea:	61ba      	str	r2, [r7, #24]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	fa92 f2a2 	rbit	r2, r2
 8003bf2:	617a      	str	r2, [r7, #20]
  return result;
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	fab2 f282 	clz	r2, r2
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	f042 0220 	orr.w	r2, r2, #32
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	f002 021f 	and.w	r2, r2, #31
 8003c06:	2101      	movs	r1, #1
 8003c08:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e079      	b.n	8003d0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f023 0203 	bic.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	491a      	ldr	r1, [pc, #104]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c28:	f7fc ffa2 	bl	8000b70 <HAL_GetTick>
 8003c2c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c30:	f7fc ff9e 	bl	8000b70 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e061      	b.n	8003d0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_RCC_ClockConfig+0x260>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 020c 	and.w	r2, r3, #12
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1eb      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d214      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	4906      	ldr	r1, [pc, #24]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_RCC_ClockConfig+0x25c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e040      	b.n	8003d0a <HAL_RCC_ClockConfig+0x2de>
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCC_ClockConfig+0x2e8>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	491a      	ldr	r1, [pc, #104]	; (8003d14 <HAL_RCC_ClockConfig+0x2e8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_RCC_ClockConfig+0x2e8>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4912      	ldr	r1, [pc, #72]	; (8003d14 <HAL_RCC_ClockConfig+0x2e8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cce:	f000 f829 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCC_ClockConfig+0x2e8>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cdc:	22f0      	movs	r2, #240	; 0xf0
 8003cde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	fa92 f2a2 	rbit	r2, r2
 8003ce6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	fab2 f282 	clz	r2, r2
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	40d3      	lsrs	r3, r2
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x2ec>)
 8003cf4:	5cd3      	ldrb	r3, [r2, r3]
 8003cf6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <HAL_RCC_ClockConfig+0x2f0>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_RCC_ClockConfig+0x2f4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fef0 	bl	8000ae8 <HAL_InitTick>
  
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3778      	adds	r7, #120	; 0x78
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08005368 	.word	0x08005368
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20000004 	.word	0x20000004

08003d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b08b      	sub	sp, #44	; 0x2c
 8003d28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x30>
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x36>
 8003d52:	e03c      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d56:	623b      	str	r3, [r7, #32]
      break;
 8003d58:	e03c      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	fa92 f2a2 	rbit	r2, r2
 8003d6c:	607a      	str	r2, [r7, #4]
  return result;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	fab2 f282 	clz	r2, r2
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	40d3      	lsrs	r3, r2
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d7a:	5cd3      	ldrb	r3, [r2, r3]
 8003d7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	220f      	movs	r2, #15
 8003d88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	fa92 f2a2 	rbit	r2, r2
 8003d90:	60fa      	str	r2, [r7, #12]
  return result;
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	fab2 f282 	clz	r2, r2
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	40d3      	lsrs	r3, r2
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dac:	4a0e      	ldr	r2, [pc, #56]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	623b      	str	r3, [r7, #32]
      break;
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dd0:	623b      	str	r3, [r7, #32]
      break;
 8003dd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	372c      	adds	r7, #44	; 0x2c
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	007a1200 	.word	0x007a1200
 8003dec:	08005380 	.word	0x08005380
 8003df0:	08005390 	.word	0x08005390
 8003df4:	003d0900 	.word	0x003d0900

08003df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000

08003e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e16:	f7ff ffef 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	fa92 f2a2 	rbit	r2, r2
 8003e30:	603a      	str	r2, [r7, #0]
  return result;
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	fab2 f282 	clz	r2, r2
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	40d3      	lsrs	r3, r2
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	08005378 	.word	0x08005378

08003e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e5a:	f7ff ffcd 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e5e:	4601      	mov	r1, r0
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	fa92 f2a2 	rbit	r2, r2
 8003e74:	603a      	str	r2, [r7, #0]
  return result;
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	fab2 f282 	clz	r2, r2
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	40d3      	lsrs	r3, r2
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08005378 	.word	0x08005378

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b092      	sub	sp, #72	; 0x48
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80d4 	beq.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebc:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4a4a      	ldr	r2, [pc, #296]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	61d3      	str	r3, [r2, #28]
 8003ed4:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a41      	ldr	r2, [pc, #260]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fc fe37 	bl	8000b70 <HAL_GetTick>
 8003f02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fc fe33 	bl	8000b70 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e169      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f24:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8084 	beq.w	800403e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d07c      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f44:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2301      	movs	r3, #1
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f82:	fab3 f383 	clz	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	461a      	mov	r2, r3
 8003f92:	2300      	movs	r3, #0
 8003f94:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04b      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fc fde3 	bl	8000b70 <HAL_GetTick>
 8003faa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fc fddf 	bl	8000b70 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e113      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	61fb      	str	r3, [r7, #28]
  return result;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d108      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ff2:	4b01      	ldr	r3, [pc, #4]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	e00d      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	10908100 	.word	0x10908100
 8004004:	2302      	movs	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	4b78      	ldr	r3, [pc, #480]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	2202      	movs	r2, #2
 8004016:	613a      	str	r2, [r7, #16]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	fa92 f2a2 	rbit	r2, r2
 800401e:	60fa      	str	r2, [r7, #12]
  return result;
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	fab2 f282 	clz	r2, r2
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f002 021f 	and.w	r2, r2, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f202 	lsl.w	r2, r1, r2
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0b7      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800403e:	4b6d      	ldr	r3, [pc, #436]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	496a      	ldr	r1, [pc, #424]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004050:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b66      	ldr	r3, [pc, #408]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004070:	4b60      	ldr	r3, [pc, #384]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f023 0203 	bic.w	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	495d      	ldr	r1, [pc, #372]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800408e:	4b59      	ldr	r3, [pc, #356]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4956      	ldr	r1, [pc, #344]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800409c:	4313      	orrs	r3, r2
 800409e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ac:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	494e      	ldr	r1, [pc, #312]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ca:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f023 0210 	bic.w	r2, r3, #16
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4947      	ldr	r1, [pc, #284]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80040e8:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	493f      	ldr	r1, [pc, #252]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004106:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f023 0220 	bic.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4938      	ldr	r1, [pc, #224]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004124:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4930      	ldr	r1, [pc, #192]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004142:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	4929      	ldr	r1, [pc, #164]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4921      	ldr	r1, [pc, #132]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	491a      	ldr	r1, [pc, #104]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	4912      	ldr	r1, [pc, #72]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	490b      	ldr	r1, [pc, #44]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e4:	4903      	ldr	r1, [pc, #12]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3748      	adds	r7, #72	; 0x48
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e09d      	b.n	8004346 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d108      	bne.n	8004224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800421a:	d009      	beq.n	8004230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	61da      	str	r2, [r3, #28]
 8004222:	e005      	b.n	8004230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fc faea 	bl	8000824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004266:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004270:	d902      	bls.n	8004278 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e002      	b.n	800427e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004286:	d007      	beq.n	8004298 <HAL_SPI_Init+0xa0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004290:	d002      	beq.n	8004298 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	ea42 0103 	orr.w	r1, r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	f003 0204 	and.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004314:	ea42 0103 	orr.w	r1, r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e040      	b.n	80043e2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fc fa99 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	; 0x24
 800437a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa89 	bl	80048a4 <UART_SetConfig>
 8004392:	4603      	mov	r3, r0
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e022      	b.n	80043e2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fc51 	bl	8004c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fcd8 	bl	8004d90 <UART_CheckIdleState>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d12c      	bne.n	800445a <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_UART_Receive_IT+0x22>
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e025      	b.n	800445c <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_UART_Receive_IT+0x34>
 800441a:	2302      	movs	r3, #2
 800441c:	e01e      	b.n	800445c <HAL_UART_Receive_IT+0x72>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004448:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	461a      	mov	r2, r3
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fd63 	bl	8004f1c <UART_Start_Receive_IT>
 8004456:	4603      	mov	r3, r0
 8004458:	e000      	b.n	800445c <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	f640 030f 	movw	r3, #2063	; 0x80f
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d113      	bne.n	80044bc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 81cc 	beq.w	800484a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
      }
      return;
 80044ba:	e1c6      	b.n	800484a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80e3 	beq.w	800468a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4ba5      	ldr	r3, [pc, #660]	; (8004768 <HAL_UART_IRQHandler+0x304>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80d8 	beq.w	800468a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_UART_IRQHandler+0xa2>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044fc:	f043 0201 	orr.w	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d010      	beq.n	8004532 <HAL_UART_IRQHandler+0xce>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2202      	movs	r2, #2
 8004520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d010      	beq.n	800455e <HAL_UART_IRQHandler+0xfa>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2204      	movs	r2, #4
 800454c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2208      	movs	r2, #8
 8004582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458a:	f043 0208 	orr.w	r2, r3, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459a:	2b00      	cmp	r3, #0
 800459c:	d011      	beq.n	80045c2 <HAL_UART_IRQHandler+0x15e>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00c      	beq.n	80045c2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8140 	beq.w	800484e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d004      	beq.n	8004612 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d031      	beq.n	8004676 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fcf8 	bl	8005008 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d123      	bne.n	800466e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004634:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	2b00      	cmp	r3, #0
 800463c:	d013      	beq.n	8004666 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a4a      	ldr	r2, [pc, #296]	; (800476c <HAL_UART_IRQHandler+0x308>)
 8004644:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fef8 	bl	8002440 <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e00f      	b.n	8004686 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f906 	bl	8004878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e00b      	b.n	8004686 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f902 	bl	8004878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e007      	b.n	8004686 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8fe 	bl	8004878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004684:	e0e3      	b.n	800484e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004686:	bf00      	nop
    return;
 8004688:	e0e1      	b.n	800484e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	2b01      	cmp	r3, #1
 8004690:	f040 80a7 	bne.w	80047e2 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80a1 	beq.w	80047e2 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 809b 	beq.w	80047e2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2210      	movs	r2, #16
 80046b2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d156      	bne.n	8004770 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80046cc:	893b      	ldrh	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80bf 	beq.w	8004852 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046da:	893a      	ldrh	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	f080 80b8 	bcs.w	8004852 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	893a      	ldrh	r2, [r7, #8]
 80046e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d02a      	beq.n	800474a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004702:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004722:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0210 	bic.w	r2, r2, #16
 800473e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	4618      	mov	r0, r3
 8004746:	f7fd fe42 	bl	80023ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004756:	b29b      	uxth	r3, r3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	b29b      	uxth	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f894 	bl	800488c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004764:	e075      	b.n	8004852 <HAL_UART_IRQHandler+0x3ee>
 8004766:	bf00      	nop
 8004768:	04000120 	.word	0x04000120
 800476c:	08005067 	.word	0x08005067
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800477c:	b29b      	uxth	r3, r3
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d060      	beq.n	8004856 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0210 	bic.w	r2, r2, #16
 80047d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047d6:	897b      	ldrh	r3, [r7, #10]
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f856 	bl	800488c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047e0:	e039      	b.n	8004856 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00d      	beq.n	8004808 <HAL_UART_IRQHandler+0x3a4>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fd33 	bl	800526c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004806:	e029      	b.n	800485c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
    }
    return;
 800482c:	e015      	b.n	800485a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <HAL_UART_IRQHandler+0x3f8>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fc25 	bl	8005092 <UART_EndTransmit_IT>
    return;
 8004848:	e008      	b.n	800485c <HAL_UART_IRQHandler+0x3f8>
      return;
 800484a:	bf00      	nop
 800484c:	e006      	b.n	800485c <HAL_UART_IRQHandler+0x3f8>
    return;
 800484e:	bf00      	nop
 8004850:	e004      	b.n	800485c <HAL_UART_IRQHandler+0x3f8>
      return;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <HAL_UART_IRQHandler+0x3f8>
      return;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <HAL_UART_IRQHandler+0x3f8>
    return;
 800485a:	bf00      	nop
  }

}
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop

08004864 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80048d2:	f023 030c 	bic.w	r3, r3, #12
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4aae      	ldr	r2, [pc, #696]	; (8004bd8 <UART_SetConfig+0x334>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d120      	bne.n	8004966 <UART_SetConfig+0xc2>
 8004924:	4bad      	ldr	r3, [pc, #692]	; (8004bdc <UART_SetConfig+0x338>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b03      	cmp	r3, #3
 800492e:	d817      	bhi.n	8004960 <UART_SetConfig+0xbc>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x94>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	08004949 	.word	0x08004949
 800493c:	08004955 	.word	0x08004955
 8004940:	0800495b 	.word	0x0800495b
 8004944:	0800494f 	.word	0x0800494f
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e0b5      	b.n	8004aba <UART_SetConfig+0x216>
 800494e:	2302      	movs	r3, #2
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e0b2      	b.n	8004aba <UART_SetConfig+0x216>
 8004954:	2304      	movs	r3, #4
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e0af      	b.n	8004aba <UART_SetConfig+0x216>
 800495a:	2308      	movs	r3, #8
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e0ac      	b.n	8004aba <UART_SetConfig+0x216>
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e0a9      	b.n	8004aba <UART_SetConfig+0x216>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a9d      	ldr	r2, [pc, #628]	; (8004be0 <UART_SetConfig+0x33c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d124      	bne.n	80049ba <UART_SetConfig+0x116>
 8004970:	4b9a      	ldr	r3, [pc, #616]	; (8004bdc <UART_SetConfig+0x338>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004978:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800497c:	d011      	beq.n	80049a2 <UART_SetConfig+0xfe>
 800497e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004982:	d817      	bhi.n	80049b4 <UART_SetConfig+0x110>
 8004984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004988:	d011      	beq.n	80049ae <UART_SetConfig+0x10a>
 800498a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800498e:	d811      	bhi.n	80049b4 <UART_SetConfig+0x110>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <UART_SetConfig+0xf8>
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004998:	d006      	beq.n	80049a8 <UART_SetConfig+0x104>
 800499a:	e00b      	b.n	80049b4 <UART_SetConfig+0x110>
 800499c:	2300      	movs	r3, #0
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e08b      	b.n	8004aba <UART_SetConfig+0x216>
 80049a2:	2302      	movs	r3, #2
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e088      	b.n	8004aba <UART_SetConfig+0x216>
 80049a8:	2304      	movs	r3, #4
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e085      	b.n	8004aba <UART_SetConfig+0x216>
 80049ae:	2308      	movs	r3, #8
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e082      	b.n	8004aba <UART_SetConfig+0x216>
 80049b4:	2310      	movs	r3, #16
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e07f      	b.n	8004aba <UART_SetConfig+0x216>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a89      	ldr	r2, [pc, #548]	; (8004be4 <UART_SetConfig+0x340>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d124      	bne.n	8004a0e <UART_SetConfig+0x16a>
 80049c4:	4b85      	ldr	r3, [pc, #532]	; (8004bdc <UART_SetConfig+0x338>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80049cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049d0:	d011      	beq.n	80049f6 <UART_SetConfig+0x152>
 80049d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049d6:	d817      	bhi.n	8004a08 <UART_SetConfig+0x164>
 80049d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049dc:	d011      	beq.n	8004a02 <UART_SetConfig+0x15e>
 80049de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049e2:	d811      	bhi.n	8004a08 <UART_SetConfig+0x164>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <UART_SetConfig+0x14c>
 80049e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ec:	d006      	beq.n	80049fc <UART_SetConfig+0x158>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x164>
 80049f0:	2300      	movs	r3, #0
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e061      	b.n	8004aba <UART_SetConfig+0x216>
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e05e      	b.n	8004aba <UART_SetConfig+0x216>
 80049fc:	2304      	movs	r3, #4
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e05b      	b.n	8004aba <UART_SetConfig+0x216>
 8004a02:	2308      	movs	r3, #8
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e058      	b.n	8004aba <UART_SetConfig+0x216>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e055      	b.n	8004aba <UART_SetConfig+0x216>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a75      	ldr	r2, [pc, #468]	; (8004be8 <UART_SetConfig+0x344>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d124      	bne.n	8004a62 <UART_SetConfig+0x1be>
 8004a18:	4b70      	ldr	r3, [pc, #448]	; (8004bdc <UART_SetConfig+0x338>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a24:	d011      	beq.n	8004a4a <UART_SetConfig+0x1a6>
 8004a26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a2a:	d817      	bhi.n	8004a5c <UART_SetConfig+0x1b8>
 8004a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a30:	d011      	beq.n	8004a56 <UART_SetConfig+0x1b2>
 8004a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a36:	d811      	bhi.n	8004a5c <UART_SetConfig+0x1b8>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <UART_SetConfig+0x1a0>
 8004a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a40:	d006      	beq.n	8004a50 <UART_SetConfig+0x1ac>
 8004a42:	e00b      	b.n	8004a5c <UART_SetConfig+0x1b8>
 8004a44:	2300      	movs	r3, #0
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e037      	b.n	8004aba <UART_SetConfig+0x216>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e034      	b.n	8004aba <UART_SetConfig+0x216>
 8004a50:	2304      	movs	r3, #4
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e031      	b.n	8004aba <UART_SetConfig+0x216>
 8004a56:	2308      	movs	r3, #8
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e02e      	b.n	8004aba <UART_SetConfig+0x216>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e02b      	b.n	8004aba <UART_SetConfig+0x216>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a61      	ldr	r2, [pc, #388]	; (8004bec <UART_SetConfig+0x348>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d124      	bne.n	8004ab6 <UART_SetConfig+0x212>
 8004a6c:	4b5b      	ldr	r3, [pc, #364]	; (8004bdc <UART_SetConfig+0x338>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004a74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a78:	d011      	beq.n	8004a9e <UART_SetConfig+0x1fa>
 8004a7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a7e:	d817      	bhi.n	8004ab0 <UART_SetConfig+0x20c>
 8004a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a84:	d011      	beq.n	8004aaa <UART_SetConfig+0x206>
 8004a86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a8a:	d811      	bhi.n	8004ab0 <UART_SetConfig+0x20c>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <UART_SetConfig+0x1f4>
 8004a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a94:	d006      	beq.n	8004aa4 <UART_SetConfig+0x200>
 8004a96:	e00b      	b.n	8004ab0 <UART_SetConfig+0x20c>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e00d      	b.n	8004aba <UART_SetConfig+0x216>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e00a      	b.n	8004aba <UART_SetConfig+0x216>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e007      	b.n	8004aba <UART_SetConfig+0x216>
 8004aaa:	2308      	movs	r3, #8
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e004      	b.n	8004aba <UART_SetConfig+0x216>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e001      	b.n	8004aba <UART_SetConfig+0x216>
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac2:	d15c      	bne.n	8004b7e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004ac4:	7ffb      	ldrb	r3, [r7, #31]
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d827      	bhi.n	8004b1a <UART_SetConfig+0x276>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0x22c>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004af5 	.word	0x08004af5
 8004ad4:	08004afd 	.word	0x08004afd
 8004ad8:	08004b05 	.word	0x08004b05
 8004adc:	08004b1b 	.word	0x08004b1b
 8004ae0:	08004b0b 	.word	0x08004b0b
 8004ae4:	08004b1b 	.word	0x08004b1b
 8004ae8:	08004b1b 	.word	0x08004b1b
 8004aec:	08004b1b 	.word	0x08004b1b
 8004af0:	08004b13 	.word	0x08004b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af4:	f7ff f98c 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004af8:	61b8      	str	r0, [r7, #24]
        break;
 8004afa:	e013      	b.n	8004b24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004afc:	f7ff f9aa 	bl	8003e54 <HAL_RCC_GetPCLK2Freq>
 8004b00:	61b8      	str	r0, [r7, #24]
        break;
 8004b02:	e00f      	b.n	8004b24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b04:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <UART_SetConfig+0x34c>)
 8004b06:	61bb      	str	r3, [r7, #24]
        break;
 8004b08:	e00c      	b.n	8004b24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0a:	f7ff f90b 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8004b0e:	61b8      	str	r0, [r7, #24]
        break;
 8004b10:	e008      	b.n	8004b24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b16:	61bb      	str	r3, [r7, #24]
        break;
 8004b18:	e004      	b.n	8004b24 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	77bb      	strb	r3, [r7, #30]
        break;
 8004b22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8085 	beq.w	8004c36 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	005a      	lsls	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	d916      	bls.n	8004b78 <UART_SetConfig+0x2d4>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d212      	bcs.n	8004b78 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f023 030f 	bic.w	r3, r3, #15
 8004b5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	89fa      	ldrh	r2, [r7, #14]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	e05e      	b.n	8004c36 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77bb      	strb	r3, [r7, #30]
 8004b7c:	e05b      	b.n	8004c36 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d837      	bhi.n	8004bf4 <UART_SetConfig+0x350>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0x2e8>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bf5 	.word	0x08004bf5
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bf5 	.word	0x08004bf5
 8004ba4:	08004bf5 	.word	0x08004bf5
 8004ba8:	08004bf5 	.word	0x08004bf5
 8004bac:	08004bcf 	.word	0x08004bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7ff f92e 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	61b8      	str	r0, [r7, #24]
        break;
 8004bb6:	e022      	b.n	8004bfe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb8:	f7ff f94c 	bl	8003e54 <HAL_RCC_GetPCLK2Freq>
 8004bbc:	61b8      	str	r0, [r7, #24]
        break;
 8004bbe:	e01e      	b.n	8004bfe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <UART_SetConfig+0x34c>)
 8004bc2:	61bb      	str	r3, [r7, #24]
        break;
 8004bc4:	e01b      	b.n	8004bfe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc6:	f7ff f8ad 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8004bca:	61b8      	str	r0, [r7, #24]
        break;
 8004bcc:	e017      	b.n	8004bfe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e013      	b.n	8004bfe <UART_SetConfig+0x35a>
 8004bd6:	bf00      	nop
 8004bd8:	40013800 	.word	0x40013800
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40004400 	.word	0x40004400
 8004be4:	40004800 	.word	0x40004800
 8004be8:	40004c00 	.word	0x40004c00
 8004bec:	40005000 	.word	0x40005000
 8004bf0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77bb      	strb	r3, [r7, #30]
        break;
 8004bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d018      	beq.n	8004c36 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	085a      	lsrs	r2, r3, #1
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d908      	bls.n	8004c32 <UART_SetConfig+0x38e>
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d204      	bcs.n	8004c32 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	60da      	str	r2, [r3, #12]
 8004c30:	e001      	b.n	8004c36 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c42:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4a:	d10a      	bne.n	8004d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da0:	f7fb fee6 	bl	8000b70 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d10e      	bne.n	8004dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f82d 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e023      	b.n	8004e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d10e      	bne.n	8004dfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f817 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e00d      	b.n	8004e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e32:	e05e      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e3a:	d05a      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fb fe98 	bl	8000b70 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d11b      	bne.n	8004e8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e043      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d02c      	beq.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea6:	d124      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ec0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e00f      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d091      	beq.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4e:	d10e      	bne.n	8004f6e <UART_Start_Receive_IT+0x52>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <UART_Start_Receive_IT+0x48>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f62:	e01a      	b.n	8004f9a <UART_Start_Receive_IT+0x7e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	22ff      	movs	r2, #255	; 0xff
 8004f68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f6c:	e015      	b.n	8004f9a <UART_Start_Receive_IT+0x7e>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <UART_Start_Receive_IT+0x76>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <UART_Start_Receive_IT+0x6c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f86:	e008      	b.n	8004f9a <UART_Start_Receive_IT+0x7e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	227f      	movs	r2, #127	; 0x7f
 8004f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f90:	e003      	b.n	8004f9a <UART_Start_Receive_IT+0x7e>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2222      	movs	r2, #34	; 0x22
 8004fa6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc0:	d107      	bne.n	8004fd2 <UART_Start_Receive_IT+0xb6>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <UART_Start_Receive_IT+0xe4>)
 8004fce:	665a      	str	r2, [r3, #100]	; 0x64
 8004fd0:	e002      	b.n	8004fd8 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <UART_Start_Receive_IT+0xe8>)
 8004fd6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004fee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	08005199 	.word	0x08005199
 8005004:	080050c5 	.word	0x080050c5

08005008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800501e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0210 	bic.w	r2, r2, #16
 8005046:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	665a      	str	r2, [r3, #100]	; 0x64
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff fbf7 	bl	8004878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fbd4 	bl	8004864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d8:	2b22      	cmp	r3, #34	; 0x22
 80050da:	d151      	bne.n	8005180 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050e2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050e4:	89bb      	ldrh	r3, [r7, #12]
 80050e6:	b2d9      	uxtb	r1, r3
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	400a      	ands	r2, r1
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d138      	bne.n	8005190 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800512c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10f      	bne.n	8005172 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0210 	bic.w	r2, r2, #16
 8005160:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fb8e 	bl	800488c <HAL_UARTEx_RxEventCallback>
 8005170:	e002      	b.n	8005178 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb f842 	bl	80001fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800517e:	e007      	b.n	8005190 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0208 	orr.w	r2, r2, #8
 800518e:	619a      	str	r2, [r3, #24]
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ac:	2b22      	cmp	r3, #34	; 0x22
 80051ae:	d151      	bne.n	8005254 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051b6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80051be:	89ba      	ldrh	r2, [r7, #12]
 80051c0:	89fb      	ldrh	r3, [r7, #14]
 80051c2:	4013      	ands	r3, r2
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d138      	bne.n	8005264 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005200:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10f      	bne.n	8005246 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0210 	bic.w	r2, r2, #16
 8005234:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fb24 	bl	800488c <HAL_UARTEx_RxEventCallback>
 8005244:	e002      	b.n	800524c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fa ffd8 	bl	80001fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005252:	e007      	b.n	8005264 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	619a      	str	r2, [r3, #24]
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005288:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800528c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	b29b      	uxth	r3, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	b29b      	uxth	r3, r3
 800529e:	4013      	ands	r3, r2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052b6:	b084      	sub	sp, #16
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	f107 0014 	add.w	r0, r7, #20
 80052c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	b004      	add	sp, #16
 80052f6:	4770      	bx	lr

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4d0d      	ldr	r5, [pc, #52]	; (8005330 <__libc_init_array+0x38>)
 80052fc:	4c0d      	ldr	r4, [pc, #52]	; (8005334 <__libc_init_array+0x3c>)
 80052fe:	1b64      	subs	r4, r4, r5
 8005300:	10a4      	asrs	r4, r4, #2
 8005302:	2600      	movs	r6, #0
 8005304:	42a6      	cmp	r6, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	4d0b      	ldr	r5, [pc, #44]	; (8005338 <__libc_init_array+0x40>)
 800530a:	4c0c      	ldr	r4, [pc, #48]	; (800533c <__libc_init_array+0x44>)
 800530c:	f000 f820 	bl	8005350 <_init>
 8005310:	1b64      	subs	r4, r4, r5
 8005312:	10a4      	asrs	r4, r4, #2
 8005314:	2600      	movs	r6, #0
 8005316:	42a6      	cmp	r6, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005320:	4798      	blx	r3
 8005322:	3601      	adds	r6, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	f855 3b04 	ldr.w	r3, [r5], #4
 800532a:	4798      	blx	r3
 800532c:	3601      	adds	r6, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	080053a0 	.word	0x080053a0
 8005334:	080053a0 	.word	0x080053a0
 8005338:	080053a0 	.word	0x080053a0
 800533c:	080053a4 	.word	0x080053a4

08005340 <memset>:
 8005340:	4402      	add	r2, r0
 8005342:	4603      	mov	r3, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	f803 1b01 	strb.w	r1, [r3], #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <_init>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr

0800535c <_fini>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	bf00      	nop
 8005360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005362:	bc08      	pop	{r3}
 8005364:	469e      	mov	lr, r3
 8005366:	4770      	bx	lr
